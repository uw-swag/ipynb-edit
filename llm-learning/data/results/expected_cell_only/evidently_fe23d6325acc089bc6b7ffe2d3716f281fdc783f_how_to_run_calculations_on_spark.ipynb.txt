from pyspark.sql import SparkSession
from pyspark.sql import functions as sf

from evidently.spark.engine import SparkEngine

from evidently import ColumnMapping

from evidently.report import Report
from evidently.metrics import ColumnDriftMetric, DataDriftTable, DatasetDriftMetric
from evidently.metric_preset import DataDriftPreset

from evidently.test_suite import TestSuite
from evidently.tests import TestColumnDrift, TestShareOfDriftedColumns, TestNumberOfDriftedColumns
from evidently.test_preset import DataDriftTestPreset
spark = SparkSession.builder.getOrCreate()
def spark_data_generation(n_rows=3000, n_columns=5):
    return spark.range(n_rows).select(*[sf.rand().alias(str(i)) for i in range(n_columns)])
reference = spark_data_generation()
current = spark_data_generation()
column_mapping = ColumnMapping()

spark_drift_report = Report(metrics=[
    DatasetDriftMetric(),
    DataDriftTable()
])

spark_drift_report.run(reference_data=reference, current_data=current, column_mapping=column_mapping,
                 engine=SparkEngine)
spark_drift_report.show(mode='inline')
column_mapping = ColumnMapping()

spark_drift_preset_report = Report(metrics=[
    DataDriftPreset()
])

spark_drift_preset_report.run(reference_data=reference, current_data=current, column_mapping=column_mapping,
                 engine=SparkEngine)
spark_drift_preset_report.show(mode='inline')
column_mapping = ColumnMapping()

drift_tests = TestSuite(tests=[
    TestNumberOfDriftedColumns(),
    TestShareOfDriftedColumns(),
])

drift_tests.run(reference_data=reference, current_data=current, column_mapping=column_mapping,
                 engine=SparkEngine)
drift_tests.show(mode='inline')
column_mapping = ColumnMapping()

drift_test_preset = TestSuite(tests=[
    DataDriftTestPreset()
])

drift_test_preset.run(reference_data=reference, current_data=current, column_mapping=column_mapping,
                 engine=SparkEngine)
drift_test_preset.show(mode='inline')

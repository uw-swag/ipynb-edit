import pandas as pd

from datetime import datetime
from sklearn import datasets, ensemble, model_selection

from evidently.dashboard import Dashboard
from evidently.pipeline.column_mapping import ColumnMapping
from evidently.tabs import ClassificationPerformanceTab

from evidently.model_profile import Profile
from evidently.profile_sections import ClassificationPerformanceProfileSection
bcancer = datasets.load_breast_cancer()
bcancer_frame = pd.DataFrame(bcancer.data, columns = bcancer.feature_names)
bcancer_frame['target'] = bcancer.target
bcancer_frame.head()
target = 'target'
prediction = 'prediction'

numerical_features = bcancer.feature_names
categorical_features = []

features = numerical_features.tolist() + categorical_features
train_data, test_data = model_selection.train_test_split(bcancer_frame, random_state=0)
model = ensemble.RandomForestClassifier(random_state=0)
model.fit(train_data[features], train_data.target)
train_predictions = model.predict(train_data[features])
test_predictions = model.predict(test_data[features])
train_data['prediction'] = train_predictions
test_data['prediction'] = test_predictions
bcancer_column_mapping = ColumnMapping()

bcancer_column_mapping.target = target
bcancer_column_mapping.prediction = prediction
bcancer_column_mapping.numerical_features = numerical_features
bcancer_model_performance_dashboard = Dashboard(tabs=[ClassificationPerformanceTab(verbose_level=1)])
bcancer_model_performance_dashboard.calculate(train_data, test_data, column_mapping = bcancer_column_mapping)
bcancer_model_performance_dashboard.show()
# bcancer_model_performance_dashboard.save('bcancer_model_performance.html')
bcancer_model_performance_dashboard = Dashboard(tabs=[ClassificationPerformanceTab(verbose_level=0)])
bcancer_model_performance_dashboard.calculate(train_data, test_data, column_mapping = bcancer_column_mapping)
bcancer_model_performance_dashboard.show()
# bcancer_model_performance_dashboard.save('bcancer_model_performance.html')
bcancer_classification_performance_profile = Profile(sections=[ClassificationPerformanceProfileSection()])
bcancer_classification_performance_profile.calculate(train_data, test_data, column_mapping = bcancer_column_mapping)
bcancer_classification_performance_profile.json() 


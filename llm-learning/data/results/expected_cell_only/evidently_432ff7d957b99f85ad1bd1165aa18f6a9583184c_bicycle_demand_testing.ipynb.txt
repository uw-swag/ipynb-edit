import pandas as pd
import numpy as np
import requests
import zipfile
import io

from datetime import datetime, time
from sklearn import datasets, ensemble

from evidently import ColumnMapping

from evidently.report import Report
from evidently.metric_preset import DataDriftPreset, RegressionPreset

from evidently.test_suite import TestSuite
from evidently.test_preset import DataDriftTestPreset, RegressionTestPreset
from evidently.tests import TestValueMeanError, TestValueMAE, TestValueRMSE
import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')
content = requests.get("https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip").content
with zipfile.ZipFile(io.BytesIO(content)) as arc:
    raw_data = pd.read_csv(arc.open("hour.csv"), header=0, sep=',', parse_dates=['dteday'], index_col='dteday')
raw_data.index = raw_data.apply(
    lambda row: datetime.combine(row.name, time(hour=int(row['hr']))), axis = 1)
raw_data.head()
target = 'cnt'
prediction = 'prediction'
numerical_features = ['temp', 'atemp', 'hum', 'windspeed', 'hr', 'weekday']
categorical_features = ['season', 'holiday', 'workingday']
reference = raw_data.loc['2011-01-01 00:00:00':'2011-01-28 23:00:00']
current = raw_data.loc['2011-01-29 00:00:00':'2011-02-28 23:00:00']
reference.head()
regressor = ensemble.RandomForestRegressor(random_state = 0, n_estimators = 50)
regressor.fit(reference[numerical_features + categorical_features], reference[target])
ref_prediction = regressor.predict(reference[numerical_features + categorical_features])
current_prediction = regressor.predict(current[numerical_features + categorical_features])
reference['prediction'] = ref_prediction
current['prediction'] = current_prediction
column_mapping = ColumnMapping()

column_mapping.target = target
column_mapping.prediction = prediction
column_mapping.numerical_features = numerical_features
column_mapping.categorical_features = categorical_features
regression_perfomance_report = Report(
    metrics=[RegressionPreset()]
)

regression_perfomance_report.run(reference_data=None, current_data=reference, column_mapping=column_mapping)
regression_perfomance_report.show()
#regression_perfomance_report.save_html('regression_performance_at_training.html')
regression_performance_test = TestSuite(tests=[
    TestValueMeanError(lte=10, gte=-10),
    TestValueMAE(lte=15),
])

regression_performance_test.run(reference_data=None, 
                                current_data=current.loc['2011-01-29 00:00:00':'2011-02-07 23:00:00'],
                                column_mapping=column_mapping)
regression_performance_test
regression_performance_test.as_dict()
regression_performance_test = TestSuite(tests=[
    TestValueMeanError(lte=10, gte=-10),
    TestValueMAE(lte=15),
])

regression_performance_test.run(reference_data=None, 
                                current_data=current.loc['2011-02-07 00:00:00':'2011-02-14 23:00:00'],
                                column_mapping=column_mapping)
regression_performance_test
regression_performance_test = TestSuite(tests=[
    TestValueMeanError(lte=10, gte=-10),
    TestValueMAE(lte=15),
])

regression_performance_test.run(reference_data=None, 
                                current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'],
                                column_mapping=column_mapping)
regression_performance_test
regression_report = Report(
    metrics=[
        RegressionPreset()
    ]
)

regression_report.run(reference_data=reference, 
                      current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'],
                      column_mapping=column_mapping)
regression_report
drift_report = Report(
    metrics=[
        DataDriftPreset()
    ]
)

drift_report.run(reference_data=reference, 
                                current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'],
                                column_mapping=column_mapping)
drift_report

import matplotlib.pyplot as plt
%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
import numpy as np


labels = ['Random words', 'Targeted', 'Gender',]
men_means = [52, 61, 62]
women_means = [77, 69, 77]

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, men_means, width, label='Vanilla', color= 'b')
rects2 = ax.bar(x + width/2, women_means, width, label='Our method', color= 'g')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Accuracy')
ax.set_title('Accuracy on unbiased test set for different tasks on SST')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.set_ylim([50,90])
def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)

fig.tight_layout()

plt.show()

import torch
import torchvision
import torchvision.datasets as datasets
import sys
import numpy as np
import torch.utils.data as utils
from colour import Color
red = Color("red")
colors = list(red.range_to(Color("purple"),10))
colors = [x.get_rgb() for x in colors]
from os.path import join as oj
mnist_trainset = datasets.MNIST(root='../data', train=True, download=True, transform=None)
num_samples = len(mnist_trainset)
color_x_single = np.zeros((num_samples, 3, 28, 28))
color_y = mnist_trainset.train_labels.numpy().copy()

np.random.seed(0)
noise = 0.00
for i in range(200):
    my_color  = np.clip(colors[mnist_trainset.targets[i]] + np.random.normal(size=3,scale =noise),0,1)
    color_x_single[i ] = mnist_trainset.data[i].numpy().astype(np.float32)[np.newaxis]*my_color[:, None, None]

color_x_single /=color_x_single.max()
color_x_single = color_x_single*2 -1
color_x_single[0].max()
test = color_x[0].copy()/255
(color_x[0]*2 +.5).max()
color_x[0].max()
(test == color_x[0]).mean()
plt.imshow(color_x[0].swapaxes(0,2))
np.random.normal(size=3,scale =noise)
import torch
import torchvision
import torchvision.datasets as datasets
import sys
import numpy as np
import torch.utils.data as utils
from colour import Color
red = Color("red")
colors = list(red.range_to(Color("purple"),10))
colors = [x.get_rgb() for x in colors]
from os.path import join as oj
mnist_trainset = datasets.MNIST(root='../data', train=True, download=True, transform=None)
color_x = np.zeros((len(mnist_trainset), 3, 28, 28))


for i in range(10):
    color_x[np.where((mnist_trainset.train_labels ==i)) ] = (mnist_trainset.data[np.where((mnist_trainset.train_labels ==i))].numpy().astype(np.float32)[:, np.newaxis, :,:]*np.asarray(colors[i])[None, :, None, None])


color_y = mnist_trainset.train_labels.numpy().copy()

color_x /=color_x.max()
color_x = color_x*2 -1

color_x.dtype
my_color

test_x = np.load(oj("../data/ColorMNIST", "train_x.npy")).swapaxes(1,3).swapaxes(1,2)/2+.5
test_y= np.load(oj("../data/ColorMNIST", "train_y.npy"))
#test_dataset_color = utils.TensorDataset(test_x_tensor,test_y_color) # create your datset


idxs = np.random.choice(256, size =200)
alpha =np.random.uniform(0,1, size= 200)

img = test_x[3].copy()

color_x = np.zeros((num_samples, 3, 28, 28))
color_x.dtype
import torch
import torchvision
import torchvision.datasets as datasets
import sys
import numpy as np
import torch.utils.data as utils
from colour import Color
red = Color("red")
colors = list(red.range_to(Color("purple"),10))
colors = [x.get_rgb() for x in colors]
from os.path import join as oj
mnist_trainset = datasets.MNIST(root='../data', train=True, download=True, transform=None)
num_samples = len(mnist_trainset)
color_x_single = np.zeros((num_samples, 3, 28, 28))

noise = 0.00
np.random.seed(0)
# for i in range(num_samples):
#     my_color  = np.clip(colors[mnist_trainset.targets[i]] + np.random.normal(size=3,scale =noise),0,1)
#     color_x_single[i ] = mnist_trainset.data[i].numpy().astype(np.float32)[np.newaxis]*my_color[:, None, None]/255.0
color_y_single = mnist_trainset.train_labels.numpy().copy()

color_x_single /=color_x_single.max()
color_x_single = color_x_single*2 -1
np.save(oj("../data/ColorMNIST", "train_x.npy"), color_x)
np.save(oj("../data/ColorMNIST", "train_y.npy"), color_y)


mnist_trainset = datasets.MNIST(root='../data', train=False, download=True, transform=None)
num_samples = len(mnist_trainset)
color_x_single = np.zeros((num_samples, 3, 28, 28))
for i in range(num_samples):
    my_color  = np.clip(colors[mnist_trainset.targets[9-i]] + np.random.normal(size=3,scale =noise),0,1)
    color_x_single[i ] = mnist_trainset.data[i].numpy().astype(np.float32)[np.newaxis]*my_color[:, None, None]/255.0
color_y = mnist_trainset.train_labels.numpy().copy()

color_x_single /=color_x_single.max()
color_x_single = color_x_single*2 -1
np.save(oj("../data/ColorMNIST", "test_x.npy"),  color_x)
np.save(oj("../data/ColorMNIST", "test_y.npy"), color_y)
np.save(oj("../data/ColorMNIST", "test_y_color.npy"), 9-color_y)
print("Saved color MNIST")
(color_x_single == color_x).all()
plt.imshow(color_x[0].swapaxes(0,2)/2+.5)
plt.imshow(color_x_single[0].swapaxes(0,2)/2+.5)
(color_x[0] - color_x_single[0]).sum()
import torch
import torchvision
import torchvision.datasets as datasets
import sys
import numpy as np
import torch.utils.data as utils
from colour import Color
red = Color("red")
colors = list(red.range_to(Color("purple"),10))
colors = [x.get_rgb() for x in colors]
from os.path import join as oj
mnist_trainset = datasets.MNIST(root='../data', train=True, download=True, transform=None)
color_x = np.zeros((len(mnist_trainset), 3, 28, 28))


# for i in range(10):
#     color_x[np.where((mnist_trainset.train_labels ==i)) ] = (mnist_trainset.data[np.where((mnist_trainset.train_labels ==i))].numpy().astype(np.float32)[:, np.newaxis, :,:]*np.asarray(colors[i])[None, :, None, None])





color_y = mnist_trainset.train_labels.numpy().copy()

color_x /=color_x.max()
color_x = color_x*2 -1
np.save(oj("../data/ColorMNIST", "train_x.npy"), color_x)
np.save(oj("../data/ColorMNIST", "train_y.npy"), color_y)


mnist_trainset = datasets.MNIST(root='../data', train=False, download=True, transform=None)
color_x = np.zeros((len(mnist_trainset), 3, 28, 28))

for i in range(10):
    color_x[np.where((mnist_trainset.train_labels ==i)) ] = (mnist_trainset.data[np.where((mnist_trainset.train_labels ==i))].numpy().astype(np.float32)[:, np.newaxis, :,:]*np.asarray(colors[9-i])[None, :, None, None])
color_y = mnist_trainset.train_labels.numpy().copy()
color_x /=color_x.max()
color_x = color_x*2 -1

print("Saved color MNIST")


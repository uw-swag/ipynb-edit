!pip install -e /Users/olgafilippova/work/evidently
import pandas as pd
import numpy as np
from sklearn.datasets import fetch_openml
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import seaborn as sns

import pandas as pd


from evidently.dashboard import Dashboard
from evidently.pipeline.column_mapping import ColumnMapping
from evidently.dashboard.tabs import ProbClassificationPerformanceTab

from evidently.model_profile import Profile
from evidently.model_profile.sections import ProbClassificationPerformanceProfileSection
wine = fetch_openml(name='wine_quality', version=1)
wine_df = wine.frame
red = wine_df[:1599]
white = wine_df[1599:]
wine_column_mapping = ColumnMapping()
wine_column_mapping.numerical_features = wine.feature_names
from evidently.dashboard.tabs import DataDriftTab
model_performance_dashboard = Dashboard(tabs=[DataDriftTab()])
model_performance_dashboard.calculate(red.sample(1000, random_state=0), 
                                      white.sample(1000, random_state=0), 
                                      column_mapping=wine_column_mapping)
model_performance_dashboard.show()
default_df['y'] = default_df['y'].astype(int)
wine_df['target'] = (wine_df['quality'] > 5).astype(int)
train_data, test_data = train_test_split(wine_df, random_state=0)
model = LogisticRegression()
model.fit(wine_df[wine.feature_names], wine_df.target)
train_probas = pd.DataFrame(model.predict_proba(train_data[wine.feature_names]))
train_probas.columns = ['bad', 'good']
test_probas = pd.DataFrame(model.predict_proba(test_data[wine.feature_names]))
test_probas.columns = ['bad', 'good']
train_data['target'] = train_data['target'].map({1: 'good', 0: 'bad'}).astype(str).values
test_data['target'] = test_data['target'].map({1: 'good', 0: 'bad'}).astype(str).values
train_data.reset_index(inplace=True, drop=True)
test_data.reset_index(inplace=True, drop=True)

merged_train_data = pd.concat([train_data, train_probas], axis=1)
merged_test_data = pd.concat([test_data, test_probas], axis=1)
wine_column_mapping = ColumnMapping()

wine_column_mapping.target = 'target'
wine_column_mapping.prediction = ['good', 'bad']
wine_column_mapping.numerical_features = wine.feature_names
wine_model_performance_dashboard = Dashboard(tabs=[ProbClassificationPerformanceTab(verbose_level=1)])
wine_model_performance_dashboard.calculate(merged_train_data.sample(1000, random_state=0), 
                                           merged_test_data.sample(1000, random_state=0), 
                                              column_mapping = wine_column_mapping)
wine_model_performance_dashboard.show()
from evidently.options import QualityMetricsOptions
m_options = QualityMetricsOptions(cut_quantile={'chlorides': ('right', 0.95), 'MedHouseVal': ('right', 0.5)}, 
                                  classification_threshold = 0.8,
                                  conf_interval_n_sigmas=3)
wine_model_performance_dashboard = Dashboard(tabs=[ProbClassificationPerformanceTab(verbose_level=1)],
                                             options=[m_options])
wine_model_performance_dashboard.calculate(merged_train_data.sample(1000, random_state=0), 
                                           merged_test_data.sample(1000, random_state=0), 
                                              column_mapping = wine_column_mapping)
wine_model_performance_dashboard.show()
from evidently.dashboard.tabs import DataDriftTab
model_performance_dashboard = Dashboard(tabs=[DataDriftTab()], options=[m_options])
model_performance_dashboard.calculate(merged_train_data.sample(1000, random_state=0), 
                                      merged_test_data.sample(1000, random_state=0),
                                      column_mapping=wine_column_mapping)
model_performance_dashboard.show()


# conventional way to import pandas
import pandas as pd
# read CSV file from the 'data' subdirectory using a relative path
data = pd.read_csv('data/Advertising.csv', index_col=0)

# display the first 5 rows

# display the last 5 rows

# check the shape of the DataFrame (rows, columns)

# conventional way to import seaborn
import seaborn as sns

# allow plots to appear within the notebook
%matplotlib inline
# visualize the relationship between the features and the response using scatterplots
sns.pairplot(data, x_vars=['TV','Radio','Newspaper'], y_vars='Sales', size=7, aspect=0.7, kind='reg')
# create a Python list of feature names

# use the list to select a subset of the original DataFrame

# print the first 5 rows

# check the type and shape of X


# select a Series from the DataFrame

# print the first 5 values

# check the type and shape of y

# You're free to use the internet! Check out how to split a dataset into train and test using Sklearn and use it here!
# We would like you to do a 80:20 split.


# Print the shapes of the different numpy arrays you get after the split above!



# import the linear regression model! You're free to use the internet!

# instantiate the model. Check what parameter are necessary for you.

# fit the model to the training data (learn the coefficients)

# print the intercept and coefficients


# pair the feature names with the coefficients. You might learn a new function here :)


# make predictions on the testing set


# define true and predicted response values
true = [100, 50, 30, 20]
pred = [90, 50, 50, 30]
# calculate MAE by hand
print((10 + 0 + 20 + 10)/4.)

# calculate MAE using scikit-learn
from sklearn import metrics
print(metrics.mean_absolute_error(true, pred))
# calculate MSE by hand
print((10**2 + 0**2 + 20**2 + 10**2)/4.)

# calculate MSE using scikit-learn
print(metrics.mean_squared_error(true, pred))
# calculate RMSE by hand
import numpy as np
print(np.sqrt((10**2 + 0**2 + 20**2 + 10**2)/4.))

# calculate RMSE using scikit-learn
print(np.sqrt(metrics.mean_squared_error(true, pred)))
# Compute RMSE from our trained model here!




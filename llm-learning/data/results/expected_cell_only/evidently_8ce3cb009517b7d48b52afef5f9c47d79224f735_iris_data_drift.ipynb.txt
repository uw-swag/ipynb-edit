import pandas as pd
import numpy as np

from sklearn import datasets, model_selection, neighbors

from evidently.dashboard import Dashboard
from evidently.tabs import DataDriftTab, CatTargetDriftTab
from evidently.tabs import ClassificationPerformanceTab, ProbClassificationPerformanceTab

from evidently.model_profile import Profile
from evidently.profile_sections import DataDriftProfileSection, CatTargetDriftProfileSection 
from evidently.profile_sections import ClassificationPerformanceProfileSection, ProbClassificationPerformanceProfileSection
iris_data_drift_report = Dashboard(tabs=[DataDriftTab])
iris_data_drift_report.calculate(iris_frame, iris_frame, column_mapping = None)
#iris_data_drift_report.save('iris_data_drift.html')
iris_data_drift_profile = Profile(sections=[DataDriftProfileSection])
iris_data_drift_profile.calculate(iris_frame, iris_frame, column_mapping = None)
drift_profile = iris_data_drift_profile.json() 
drift_profile
iris_data_and_target_drift_report = Dashboard(tabs=[DataDriftTab, CatTargetDriftTab])
iris_data_and_target_drift_report.calculate(iris_frame[:75], iris_frame[75:], column_mapping = None)
iris_data_and_target_drift_report.save('iris_data_and_target_drift.html')
iris_target_and_data_drift_profile = Profile(sections=[DataDriftProfileSection, CatTargetDriftProfileSection])
iris_target_and_data_drift_profile.calculate(iris_frame[:75], iris_frame[75:], column_mapping = None) 
data_and_target_profile = iris_target_and_data_drift_profile.json() 
data_and_target_profile
iris_model_performance = Dashboard(tabs=[ClassificationPerformanceTab])
iris_model_performance.calculate(reference, production, column_mapping = iris_column_mapping)
iris_model_performance.show()
#iris_drift.save('iris_classification_performance.html')
iris_classification_performance_profile = Profile(sections=[ClassificationPerformanceProfileSection])
iris_classification_performance_profile.calculate(reference, production, column_mapping = iris_column_mapping)
classification_performance_profile = iris_classification_performance_profile.json() 
classification_performance_profile
iris_frame = pd.DataFrame(iris.data, columns = iris.feature_names)
reference, production, y_train, y_test = model_selection.train_test_split(iris_frame, 
                                                                          iris.target, 
                                                                          random_state=0)
model = neighbors.KNeighborsClassifier(n_neighbors=5)
model.fit(reference, y_train)
train_probas = pd.DataFrame(model.predict_proba(reference))
train_probas.columns = iris.target_names
test_probas = pd.DataFrame(model.predict_proba(production))
test_probas.columns = iris.target_names
reference['target'] = [iris.target_names[x] for x in y_train]
production['target'] = [iris.target_names[x] for x in y_test]
reference.reset_index(inplace=True, drop=True)
reference['result'] = [iris.target_names[x] for x in y_train]
merged_reference = pd.concat([reference, train_probas], axis = 1)

production.reset_index(inplace=True, drop=True)
production['result'] = [iris.target_names[x] for x in y_test]
merged_production = pd.concat([production, test_probas], axis = 1)
iris_column_mapping = {}

iris_column_mapping['target'] = 'target'
iris_column_mapping['prediction'] = iris.target_names.tolist()
iris_column_mapping['numerical_features'] = iris.feature_names
iris_model_performance = Dashboard(tabs=[ProbClassificationPerformanceTab])
iris_model_performance.calculate(merged_reference, merged_production, column_mapping = iris_column_mapping)
iris_model_performance.show()
iris_prob_performance_profile = Profile(sections=[ProbClassificationPerformanceProfileSection])
iris_prob_performance_profile.calculate(merged_reference, merged_production, column_mapping = iris_column_mapping)
prob_performance_profile = iris_prob_performance_profile.json() 
prob_performance_profile

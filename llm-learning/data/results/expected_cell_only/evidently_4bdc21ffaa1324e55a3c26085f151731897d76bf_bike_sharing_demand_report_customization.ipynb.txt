import pandas as pd
import requests
import zipfile
import io

from sklearn.ensemble import RandomForestRegressor

from evidently import ColumnMapping
from evidently.dashboard import Dashboard
from evidently.tabs import RegressionPerformanceTab, DataDriftTab

from evidently.model_profile import Profile
from evidently.profile_sections import RegressionPerformanceProfileSection
import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')
content = requests.get("https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip").content
with zipfile.ZipFile(io.BytesIO(content)) as arc:
    raw_data = pd.read_csv(arc.open("day.csv"), header=0, sep=',', parse_dates=['dteday'], index_col='dteday')
ref_data = raw_data.loc['2011-01-01 00:00:00':'2011-04-30 23:00:00']
prod_data = raw_data.loc['2011-05-01 00:00:00':'2011-05-30 23:00:00']
ref_data
target = 'cnt'
prediction = 'prediction'
datetime = 'dteday'

numerical_features = ['temp', 'atemp', 'hum', 'windspeed']
categorical_features = ['season', 'holiday', 'workingday', 'weathersit']

features = numerical_features + categorical_features
model = RandomForestRegressor(random_state = 0)
model.fit(ref_data[features], ref_data[target])
ref_data['prediction']  = model.predict(ref_data[features])
prod_data['prediction'] = model.predict(prod_data[features])
column_mapping = ColumnMapping(target,
                               'prediction',
                               numerical_features=numerical_features,
                               categorical_features=categorical_features)
dashboard = Dashboard(tabs=[RegressionPerformanceTab(verbose_level=0)])
dashboard.calculate(ref_data, prod_data, column_mapping=column_mapping)
dashboard.show()
from evidently.options import DataDriftOptions
opt = DataDriftOptions(nbinsx={'temp':20, 'atemp': 20, 'hum':20}, confidence=0.99)
dashboard = Dashboard(tabs=[RegressionPerformanceTab(verbose_level=0), DataDriftTab()], options=[opt])
dashboard.calculate(ref_data, prod_data, column_mapping=column_mapping)
dashboard.show()
RegressionPerformanceTab.list_widgets()
dashboard = Dashboard(tabs=[RegressionPerformanceTab(include_widgets=[
    "Regression Model Performance Report.",
    "Reference: Error Distribution",
    "Current: Error Distribution",
])])
dashboard.calculate(ref_data, prod_data, column_mapping=column_mapping)
dashboard.show()
import plotly.express as px
figure = px.line(ref_data, x=ref_data.index, y='cnt', title='Time Series with Rangeslider')
figure.update_xaxes(rangeslider_visible=True)
figure.show()
import json
from typing import Optional

#from evidently.analyzers.regression_performance_analyzer import RegressionPerformanceAnalyzer
from evidently.model.widget import BaseWidgetInfo #, AlertStats
from evidently.widgets.widget import Widget, RED, GREY
class TSRangesliderWidget(Widget):
    
    def __init__(self, title: str, column: str, use_current=False, fig_size=1):
        self.title = title
        self.column = column
        self.use_current = use_current
        self.fig_size = fig_size

    def calculate(self,
                  reference_data: pd.DataFrame,
                  current_data: pd.DataFrame,
                  column_mapping,
                  analyzers_results) -> Optional[BaseWidgetInfo]:
        
        if self.use_current == True:
            frame = current_data
        else: frame = reference_data

        figure = px.line(frame, x=frame.index, y=self.column, color_discrete_sequence=[RED, GREY])
        figure.update_xaxes(rangeslider_visible=True)

        figure_json = json.loads(figure.to_json())

        return BaseWidgetInfo(
            title=self.title,
            type="big_graph",
            size=self.fig_size,
            params={
                "data": figure_json['data'],
                "layout": figure_json['layout']
            },
        )
dashboard = Dashboard(tabs=[RegressionPerformanceTab(include_widgets=[
    "Regression Model Performance Report.",
    TSRangesliderWidget('Reference: Target with Rangeslider', 'cnt', fig_size=2),
    "Reference: Error Distribution",
    "Current: Error Distribution",
])])
dashboard.calculate(ref_data, prod_data, column_mapping=column_mapping)
dashboard.show()
from evidently.tabs.base_tab import Tab, Verbose

class TimeSeriesTab(Tab):
    widgets = [
        (TSRangesliderWidget('Reference: Target with Rangeslider', 'cnt', fig_size=2), Verbose.ALWAYS),
        (TSRangesliderWidget('Current: Target with Rangeslider', 'cnt', use_current=True, fig_size=2), Verbose.ALWAYS),
        (TSRangesliderWidget('Reference: Temp with Rangeslider', 'temp', fig_size=1), Verbose.FULL),
        (TSRangesliderWidget('Reference: Temp with Rangeslider', 'temp', use_current=True, fig_size=1), Verbose.FULL),
    ]
dashboard = Dashboard(tabs=[TimeSeriesTab()])
dashboard.calculate(ref_data, prod_data, column_mapping=column_mapping)
dashboard.show()
#dashboard.save('bike_sharing_demand_model_perfomance.html')

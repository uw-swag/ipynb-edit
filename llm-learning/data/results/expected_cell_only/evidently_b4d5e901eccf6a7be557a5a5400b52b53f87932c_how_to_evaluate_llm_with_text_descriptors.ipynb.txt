#Descriptors with Hugging Face models
report = Report(metrics=[
    TextEvals(column_name="response", descriptors=[
        HuggingFaceModel(model="DaNLP/da-electra-hatespeech-detection", display_name="Hugging Face Toxicity for response"),
        HuggingFaceModel(model="SamLowe/roberta-base-go_emotions", params={"label": "disappointment"}, 
                         display_name="Hugging Face Disappointment for response"), 
        HuggingFaceModel(model="SamLowe/roberta-base-go_emotions", params={"label": "optimism"}, 
                         display_name="Hugging Face Optimism for response"),
        HuggingFaceModel(model="MoritzLaurer/DeBERTa-v3-large-mnli-fever-anli-ling-wanli", params={"labels": ["HR", "finance"], "threshold":0.5}, 
                         display_name="Hugging Face Topic"), 
        HuggingFaceModel(model="lakshyakh93/deberta_finetuned_pii", params={"threshold": 0.6},
                        display_name="Hugging Face PII for respone"),
    ])
])

report.run(reference_data=assistant_logs[datetime(2024, 4, 8) : datetime(2024, 4, 9)], 
           current_data= assistant_logs[datetime(2024, 4, 9) : datetime(2024, 4, 10)], 
           column_mapping=column_mapping)

report    
test_suite.datasets()[1]
ws = CloudWorkspace(
    	token="YOUR TOKEN HERE",
    	url="https://app.evidently.cloud/"
)
project = ws.create_project("Virtual assistant testing", team_id="YOUR TEAM ID HERE")
project.description = "Project descriotion"
def create_report(i: int):
    report = Report(metrics=[
        TextEvals(column_name="question", descriptors=[
            Sentiment(display_name="Question sentiment"),
            TextLength(display_name= "Question length"),
            OOV(display_name= "Question out of vocabulary words")
        ]),
        TextEvals(column_name="response", descriptors=[
            Sentiment(display_name="Response sentiment"),
            NonLetterCharacterPercentage(display_name="Non letter characters in response"),
            SentenceCount(display_name="Sentence count in response"),
            WordCount(display_name="Word count in response")
        ])
    ],
        timestamp=datetime.now() + timedelta(days=i),
                   )
    
    report.run(reference_data=None, current_data=assistant_logs.iloc[20 * i : 20 * (i + 1), :], column_mapping=column_mapping)
    return report    
for i in range(0, 5):
        test_suite = create_test_suite(i=i)
        ws.add_test_suite(project.id, test_suite)
for i in range(0, 5):
        report = create_report(i=i)
        ws.add_report(project.id, report)
project.dashboard.add_panel(
    DashboardPanelTestSuite(
        title="Test results",
        filter=ReportFilter(metadata_values={}, tag_values=[], include_test_suites=True),
        size=WidgetSize.FULL,
        panel_type=TestSuitePanelType.DETAILED,
        time_agg="1D",
    )
)
project.save()

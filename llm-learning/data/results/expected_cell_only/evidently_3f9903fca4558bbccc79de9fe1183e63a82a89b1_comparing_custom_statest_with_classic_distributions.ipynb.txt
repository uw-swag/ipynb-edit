import pandas as pd
import numpy as np

from scipy import stats

from sklearn import datasets, ensemble, model_selection

import evidently
from evidently import ColumnMapping
from evidently.calculations.stattests import StatTest
from evidently.options import DataDriftOptions
from evidently.test_suite import TestSuite
from evidently.tests import *

from plotly import graph_objs as go
import plotly.express as px
#function that will help us define sample and control group

def give_me_smp_cntr_df(sample1,sample2):
    """
    It recieves two arrays of the produced sample distributions and
    returns two dataframes that have the sample and control groups to test later the drift
    """
    sample_df = pd.DataFrame(np.array([sample1,sample2]).T,columns=['sample_group','control_group'])
    #initial dataset
    smp_df=sample_df['sample_group'].reset_index().rename(columns={'sample_group': "test_group"})
    #control dataset
    cntr_df=sample_df['control_group'].reset_index().rename(columns={'control_group': "test_group"})
    return smp_df,cntr_df

#Define function for checking p-values per population

def create_test_result_dataset(data_drift_dataset_tests):
    d = []

    for tests in data_drift_dataset_tests.as_dict()['tests']:
        d2 = []
        d2.append(tests['parameters']['features']['test_group']['stattest'])
        d2.append(tests['parameters']['features']['test_group']['score'])

        #added the test name and drift score(p-value or distance)
        d.append(d2)

    df = pd.DataFrame(d, columns = ['test','p-value'])

    return df
#Poisson distrubution
fig = go.Figure()
fig.add_trace(go.Histogram(x=data_poisson, nbinsx=40, name='data_poisson'))
fig.add_trace(go.Histogram(x=data_poisson2, nbinsx=40, name='data_poisson2'))

fig.show()
#Poisson distrubution
df_n = pd.DataFrame()

for n in range(100,1100,100):
    
    data_drift_dataset_tests.run(reference_data = smp_df4[0:n], current_data = cntr_df4[0:n])
    df = create_test_result_dataset(data_drift_dataset_tests)
    df['data_length'] = n
    df_n = pd.concat([df_n, df])
#Poisson distrubution
fig = px.line(
    df_n.reset_index(), 
    x="data_length", 
    y="p-value", 
    color="test")

fig.show()
#Binomal distrubution
fig = go.Figure()
fig.add_trace(go.Histogram(x=data_binom, nbinsx=40, name='data_binom'))
fig.add_trace(go.Histogram(x=data_binom2, nbinsx=40, name='data_binom2'))

fig.show()
#Binomal distrubution
df_n=pd.DataFrame()

for n in range(100,1100,100):
    
    data_drift_dataset_tests.run(reference_data=smp_df3[0:n], current_data=cntr_df3[0:n])
    df = create_test_result_dataset(data_drift_dataset_tests)
    df['data_length'] = n
    df_n=pd.concat([df_n, df])
#Binomal distrubution
fig = px.line(
    df_n.reset_index(), 
    x="data_length", 
    y="p-value", 
    color="test")

fig.show()
#Normal distrubution
fig = go.Figure()
fig.add_trace(go.Histogram(x=normal, nbinsx=40, name='normal'))
fig.add_trace(go.Histogram(x=normal2, nbinsx=40, name='normal2'))

fig.show()
#Normal distrubution
df_n=pd.DataFrame()

for n in range(100,1100,100):
    
    data_drift_dataset_tests.run(reference_data=smp_df2[0:n], current_data=cntr_df2[0:n])
    df = create_test_result_dataset(data_drift_dataset_tests)
    df['data_length'] = n
    df_n=pd.concat([df_n, df])
#Normal distrubution
fig = px.line(
    df_n.reset_index(), 
    x="data_length", 
    y="p-value", 
    color="test")

fig.show()
#Your distrubution
a, c = 3, -1.02
mean, var, skew, kurt = stats.gengamma.stats(a, c, moments='mvsk')
your_r = stats.gengamma.rvs(a, c, size=2000)

a, c = 2.5, -1.02
mean, var, skew, kurt = stats.gengamma.stats(a, c, moments='mvsk')
your_r2 = stats.gengamma.rvs(a, c, size=2000)

print(mean, var, skew, kurt)

smp_df,cntr_df = give_me_smp_cntr_df(your_r,your_r2)

#Your distrubution
fig = go.Figure()
fig.add_trace(go.Histogram(x=your_r, nbinsx=40, name='your_r'))
fig.add_trace(go.Histogram(x=your_r2, nbinsx=40, name='your_r2'))

fig.show()
#gen gamma
df_n=pd.DataFrame()

for n in range(100,2100,100):
    
    data_drift_dataset_tests.run(reference_data=smp_df[0:n], current_data=cntr_df[0:n])
    df = create_test_result_dataset(data_drift_dataset_tests)
    df['data_length'] = n
    df_n=pd.concat([df_n, df])
#Your distrubution
fig = px.line(
    df_n.reset_index(), 
    x="data_length", 
    y="p-value", 
    color="test")

fig.show()

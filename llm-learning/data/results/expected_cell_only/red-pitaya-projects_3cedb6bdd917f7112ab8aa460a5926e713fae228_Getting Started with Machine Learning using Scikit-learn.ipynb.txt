import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
%matplotlib inline
wine.info()
#Preprocess data
bins = (2, 6.5, 8)
group_names = ['bad','good']
wine['quality'] = pd.cut(wine['quality'],bins = bins, labels = group_names)
wine['quality'].unique()
label_quality = LabelEncoder()
wine['quality'] = label_quality.fit_transform(wine['quality'])
wine.head(10)
wine['quality'].value_counts()
sns.countplot(wine['quality'])
#Seperate the dataset as response variable and feature variables
X = wine.drop('quality', axis = 1)
y = wine['quality']
#Train and test the splitting of data
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)
#Applying standard scalling to get an optimum result
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
X_train[:10]
rfc = RandomForestClassifier(n_estimators=200)
rfc.fit(X_train,y_train)
pred_rfc=rfc.predict(X_test)
#Testing the model
print(classification_report(y_test,pred_rfc))
print(confusion_matrix(y_test,pred_rfc))
clf=svm.SVC()
clf.fit(X_train,y_train)
pred_clf=clf.predict(X_test)
#Testing the model
print(classification_report(y_test,pred_clf))
print(confusion_matrix(y_test,pred_clf))
#mlpc=MLPClassifier(hidden_layer_sizes=(11,11,11),max_iter=500)
mlpc=MLPClassifier(hidden_layer_sizes=(20,20,20),max_iter=50000)
mlpc.fit(X_train,y_train)
pred_mlpc=mlpc.predict(X_test)
#Testing the model
print(classification_report(y_test,pred_mlpc))
print(confusion_matrix(y_test,pred_mlpc))
cm = accuracy_score(y_test, pred_rfc)
cm
wine.head(10)
#Test the Random Forest Classifier (the best) on a new wine
Xnew = [[7.3,0.58,0.00,2.0,0.065,15.0,21.0,0.9946,3.36,0.47,10.0]]
Xnew = sc.transform(Xnew)
ynew = rfc.predict(Xnew)
ynew

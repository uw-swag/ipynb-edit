import pandas as pd
import numpy as np

from datetime import datetime
from datetime import time
from datetime import timedelta

import requests
from io import BytesIO

from sklearn import datasets, ensemble, model_selection
from evidently.ui.workspace.cloud import CloudWorkspace

from evidently import ColumnMapping
from evidently.report import Report
from evidently.test_suite import TestSuite

from evidently.metrics import ColumnSummaryMetric, ColumnDistributionMetric, ColumnDriftMetric, DataDriftTable, TextDescriptorsDistribution, ColumnCategoryMetric
from evidently.tests import TestColumnValueMin, TestColumnValueMean, TestCategoryShare, TestShareOfOutRangeValues

from evidently.metric_preset import DataDriftPreset, DataQualityPreset, TextOverviewPreset, TextEvals

from evidently.descriptors import HuggingFaceModel, HuggingFaceToxicityModel, OpenAIPrompting 
from evidently.descriptors import RegExp, BeginsWith, EndsWith, Contains, DoesNotContain, IncludesWords, ExcludesWords
from evidently.descriptors import TextLength, OOV, NonLetterCharacterPercentage, SentenceCount, WordCount, Sentiment
response = requests.get("https://raw.githubusercontent.com/evidentlyai/evidently/main/examples/how_to_questions/chat_df.csv")
csv_content = BytesIO(response.content)
assistant_logs = pd.read_csv(csv_content, index_col=0, parse_dates=['start_time', 'end_time'])
assistant_logs.index = assistant_logs.start_time
assistant_logs.index.rename('index', inplace=True)
pd.set_option('display.max_colwidth', None)
ws = CloudWorkspace(
    	token="YOUR_TOKEN_HERE",
    	url="https://app.evidently.cloud/"
)
project = ws.create_project("Project title", team_id="YOUR_TEAM_ID_HERE")
project.description = "Project description"
def create_test_suite(i: int):
    test_suite = TestSuite(
        tests=[
            TestColumnValueMin(column_name=TextLength().on("response"), gt=100),
            TestShareOfOutRangeValues(column_name=TextLength().on("question"), left=30, right=100, lt=0.1),
            TestColumnValueMin(column_name=Sentiment().on("response"), gt=0),
            TestColumnValueMean(column_name=OOV().on("response"), lt=15),
            TestCategoryShare(column_name = "feedback", category="downvote", lt=0.1),
            TestCategoryShare(column_name = IncludesWords(words_list=['salary']).on("response"), category=False, lt=0.1), 
        ],
        timestamp=datetime.now() + timedelta(days=i),
    )
    test_suite.run(reference_data=None, current_data=assistant_logs.iloc[20 * i : 20 * (i + 1), :], column_mapping=column_mapping)
    return test_suite
def create_report(i: int):
    report = Report(metrics=[
        TextEvals(column_name="question", descriptors=[
            Sentiment(display_name="Question sentiment"),
            TextLength(display_name= "Question length"),
            OOV(display_name= "Question out of vocabulary words"),
        ]),
        TextEvals(column_name="response", descriptors=[
            Sentiment(display_name="Response sentiment"),
            NonLetterCharacterPercentage(display_name="Non letter characters in response"),
            SentenceCount(display_name="Sentence count in response"),
            WordCount(display_name="Word count in response"),
        ]),
        ColumnCategoryMetric(column_name=IncludesWords(words_list=['salary']).for_column("response"), category=True),
    ],
        timestamp=datetime.now() + timedelta(days=i),
                   )
    
    report.run(reference_data=None, current_data=assistant_logs.iloc[20 * i : 20 * (i + 1), :], column_mapping=column_mapping)
    return report    
project.dashboard.add_panel(
    DashboardPanelTestSuite(
        title="Test results",
        filter=ReportFilter(metadata_values={}, tag_values=[], include_test_suites=True),
        size=WidgetSize.FULL,
    )
)
project.save()

save_path = "../results_for_export"
trained_model_folder = '../MNIST_results/'
fnames = sorted([oj(trained_model_folder, fname) for fname in os.listdir(trained_model_folder) if 'block' not in fname]) 
# other models were trained badly

results_list = [pd.Series(pkl.load(open(fname, "rb"))) for fname in (fnames)] 
results = pd.concat(results_list, axis=1).T.infer_objects() 
results['final_acc'] = [max(x) for x in results['accs_test']] 
results = results[results.method != 'CD_Omvendt' ]
len(results)
results['final_acc'] = [x[-1] for x in results['accs_test']] 
results['final_acc_train'] = [max(x) for x in results['accs_train']]


results['final_cd'] = [x[-1] for x in results['cd']]
results['final_test_loss'] = [x[-1] for x in results['losses_test']]


results['final_train_loss'] = [min(x) for x in results['losses_train']]
results['acc_color'] = [0 for x in results['accs_train']]
if not 'method' in list(results.columns):
    results['method'] = ['CD' for x in results['accs_train']]
if not 'method' in list(results.columns):
    results['method'] = ['CD' for x in results['accs_train']]
results = results.dropna()

results.reset_index(drop=True, inplace=True)
results_save = results[['regularizer_rate','final_acc','final_acc_train','final_test_loss', 'acc_color','final_cd', 'method']].sort_values(by = ['regularizer_rate'])
results_save
concise_results = results_save.groupby(by = ['method','regularizer_rate']).mean()
concise_results.columns = ['Test accuracy', 'Train accuracy', 'Test loss', 'Color accuracy', 'CD']
# with open(oj(save_path, "color_mnist.text"), 'w') as f:
#           f.write(concise_results.to_latex())
concise_results_for_save = concise_results[['Test accuracy']]#, 'Color accuracy']]
len(results)
sns.set()
fig, ax = plt.subplots(figsize = (8,5))
ax.plot(results_save[results_save.method == 'CD'].groupby(by = ['regularizer_rate']).mean()[ 'final_acc'], label = 'CD')
ax.plot(results_save[results_save.method == 'Grad'].groupby(by = ['regularizer_rate']).mean()[ 'final_acc'], label = 'Grad')
plt.xscale('log')
ax.set_ylabel("Accuracy");
ax.set_xlabel("Regularizer rate");
ax.set_ylim(0,100)
fig.legend(loc='center')
fig.suptitle("Accuracy on decoy MNIST")
save_path = "../results_for_export"
fig.savefig(oj(save_path, "decoyMNIST_grayscale"))

kwargs = {'num_workers': 1, 'pin_memory': True}
test_x_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "test_x.npy")))
test_y_color= torch.Tensor(np.load(oj("../data/ColorMNIST", "test_y.npy"))).type(torch.int64)
test_dataset_color = utils.TensorDataset(test_x_tensor,test_y_color) # create your datset

test_loader_color = utils.DataLoader(test_dataset_color,
        batch_size=1, shuffle=True, **kwargs) # create your dataloader

test_net = Net()
test_net = test_net.to(0)
import foolbox
import torch
import torchvision.models as models
import numpy as np
def test_fool( model, device, test_loader, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for i, (data, target) in enumerate(test_loader):
            if i >=10:
                break
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item() # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True) # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    return(test_loss, 100.*correct / len(test_loader.dataset))

with torch.no_grad():
    for i, (data, target) in enumerate(test_loader_color):
        if i >=10:
            break
        data, target = data.to(0), target.to(0)
fmodel = foolbox.models.PyTorchModel(
    test_net, bounds=(-1, 1), num_classes=10, preprocessing=(0, 1))
test_net()
attack = foolbox.attacks.FGSM(fmodel)
adversarial = attack(data[0].cpu().numpy(), target.item())
acc_color_list = []
loss_color_list = []
for i in range(len(results[:4])):
    test_net.load_state_dict(results.model_weights[i])
    loss_col, acc_col = test(test_net, 0, test_loader_color, 0)
    acc_color_list.append(acc_col)
    loss_color_list.append(loss_col)
results["fool"] =[x for x in acc_color_list]
# results["loss_color"] =[x for x in loss_color_list]               
               

import torchvision.datasets as datasets
val_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=None)

trainset = datasets.MNIST('../data', train=True, download=True,
                       transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))
                       ]))

prob_set = datasets.MNIST('../data', train=True, download=True,
                       transform=transforms.Compose([
                           transforms.ToTensor(),
                       ]))
prob = np.zeros((28,28))
for i in range(500):
    prob +=prob_set[i][0][0].numpy()
prob/=prob.sum()
plt.imshow(prob)
trainset[0][0].shape
train-images-idx3-ubyte

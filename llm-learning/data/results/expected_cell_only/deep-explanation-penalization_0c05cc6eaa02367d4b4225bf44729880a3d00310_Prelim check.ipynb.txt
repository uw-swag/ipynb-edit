import torch
import torchvision
import torchvision.datasets as datasets
import sys
import matplotlib.pyplot as plt
import numpy as np
import torch.utils.data as utils
from sklearn.metrics import auc,average_precision_score, roc_curve,roc_auc_score,precision_recall_curve

import csv
import numpy as np
from skimage.transform import probabilistic_hough_line
from skimage.feature import canny
from shutil import copyfile
from os.path import join as oj
from PIL import Image
from tqdm import tqdm
from skimage.color import rgb2gray

    
data_root  = "../../../../datasets/ISIC/raw_data"
data_transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])
    ])
img_dataset = datasets.ImageFolder(data_root,transform=data_transform)
num_total = len(img_dataset)
num_train = int(0.8 * num_total)
num_val = int(0.1 * num_total)
num_test = num_total - num_train - num_val
torch.manual_seed(0);
train_dataset, test_dataset, val_dataset= torch.utils.data.random_split(img_dataset, [num_train, num_test, num_val])
img_list = img_dataset.imgs
file_names = [x[0] for x in img_list]
start_patch_ind = file_names.index('../../../../datasets/ISIC/raw_data/not_cancer/ISIC_0000557.jpg')
end_patch_ind = file_names.index('../../../../datasets/ISIC/raw_data/not_cancer/ISIC_0009867.jpg')
patch_indice = np.arange(start_patch_ind,end_patch_ind+1)
start_ruler_ind = file_names.index('../../../../datasets/ISIC/raw_data/cancer/ISIC_0012099.jpg')
end_ruler_ind = file_names.index('../../../../datasets/ISIC/raw_data/cancer/ISIC_0014559.jpg')
ruler_indice = np.arange(start_ruler_ind,end_ruler_ind+1)
filter_idx = np.concatenate((patch_indice, ruler_indice))
val_filtered_only_bad = Subset(img_dataset, list(filter(lambda x: x in filter_idx, val_dataset.indices)) )
val_filtered_all = Subset(img_dataset, list(filter(lambda x: x not in filter_idx, val_dataset.indices)) )
val_filtered_ruler = Subset(img_dataset, list(filter(lambda x: x not in ruler_indice, val_dataset.indices)) )
val_filtered_patches = Subset(img_dataset, list(filter(lambda x: x not in patch_indice, val_dataset.indices)) )
with open("nopatch_traing.pkl", 'wb') as f:
    pkl.dump(sens_spec_dic['Filtered (Patches)'], f)
sens_spec_dic.keys()

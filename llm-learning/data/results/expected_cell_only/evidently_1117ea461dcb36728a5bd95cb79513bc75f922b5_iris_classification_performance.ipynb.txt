import pandas as pd

from sklearn import datasets, model_selection, neighbors

from evidently.dashboard import Dashboard
from evidently.tabs import ClassificationPerformanceTab

from evidently.model_profile import Profile
from evidently.profile_sections import ClassificationPerformanceProfileSection
iris = datasets.load_iris()
iris_frame = pd.DataFrame(iris.data, columns = iris.feature_names)
reference, production, y_train, y_test = model_selection.train_test_split(iris_frame, 
                                                                          iris.target, 
                                                                          random_state=0)
model = neighbors.KNeighborsClassifier(n_neighbors=1)
model.fit(reference, y_train)
train_predictions = model.predict(reference)
test_predictions = model.predict(production)
reference['target'] = y_train
reference['prediction'] = train_predictions

production['target'] = y_test
production['prediction'] = test_predictions
reference.target = reference.target.apply(lambda x: iris.target_names[x])
reference.prediction = reference.prediction.apply(lambda x: iris.target_names[x])

production.target = production.target.apply(lambda x: iris.target_names[x])
production.prediction = production.prediction.apply(lambda x: iris.target_names[x])
iris_column_mapping = {}

iris_column_mapping['target'] = 'target'
iris_column_mapping['prediction'] = 'prediction'
iris_column_mapping['numerical_features'] = iris.feature_names
iris_model_performance_dashboard = Dashboard(tabs=[ClassificationPerformanceTab])
iris_model_performance_dashboard.calculate(reference, production, column_mapping = iris_column_mapping)
iris_model_performance_dashboard.show()
#iris_model_performance_dashboard.save('iris_classification_performance.html')
iris_classification_performance_profile = Profile(sections=[ClassificationPerformanceProfileSection])
iris_classification_performance_profile.calculate(reference, production, column_mapping = iris_column_mapping)
iris_classification_performance_profile.json() 


%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(12345)
# help(np.set_printoptions)
my_arr = np.arange(1000000)
my_list = list(range(1000000))
my_arr
%time for _ in range(10): my_arr2 = my_arr * 2
%time for _ in range(10): my_list2 = [x * 2 for x in my_list]
# Generate some random data
data = np.random.randn(2, 3)

print(data * 10)
data + data
print(data.shape)
data.dtype
data1 = [6, 7.5, 8, 0, 1]
arr1 = np.array(data1)
arr1
data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)
arr2


list1 = [1,2,'a']
npArray = np.array(list1)
npArray


print(arr2.ndim)
arr2.shape
print(arr1.dtype)
print(arr2.dtype)
print(np.zeros(10))
np.zeros((3, 6))
np.empty((2, 3, 2))
print(np.arange(15))
arr = np.array([[1., 2., 3.], [4., 5., 6.]])
arr
arr * arr
arr - arr
1 / arr
arr ** 0.5
print(arr)
arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])
arr2
arr2 > arr
arr = np.arange(10)
arr
arr[5]
arr[5:8]
arr[5:8] = 12
arr
arr_slice = arr[5:8]
arr_slice
arr_slice[1] = 12345
arr
arr_slice[:] = 64
arr
arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
arr2d[2]
arr2d[0][2]
arr2d[0, 2]
arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
arr3d
arr3d[0]
old_values = arr3d[0].copy()
arr3d[0] = 42
arr3d
arr3d[0] = old_values
arr3d
arr3d[1, 0]
x = arr3d[1]
x
x[0]
arr
arr[1:6]
print(arr2d)
arr2d[:2]
arr2d[:2, 1:]
arr2d[1, :2]
arr2d[:2, 2]
arr2d[:, :1]
arr2d[:2, 1:] = 0
arr2d
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np.random.randn(7, 4)
names
data
names == 'Bob'
data[names == 'Bob']
print(names != 'Bob')
data[~(names == 'Bob')]
cond = names == 'Bob'
data[~cond]
data[data < 0] = 0
data
arr = np.arange(15).reshape((3, 5))
print(arr)
arr.T
arr = np.random.randn(6, 3)
arr
np.dot(arr, arr)
arr = np.arange(16).reshape((2, 2, 4))
arr
arr.transpose((1, 0, 2))
arr.swapaxes(1, 2)
xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])
yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])
cond = np.array([True, False, True, True, False])
result = [(x if c else y)
          for x, y, c in zip(xarr, yarr, cond)]
result
result = np.where(cond, xarr, yarr)
result
arr = np.random.randn(5, 4)
print(arr)
# arr.mean()
# np.mean(arr)
# arr.sum()
print(arr.sum(axis=1))
print(arr.sum(axis=0))
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7])
arr.cumsum()
arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
arr
arr.cumsum(axis=0)
arr.cumprod(axis=1)
arr = np.random.randn(100)
(arr > 0).sum() # Number of positive values
bools = np.array([False, False, False, False])
print(bools.any())
print("\n")
print(bools.all())
arr = np.random.randn(6)
print(arr)
arr.sort()
print(arr)
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print(np.unique(names))
ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])
np.unique(ints)
sorted(set(names))

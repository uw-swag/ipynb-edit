# ! pip install evidently
# ! pip install tracely
# !pip install openai
import pandas as pd
import numpy as np
import requests
from datetime import datetime, timedelta
from io import BytesIO
import openai
from tracely import init_tracing
from tracely import trace_event
openai_api_key = "YOUR_OPEN_AI_API_KEY" # os.environ["OPENAI_API_KEY"] = "YOUR_KEY"
my_token = "YOUR_EVIDENTLY_TOKEN"
address="https://app.evidently.cloud/"
team_id="YOUR_TEAM_ID"
dataset_name="YOUR_TRACING_DATASET_NAME"
init_tracing(
    address=address,
    api_key=my_token,
    team_id=team_id,
    export_name=dataset_name
    )
client = openai.OpenAI(api_key=openai_api_key)
question_list = [
    "What are the main differences between climate change and global warming?",
    "What are the key principles of quantum mechanics?",
    "Can you explain the theory of relativity in simple terms?",
    "How do vaccines work?",
    "What is blockchain technology and how does it work?",
    "What are the potential benefits and risks of artificial intelligence?",
    "What are the distinguishing features of Baroque art?",
    "What are some effective ways to manage stress?",
    "What is the difference between stocks and bonds?",
    "Can you explain the concept of cryptocurrency and how it works?",

]
question_prompt = """
Please answer the following question nicely with a clear structure of response and some conclusions at the end.

Here is a question: {{text_input}}
"""
@trace_event()
def pseudo_assistant(prompt, question):
  model = "gpt-4o-mini"
  system_prompt = "You are a nice and helpful assistant "
  user_prompt = prompt.replace("{{text_input}}", question)

  choices = client.chat.completions.create(
    model=model,
    messages=[
      {"role": "system", "content": system_prompt},
      {"role": "user", "content": user_prompt},
    ]
  )

  response = choices.choices[0].message.content

  return response
for question in question_list:
   pseudo_assistant(prompt=question_prompt, question=question)
from evidently.ui.workspace.cloud import CloudWorkspace

from evidently.report import Report

from evidently import metrics
from evidently.metric_preset import DataQualityPreset
ws = CloudWorkspace(token=my_token, url=address)
dataset_id = "YOUR_DATASET_ID"
traced_data = ws.load_dataset(dataset_id = dataset_id)
traced_data.head()

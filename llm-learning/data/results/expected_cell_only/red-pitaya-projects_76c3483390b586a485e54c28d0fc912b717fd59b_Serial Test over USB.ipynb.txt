import serial
import time
import csv
import re
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
import numpy as np
from datetime import datetime, date
from IPython.display import clear_output
import ipywidgets as widgets
 
portPath = "/dev/ttyACM0"       # Must match value shown on Arduino IDE
baud = 115200                   # Must match Arduino baud rate
timeout = 5                     # Seconds
filename = str(date.today()) + " data.csv"
max_num_readings = 8
num_signals = 1
 
 
 
def create_serial_obj(portPath, baud_rate, tout):
    """
    Given the port path, baud rate, and timeout value, creates and returns a pyserial object.
    """
    return serial.Serial(portPath, baud_rate, timeout = tout)
headers = ["PM 0.3","PM 0.5","PM 1.0","PM 2.5","PM 5.0","PM 10.0","Temp","Pressure","Humidity","CO2",
           "BME680 VOC","QM9 VOC","MiCS5524 VOC","CCS811 VOC","Date"]
try:
    df = pd.read_csv(filename,names=headers,skiprows = 1)
    df
except:
    df = pd.DataFrame() #Create an empty data frame to append to later
df
def is_number(string):
    """
    Given a string returns True if the string represents a number.
    Returns False otherwise.
    """
    try:
        float(string)
        return True
    except ValueError:
        return False
        
def clean_serial_data(data):
    """
    Given a list of serial lines (data). Removes all characters.
    Returns the cleaned list of lists of digits.
    Given something like: ['0.5000,33\r\n', '1.0000,283\r\n']
    Returns: [[0.5,33.0], [1.0,283.0]]
    """
    clean_data = []
    
    for line in data:
        line_data = line.decode("utf-8", "ignore").strip()
        #line_data = re.findall("\d*\.\d*|\d*",line) # Find all digits
        #line_data = [float(element) for element in line_data if is_number(element)] # Convert strings to float
        #line_data = line_data datetime.now()
    clean_data.append(line_data)
        
    return clean_data
print("Cleaning data...")
clean_data =  clean_serial_data(serial_data)
clean_data_table = [clean_data]
clean_data_table
clean_data_table = pd.DataFrame([sub.split(",") for sub in clean_data])
clean_data_table['Date'] = [datetime.now()]
clean_data_table.columns = headers
clean_data_table
df = df.append(clean_data_table)
df
df = pd.read_csv(filename,names=headers,skiprows = 1)
df
dateparse = lambda x: pd.datetime.strptime(x, '%Y-%m-%d %H:%M:%S.%f')
df = pd.read_csv(filename, parse_dates=['Date'], date_parser=dateparse,index_col=0)
df
x = df['Date']
y1 = df['PM 0.3']
y2 = df['PM 0.5']
y3 = df['PM 1.0']
y4 = df['PM 2.5']
y5 = df['PM 5.0']
y6 = df['PM 10.0']

# plot
plt.cla()
plt.plot(x,y1, label='PM 0.3')
plt.plot(x,y2, label='PM 0.3')

plt.legend()
# beautify the x-labels
plt.gcf().autofmt_xdate()
plt.show()
plt.ioff()
keep_running = widgets.Checkbox()
keep_running = True
keep_running.description='Keep Running?'

def update_widget_value(keep_running):
    """
    Updates the running widget to stop the loop
    """
    print(keep_running)
    return keep_running

widgets.interactive(update_widget_value,keep_running=keep_running)
time.sleep(1)

while keep_running == True:
    serial_data = read_serial_data(serial_obj)
    print("Reading Data")
    clean_data =  clean_serial_data(serial_data)
    clean_data_table = pd.DataFrame([sub.split(",") for sub in clean_data],
                                    columns=["PM 0.3","PM 0.5","PM 1.0","PM 2.5","PM 5.0","PM 10.0",
                                             "Temp","Pressure","Humidity","BME680 VOC","QM9 VOC",
                                             "MiCS5524 VOC","CO2","CCS811 VOC"])
    clean_data_table['Date'] = [datetime.now()]
    df = df.append(clean_data_table)
    time.sleep(1)
df
df.to_csv(filename,names=headers)
df
import asyncio
import functools
 
def event_handler(loop, stop=False):
    print('Event handler called')
    if stop:
        print('stopping the loop')
        loop.stop()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.call_soon(functools.partial(event_handler, loop))
        print('starting event loop')
        loop.call_soon(functools.partial(event_handler, loop, stop=True))
 
        loop.run_forever()
    finally:
        print('closing event loop')
        loop.close()
loop.call_soon(functools.partial(event_handler, loop))

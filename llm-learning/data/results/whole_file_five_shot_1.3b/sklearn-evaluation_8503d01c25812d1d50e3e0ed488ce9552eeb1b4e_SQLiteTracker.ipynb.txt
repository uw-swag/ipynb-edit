
    '''
    [
    Commit Message: "adds note on sqlitetracker tutorial"
    Original Code Cells:
    '''
    <Cell_0>
from pathlib import Path

import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, RocCurveDisplay
<\Cell_0>
<Cell_1>
# delete our example database, if any
db = Path('my_experiments.db')

if db.exists():
    db.unlink()
<\Cell_1>
<Cell_2>
from sklearn_evaluation import SQLiteTracker

tracker = SQLiteTracker('my_experiments.db')
<\Cell_2>
<Cell_3>
X, y = datasets.make_classification(200, 10, n_informative=5, class_sep=0.65)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

models = [RandomForestClassifier(), LogisticRegression(), DecisionTreeClassifier()]
<\Cell_3>
<Cell_4>
for m in models:
    model = type(m).__name__
    print(f'Fitting {model}')


    experiment = tracker.new_experiment()
    m.fit(X_train, y_train)
    y_pred = m.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    experiment.log_dict({'accuracy': acc, 'model': type(m).__name__, **m.get_params()})
    
    # log plots     
    experiment.log_figure('roc', roc.figure_)
    
    # log individual values


    ### Instruction:
    [
    Commit Message: "Use np.random.set_seed(42) and tf.set_random_seed(42) to make notebook's output constant, and simplify code in notebook 15"
    Original Code Cells:
    '''
    <Cell_0>
# To support both python 2 and python 3
from __future__ import division, print_function, unicode_literals

# Common imports
import numpy as np
import numpy.random as rnd
import os

# to make this notebook's output stable across runs
rnd.seed(42)

# To plot pretty figures
%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
plt.rcParams['axes.labelsize'] = 14
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

# Where to save the figures
PROJECT_ROOT_DIR = "."
CHAPTER_ID = "distributed"

def save_fig(fig_id, tight_layout=True):
    path = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id + ".png")
    print("Saving figure", fig_id)
    if tight_layout:
        plt.tight_layout()
    plt.savefig(path, format='png', dpi=300)
<\Cell_0>
<Cell_1>
import tensorflow as tf
<\Cell_1>
<Cell_2>
c = tf.constant("Hello distributed TensorFlow!")
server = tf.train.Server.create_local_server()
<\Cell_2>
<Cell_3>
with tf.Session(server.target) as sess:
    print(sess.run(c))
<\Cell_3>
<Cell_4>
cluster_spec = tf.train.ClusterSpec({
    "ps": [
        "127.0.0.1:2221",  #
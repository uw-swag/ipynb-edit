```python
    import numpy as np
    import tensorflow as tf
    from tensorflow import keras

    # data
    xs = np.array([-1, 0, 1, 2, 3, 4], dtype=float)
    ys = np.array([-3, -1, 1, 3, 5, 7], dtype=float)

    # model
    model = keras.Sequential([
        keras.layers.Dense(units=1, input_shape=[1]),
    ])

    # compile
    model.compile(optimizer='sgd', loss='mean_squared_error')

    # fit
    model.fit(xs, ys, epochs=500)

    # predict
    print(model.predict([10.0]))
    ```
    The code above is a simple example of a TensorFlow model for a single-variable linear regression. It uses the SGD optimizer and the mean squared error loss function. The model is trained on the data points `(xs, ys)` and then it makes a prediction for `10.0`.

    Please note that this is a very basic example and real-world machine learning projects often involve more complex models, more data, and more complex data preprocessing.

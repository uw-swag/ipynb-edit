```python
    import numpy as np
    import pandas as pd
    import configparser
    import tensorflow as tf
    from sklearn import model_selection, utils

    def AverageChannelFeatures(df, readEdf, sample_rate, step, pca_tolerance, smote_neighbors, csvExportFile):
        if readEdf:
            ndf = averageChannels(df)
            features = pd.DataFrame(featureExtractionAverage (ndf, sample_rate, step))
            del ndf
            features = featureNormalization(features)
            reduced_features = dimentionalityReduction(features, pca_tolerance)
            del features
            smote_features = utils.shuffle(oversamplingSMOTE(reduced_features.drop('seizure', axis = 1), reduced_features['seizure'], smote_neighbors))
            smote_features.reset_index(drop = True, inplace = True)
            del reduced_features
            exportDataframeToCSV(smote_features, csvExportFile)
        else :
            smote_features = df
        return smote_features

    def AverageChannelTrainTestData (smote_features, test_ratio, k_fold, perfInd):
        train_dat, test_dat, train_ind, test_ind = createTrainingAndTestDatasets(smote_features, test_ratio)
        results = pd.DataFrame(columns = perfInd)
        kf = model_selection.KFold(n_splits = k_fold, shuffle=True)
        return train_dat, test_dat, train_ind, test_ind, results, kf

    def AverageChannelExperiment(df, channels, readEdf, csvImportFile, csvExportFile, dataset, sample_rate, time_window, test_ratio, pca_tolerance, smote_neighbors, k_fold, knn_neighbors, rf_estimators, max_iter, dropout, loss_function, epochs, lstm_units, dense1_units, dense2_
```python
    import pandas as pd
    import numpy as np

    from sklearn.ensemble import RandomForestRegressor

    from evidently.dashboard import Dashboard
    from evidently.tabs import RegressionPerformanceTab

    from evidently.model_profile import Profile
    from evidently.profile_sections import RegressionPerformanceProfileSection

    # Load the data
    raw_data = pd.read_csv('Bike-Sharing-Dataset/day.csv', header = 0, sep = ',', parse_dates=['dteday'])

    # Split the data into training and testing sets
    ref_data = raw_data[:120]
    prod_data = raw_data[120:150]

    # Define the target and datetime columns
    target = 'cnt'
    datetime = 'dteday'

    numerical_features = ['mnth', 'temp', 'atemp', 'hum', 'windspeed']
    categorical_features = ['season', 'holiday', 'weekday', 'workingday', 'weathersit',]

    features = numerical_features + categorical_features

    # Train a Random Forest model
    model = RandomForestRegressor(random_state = 0)
    model.fit(ref_data[features], ref_data[target])

    # Make predictions
    ref_data['prediction']  = model.predict(ref_data[features])
    prod_data['prediction'] = model.predict(prod_data[features])

    # Define the column mapping
    column_mapping = {}

    column_mapping['target'] = target
    column_mapping['prediction'] = 'prediction'
    column_mapping['datetime'] = datetime

    column_mapping['numerical_features'] = numerical_features
    column_mapping['categorical_features'] = categorical_features

    # Create a dashboard
    dashboard = Dashboard(tabs=[RegressionPerformanceTab])
    dashboard .calculate(ref_data, prod_data, column_mapping=column_mapping)
    dashboard.show()

    # Create a profile
    bike_regression
```python
    <Cell_0>
    import matplotlib.pyplot as plt
    import seaborn as sns
    from sklearn.metrics import mean_squared_error
    from sklearn.metrics import mean_absolute_error
    from sklearn.metrics import r2_score

    class ModelEvaluation:

        def __init__(self):
            pass

        def plot_learning_curves(self, model, X, y):
            train_sizes, train_scores, valid_scores = [], [], []
            for i in range(1, len(X)):
                model.fit(X[:i], y[:i])

                train_scores.append(model.score(X[:i], y[:i]))
                valid_scores.append(model.score(X[i], y[i]))
                train_sizes.append(i)

            plt.plot(train_sizes, train_scores, label='Training score')
            plt.plot(train_sizes, valid_scores, label='Validation score')
            plt.ylabel('Score', fontsize=14)
            plt.xlabel('Training set size', fontsize=14)
            plt.title('Learning Curve', fontsize=18, y=1.03)
            plt.legend()
            plt.ylim(0,1)

        def evaluate_model(self, model, X, y):
            y_pred = model.predict(X)

            mse = mean_squared_error(y, y_pred)
            mae = mean_absolute_error(y, y_pred)
            r2 = r2_score(y, y_pred)

            print(f'Mean Squared Error: {mse}')
            print(f'Mean Absolute Error: {mae}')
            print(f'R^2 Score: {r2}')

            return mse, mae, r2

        def plot_feature_importance(self, model, X):
            importances = model.feature
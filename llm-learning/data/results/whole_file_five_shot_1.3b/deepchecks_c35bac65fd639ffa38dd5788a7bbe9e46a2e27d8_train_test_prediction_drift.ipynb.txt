```python
    import pandas as pd
    from sklearn.metrics import mean_squared_error
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn.metrics import mean_squared_error

    # Load the data
    df = pd.read_csv('your_data.csv')

    # Split the data into features and target
    X = df.drop('target_column', axis=1)
    y = df['target_column']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train a linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate the mean squared error of the predictions
    mse = mean_squared_error(y_test, y_pred)

    # Check for drift
    if mse > threshold:
        print("Drift detected!")
    else:
        print("No drift detected.")
    ```
    In the above code, replace 'your_data.csv' with the path to your data file, and 'target_column' with the name of the column in your data file that you want to predict. The 'threshold' should be a value that you set based on your specific use case. If the mean squared error of the predictions is greater than this threshold, it means that the model has made a prediction that is too far from the actual values, which indicates a potential drift.

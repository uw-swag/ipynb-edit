```python
    # set the environment path to find Recommenders
    import sys

    import pandas as pd
    import scrapbook as sb
    import tensorflow as tf
    tf.get_logger().setLevel('ERROR') # only show error messages

    from recommenders.models.rbm.rbm import RBM
    from recommenders.datasets.python_splitters import numpy_stratified_split
    from recommenders.datasets.sparse import AffinityMatrix

    from recommenders.datasets import movielens
    from recommenders.evaluation.python_evaluation import map_at_k, ndcg_at_k, precision_at_k, recall_at_k

    #For interactive mode only
    %load_ext autoreload
    %autoreload 2
    %matplotlib inline

    print("System version: {}".format(sys.version))
    print("Pandas version: {}".format(pd.__version__))
    print("Tensorflow version: {}".format(tf.__version__))

    # Select MovieLens data size: 100k, 1m, 10m, or 20m
    MOVIELENS_DATA_SIZE = '100k'

    # Load MovieLens data
    data = movielens.load_pandas_df(
        size=MOVIELENS_DATA_SIZE,
        header=['userID','movieID','rating','timestamp']
    )

    data.head()

    #to use standard names across the analysis 
    header = {
            "col_user": "userID",
            "col_item": "movieID",
            "col_rating": "rating",
        }

    #instantiate the sparse matrix generation  
    am = AffinityMatrix(df = data, **header)

    #obtain the sparse matrix 
    X, _, _ = am.gen_affinity_matrix()

    #Split the data into training and testing sets
    Xtr, Xtst = numpy_stratified_split(X)

    print('train matrix
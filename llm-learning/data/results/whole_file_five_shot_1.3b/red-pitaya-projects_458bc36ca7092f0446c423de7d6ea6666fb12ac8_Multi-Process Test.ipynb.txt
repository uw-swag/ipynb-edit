
    '''
    The code you provided is a simple example of using a ProcessPoolExecutor in Python's concurrent.futures module to execute a function (in this case, the do_something function) in parallel across multiple processes.

    The do_something function sleeps for a given number of seconds and then increments a global variable my_data. The time taken to execute the function and the value of my_data are then printed.

    The concurrent.futures.ProcessPoolExecutor() is a class that allows you to create a pool of worker processes to execute the tasks in parallel. The map() function is used to apply the do_something function to each element in the secs list in parallel.

    The time.perf_counter() function is used to measure the time taken to execute the code. The time taken is then rounded to 2 decimal places.

    The final print statement prints the value of my_data after the code has finished executing.

    This is a simple example, but it demonstrates how you can use concurrent.futures to speed up your Python code by executing tasks in parallel.

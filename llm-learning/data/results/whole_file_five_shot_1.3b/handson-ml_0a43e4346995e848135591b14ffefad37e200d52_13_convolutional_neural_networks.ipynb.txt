
    ### Instruction:
    [
    Commit Message: "Implementing a simple neural network"
    Original Code Cells:
    '''
    <Cell_0>
    # To support both python 2 and python 3
    from __future__ import division, print_function, unicode_literals

    # Common imports
    import numpy as np
    import numpy.random as rnd
    import os

    # to make this notebook's output stable across runs
    rnd.seed(42)

    # To plot pretty figures
    %matplotlib inline
    import matplotlib
    import matplotlib.pyplot as plt
    plt.rcParams['axes.labelsize'] = 14
    plt.rcParams['xtick.labelsize'] = 12
    plt.rcParams['ytick.labelsize'] = 12

    # Where to save the figures
    PROJECT_ROOT_DIR = "."
    CHAPTER_ID = "nn"

    def save_fig(fig_id, tight_layout=True):
        path = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id + ".png")
        print("Saving figure", fig_id)
        if tight_layout:
            plt.tight_layout()
        plt.savefig(path, format='png', dpi=300)
    <\Cell_0>
    <Cell_1>
    import tensorflow as tf
    <\Cell_1>
    <Cell_2>
    from sklearn.datasets import load_sample_images
    dataset = load_sample_images()
    china, flower = dataset.images
    image = china[150:220, 130:250]
    height, width, channels = image.shape
    image_grayscale = image.mean(axis=2).astype(np.float32)
    images = image_grayscale.reshape(1, height, width, 1)
    <\Cell_2>
    <Cell_3>
    tf.reset_
```go
    package main

    import (
        "fmt"
        "time"
    )

    func main() {
        for i := 0; i < 10; i++ {
            go worker(i)
        }

        time.Sleep(time.Second)
    }

    func worker(id int) {
        for i := 0; i < 10; i++ {
            fmt.Println(id, "-", i)
            time.Sleep(time.Second)
        }
    }
    ```

    In this example, we have a main function that creates 10 goroutines. Each goroutine is a worker that prints a number of integers. The main function waits for all the goroutines to finish before it exits.

    The `go` keyword is used to start a new goroutine. The `worker` function is a goroutine that prints a number of integers. The `time.Sleep(time.Second)` line is used to pause the main function for one second after each goroutine has started.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.

    The `-` operator is used to print the goroutine ID and the iteration number.


```python
    # Import necessary libraries
    from keras.models import Sequential
    from keras.layers import Dense, Activation

    # Define the model
    model = Sequential()
    model.add(Dense(2, input_dim=2, kernel_initializer='random_uniform'))
    model.add(Dense(2, kernel_initializer='random_uniform'))
    model.add(Activation('relu'))

    # Compile the model
    model.compile(optimizer='rmsprop',
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    ```

    ### Explanation:
    The model is a simple neural network with two hidden layers. The first hidden layer has 2 neurons and uses the 'relu' activation function. The second hidden layer also has 2 neurons and uses the 'relu' activation function. The output layer has 1 neuron and uses the 'sigmoid' activation function, which is commonly used for binary classification problems. The 'rmsprop' optimizer is used for training the model, and the 'binary_crossentropy' loss function is used for classification problems. The 'accuracy' metric is used to measure the performance of the model.

    ### Forward Pass:
    The forward pass of the model is a simple process where the input data is passed through the model in a series of layers. The output of each layer is used as the input to the next layer. The output of the last layer is the prediction of the model.

    ### Backward Pass:
    The backward pass of the model is a process where the error of the model is backpropagated through the model. The error is calculated by comparing the predicted output of the model with the actual output. The error is then used to update the weights of the model. The process is repeated for a number of iterations, which is determined by the 'epochs' parameter.

    ### Training and Testing:
    The model is trained on the training data using the 'fit' function. The model is then tested on the test data using the 'evaluate' function. The performance of the model is measured by the 'accuracy' metric.

    ### Metrics:
    The performance of
```python
    <Cell_0>
    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd
    from keras.models import Sequential
    from keras.layers import Dense, LSTM, Dropout
    from sklearn.preprocessing import MinMaxScaler

    # Load the dataset
    data = pd.read_csv('data.csv')
    data = data.values

    # Normalize the dataset
    scaler = MinMaxScaler(feature_range=(0, 1))
    data = scaler.fit_transform(data)

    # Prepare the training data
    train_data = data[:int(len(data) * 0.8)]
    x_train = train_data[:, 1:-1]
    y_train = train_data[:, -1]

    # Reshape the data
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # Build the LSTM model
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
    model.add(Dropout(0.2))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=1))

    # Compile the model
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train the model
    model.fit(x_train, y_train, epochs=25, batch_size=32)

    # Predict the future values
    real_stock_price = data[:, -1]
    dataset_total = pd.concat((data[:, 0], real_stock_price), axis=0)
    inputs = dataset_total[len(dataset_total) - len(test_data) - 1:].values
    inputs = inputs
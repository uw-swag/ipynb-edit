```python
    from sklearn.metrics import mean_squared_error, r2_score
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LinearRegression
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.neighbors import KNeighborsRegressor
    from sklearn.svm import SVR
    from sklearn.pipeline import make_pipeline
    from sklearn.model_selection import GridSearchCV
    import pandas as pd
    import numpy as np

    class RegressionModel:
        def __init__(self, model):
            self.model = model

        def fit(self, X, y):
            self.model.fit(X, y)

        def predict(self, X):
            return self.model.predict(X)

        def score(self, X, y):
            return self.model.score(X, y)

    class ClassificationModel:
        def __init__(self, model):
            self.model = model

        def fit(self, X, y):
            self.model.fit(X, y)

        def predict(self, X):
            return self.model.predict(X)

        def score(self, X, y):
            return self.model.score(X, y)

    def regression_models(X, y):
        models = [
            ('Linear Regression', LinearRegression()),
            ('Decision Tree Regressor', DecisionTreeRegressor()),
            ('Random Forest Regressor', RandomForestRegressor()),
            ('K-Nearest Neighbors', KNeighborsRegressor()),
            ('Support Vector Regressor', SVR())
        ]
        results = {}
        for name, model in models:
            model = RegressionModel(model)
            model.fit(X, y)
            predictions = model.predict(X)
            mse = mean_squared_error(y, predictions)

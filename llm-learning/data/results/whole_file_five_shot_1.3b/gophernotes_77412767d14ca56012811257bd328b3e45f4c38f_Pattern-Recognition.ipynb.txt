```python
    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn import datasets
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import confusion_matrix
    from sklearn.decomposition import PCA

    # Load the iris dataset
    iris = datasets.load_iris()
    X = iris.data
    y = iris.target

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Standardize the features
    sc = StandardScaler()
    sc.fit(X_train)
    X_train_std = sc.transform(X_train)
    X_test_std = sc.transform(X_test)

    # Train a logistic regression model
    lr = LogisticRegression(solver='lbfgs', multi_class='auto', max_iter=10000)
    lr.fit(X_train_std, y_train)

    # Make predictions
    y_pred = lr.predict(X_test_std)

    # Print the confusion matrix
    print(confusion_matrix(y_test, y_pred))

    # Apply PCA to reduce the dimensionality
    pca = PCA(n_components=2)
    X_train_pca = pca.fit_transform(X_train_std)
    X_test_pca = pca.transform(X_test_std)

    # Train a logistic regression model on the PCA-transformed data
    lr_pca = LogisticRegression(solver='lbfgs', multi_class='auto', max_iter=10000)
    lr_pca.fit(X_train_pca, y_train)

    # Make predictions on the PCA-transformed
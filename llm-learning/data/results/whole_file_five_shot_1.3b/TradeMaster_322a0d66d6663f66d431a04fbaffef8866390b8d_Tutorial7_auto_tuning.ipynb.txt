```
    This tutorial covers the basics of using PyTorch and Optuna for hyperparameter tuning in deep learning. The tutorial starts with importing necessary libraries and defining a function to parse command-line arguments.

    The `test_dqn_builder` function is used to build and configure the training environment, agent, and trainer. It takes the configuration file, task name, and auto tuning parameters as input.

    The `sample_params` function is used to sample hyperparameters for the trial. It uses Optuna's `suggest_float`, `suggest_categorical`, and `suggest_int` functions to sample different types of parameters.

    The `objective` function is the main function that Optuna will use to evaluate the hyperparameters. It calls `test_dqn_builder` to train and validate the model, and returns the validation score.

    The `parse_args` function is used to parse command-line arguments.

    The tutorial then covers the following steps:

    1. Defining the command-line arguments.
    2. Loading the configuration file.
    3. Sampling hyperparameters.
    4. Training the model.
    5. Testing the model.

    The tutorial also includes a section for auto-tuning, where hyperparameters are sampled from a distribution and the model is trained and validated multiple times. The best model is then used for testing.

    This tutorial is a good starting point for anyone interested in using PyTorch and Optuna for hyperparameter tuning in deep learning.
   ```

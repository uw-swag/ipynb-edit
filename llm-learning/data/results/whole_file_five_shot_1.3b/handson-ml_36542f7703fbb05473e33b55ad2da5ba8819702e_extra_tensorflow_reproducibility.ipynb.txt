
    ## Notebook: Achieving Reproducibility with TensorFlow

    TensorFlow is a powerful open-source library developed by Google Brain Team that is used for machine learning and deep learning. It provides a flexible and efficient environment for defining and training complex neural networks.

    However, achieving reproducibility in machine learning is crucial to ensure that the same results are obtained every time the code is run. This is often referred to as "reproducibility".

    TensorFlow provides several ways to achieve reproducibility. One of the most common methods is to use the `tf.set_random_seed()` function. This function sets a seed for the random number generator, which can be used to initialize the random number generator in TensorFlow. This ensures that the same random numbers are generated every time the code is run, which can be useful for debugging and testing.

    Here is an example of how to use `tf.set_random_seed()`:

    ```python
    import tensorflow as tf

    tf.set_random_seed(0)

    a = tf.constant([1, 2, 3], name='a')
    b = tf.constant([4, 5, 6], name='b')

    c = a + b

    sess = tf.Session()
    print(sess.run(c))
    ```

    In this example, the output of the code will be the same every time it is run.

    Another method to achieve reproducibility in TensorFlow is to use the `tf.Graph()` and `tf.Session()` objects. The `tf.Graph()` object is used to define the computational graph, and the `tf.Session()` object is used to execute the graph. By using the `tf.Graph()` and `tf.Session()` objects, you can define the computational graph and run it in a session, which ensures that the same results are obtained every time the code is run.

    Here is an example of how to use `tf.Graph()` and `tf.Session()`:

    ```python
    import tensorflow as tf

    g = tf.Graph()

    with g.as_default():
       
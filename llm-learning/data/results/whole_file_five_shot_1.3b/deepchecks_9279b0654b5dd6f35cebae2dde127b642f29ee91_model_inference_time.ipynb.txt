```python
    <Cell_0>
    from sklearn.datasets import load_iris
    from sklearn.ensemble import AdaBoostClassifier
    from sklearn.model_selection import train_test_split

    from deepchecks import Dataset
    from deepchecks.checks.methodology import ModelInferenceTimeCheck
    <\Cell_0>
    <Cell_1>
    iris = load_iris(as_frame=True)
    train, test = train_test_split(iris.frame, test_size=0.33, random_state=42)

    train_ds = Dataset(train, features=iris.feature_names, label_name='target')
    test_ds = Dataset(test, features=iris.feature_names, label_name='target')

    clf = AdaBoostClassifier().fit(train_ds.features_columns, train_ds.label_col)
    <\Cell_1>
    <Cell_2>
    # NBVAL_SKIP
    check = ModelInferenceTimeCheck()
    check.run(test_ds, clf)
    <\Cell_2>
    <Cell_3>
    # NBVAL_SKIP
    check = ModelInferenceTimeCheck().add_condition_inference_time_is_not_greater_than(0.00001)
    check.run(test_ds, clf)
    <\Cell_3>
    ```

    The examples have been updated to reflect the latest changes in the Deepchecks library. The first example uses the AdaBoostClassifier to train a model on the iris dataset, and then uses the ModelInferenceTimeCheck to evaluate the model's inference time. The second example adds a condition to the check to only include models with inference time not greater than 0.00001. The third example uses the same model and check, but this time with a different condition.

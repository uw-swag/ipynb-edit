```python
    # Import necessary libraries
    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib
    %matplotlib inline

    # Create images with random rectangles and bounding boxes. 
    num_imgs = 50000
    img_size = 8
    min_object_size = 1
    max_object_size = 4
    num_objects = 1

    bboxes = np.zeros((num_imgs, num_objects, 4))
    imgs = np.zeros((num_imgs, img_size, img_size))  # set background to 0

    for i_img in range(num_imgs):
        for i_object in range(num_objects):
            w, h = np.random.randint(min_object_size, max_object_size, size=2)
            x = np.random.randint(0, img_size - w)
            y = np.random.randint(0, img_size - h)
            imgs[i_img, x:x+w, y:y+h] = 1.  # set rectangle to 1
            bboxes[i_img, i_object] = [x, y, w, h]

    imgs.shape, bboxes.shape

    # Reshape and normalize the image data to mean 0 and std 1. 
    X = (imgs.reshape(num_imgs, -1) - np.mean(imgs)) / np.std(imgs)
    X.shape, np.mean(X), np.std(X)

    # Normalize x, y, w, h by img_size, so that all values are between 0 and 1.
    # Important: Do not shift to negative values (e.g. by setting to mean 0), because the IOU calculation needs positive w and h.
    y = bboxes.reshape(num_imgs, -1) / img_size
    y.shape, np.mean(y), np.std(y)

    # Split training and test.
    i
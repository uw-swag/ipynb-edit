
    '''
    ### Instruction:
    [
    Commit Message: "add more features to the trading environment"
    Original Code Cells:
    '''
    <Cell_0>
import random
import datetime
import time
import resource
import pdb

import numpy as np
import pandas as pd

from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Activation, Dropout
from tensorflow.keras.models import Sequential, load_model, model_from_json
from tensorflow.keras.optimizers import Adam

import plotly.graph_objects as go

from IPython.display import clear_output, display, HTML

# set seeds for reproducibility
# np.random.uniform(0,10000) 4465
random.seed(4465)
np.random.seed(4465)
#tf.random.set_seed(4465)

<\Cell_0>
<Cell_1>
def shm_gen(dt=0.001,
            coef=100,     # coef = k/m
            amplitude=1, 
            start_trend=100, 
            trend_per_tick=0.0, 
            noise=0.0, 
            damping=0.0, 
            verbose=1):
    """Generate simple harmonic motion around trend, with noise and damping"""
    
    period = 2 * np.pi * np.sqrt(1/coef)

    if verbose:
        print("%s Amplitude: %.3f" % (time.strftime("%H:%M:%S"), amplitude))
        print("%s Period: %.3f" % (time.strftime("%H:%M:%S"), period))

    stock_price = start_trend + amplitude
    stock_velocity = 0.0
    
    trend_index = start_trend
    t = 0.0

    while True:
        # acceleration based on distance from trend
        acc
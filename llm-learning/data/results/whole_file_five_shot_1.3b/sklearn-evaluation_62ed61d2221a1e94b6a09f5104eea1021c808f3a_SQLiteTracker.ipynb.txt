```
    The SQLiteTracker library is a Python library that allows you to track the performance of machine learning models. It provides a simple and easy-to-use interface for logging metrics and parameters of the models.

    Here's an updated version of your code with SQLiteTracker:

    ```python
    from sklearn_evaluation import SQLiteTracker
    from sklearn import datasets
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.svm import SVC
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score

    tracker = SQLiteTracker('my_experiments.db')

    X, y = datasets.make_classification(200, 10, n_informative=5, class_sep=0.65)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

    models = [RandomForestClassifier(), LogisticRegression(), DecisionTreeClassifier()]

    for m in models:
        model = type(m).__name__
        print(f'Fitting {model}')

        experiment = tracker.new_experiment()
        m.fit(X_train, y_train)
        y_pred = m.predict(X_test)
        acc = accuracy_score(y_test, y_pred)

        experiment.log_dict({'accuracy': acc, 'model': model, **m.get_params()})

    svc = SVC()
    svc.fit(X_train, y_train)
    y_pred = svc.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    experiment = tracker.new_experiment()

    experiment.log('accuracy', acc)
    experiment.log('model', type(svc).__name__)

    _ = experiment.log
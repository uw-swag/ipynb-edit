```python
    <Cell_0>
import pandas as pd
from sklearn.datasets import load_iris
<\Cell_0>
<Cell_1>
iris_df = load_iris(return_X_y=False, as_frame=True)['frame']
train_len = round(0.67*len(iris_df))
df_train = iris_df[:train_len]
df_test = iris_df[train_len:]
<\Cell_1>
<Cell_2>
from deepchecks.suites import integrity_check_suite
<\Cell_2>
<Cell_3>
integrity_check_suite().run(train_dataset=df_train, test_dataset=df_test, check_datasets_policy='both')
<\Cell_3>

# Adding a label_ambiguity to suite
<Cell_4>
# Assuming that the label_ambiguity is a function that takes a dataframe and returns a dataframe with the label_ambiguity
def label_ambiguity(df):
    # Implement your label_ambiguity here
    # For example, we can just add a constant to all labels
    df['label'] = df['label'] + 1
    return df
<\Cell_4>
<Cell_5>
df_train_ambiguity = label_ambiguity(df_train)
df_test_ambiguity = label_ambiguity(df_test)
<\Cell_5>
<Cell_6>
integrity_check_suite().run(train_dataset=df_train_ambiguity, test_dataset=df_test_ambiguity, check_datasets_policy='both')
<\Cell_6>
```


    Here's the updated code:

```python
import numpy as np
import pandas as pd
from scar import load_scar
from scar import C

train, valid, test = load_scar()

train_x, _, train_s = train

x_ = []
y_ = []
sample_weight = []

train_x_l, train_x_u = [], []
for train_x_i, train_s_i in zip(train_x, train_s):
    if train_s_i == 1:
        train_x_l.append(train_x_i)
    else:
        train_x_u.append(train_x_i)

# use labeled data as positive
for train_x_l_i in train_x_l:
    x_.append(train_x_l_i)
    y_.append(1)
    w_p = 1 / C
    sample_weight.append(w_p)

# use labeled data as negative
for train_x_l_i in train_x_l:
    x_.append(train_x_l_i)
    y_.append(0)
    w_n = 1 - (1 / C)
    sample_weight.append(w_n)

# use unlabeled data as negative
for train_x_u_i in train_x_u:
    x_.append(train_x_u_i)
    y_.append(0)
    w_n = 1
    sample_weight.append(w_n)

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0).fit(x_, y_, sample_weight=sample_weight)

test_x, test_y, _ = test

test_y_hat = clf.predict(test_x)
test_y_prob_hat = clf.predict_proba(test_x)[:, 1]

from sklearn.metrics import f1_score

f1_score(test_y, test_y_hat)

from utils import plot_x_y
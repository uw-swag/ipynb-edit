
    ### Instruction:
    [
    Commit Message: "Implementing Q-Learning"
    Original Code Cells:
    '''
    <Cell_0>
import numpy as np
import pandas as pd
import random
import time
import pickle
import os
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import clear_output, display, HTML

# set seeds for reproducibility
np.random.seed(4465)
random.seed(4465)

<\Cell_0>
<Cell_1>
class QLearningAgent:
    def __init__(self, state_size, action_size, learning_rate, discount_factor, exploration_rate, exploration_decay, save_path):
        self.state_size = state_size
        self.action_size = action_size
        self.learning_rate = learning_rate
        self.discount_factor = discount_factor
        self.exploration_rate = exploration_rate
        self.exploration_decay = exploration_decay
        self.save_path = save_path
        self.q_table = self.initialize_q_table()

    def initialize_q_table(self):
        q_table = np.zeros((self.state_size, self.action_size))
        return q_table

    def choose_action(self, state):
        if np.random.uniform(0, 1) < self.exploration_rate:
            action = random.randint(0, self.action_size - 1)
        else:
            action = np.argmax(self.q_table[state])
        self.exploration_rate *= self.exploration_decay
        return action

    def update_q_table(self, state, action, reward, next_state, done):
        old_value = self.q_table[state, action]
        next_max = np.max(self.q_table[next_state])
        new_value = (1 - self.learning_rate) * old_value + self.learning_rate * (re
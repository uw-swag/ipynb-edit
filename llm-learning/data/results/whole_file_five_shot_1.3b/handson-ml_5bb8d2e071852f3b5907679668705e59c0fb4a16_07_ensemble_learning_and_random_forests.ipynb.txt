```
    # To support both python 2 and python 3
    from __future__ import division, print_function, unicode_literals

    # Common imports
    import numpy as np
    import os

    # to make this notebook's output stable across runs
    np.random.seed(42)

    # To plot pretty figures
    %matplotlib inline
    import matplotlib
    import matplotlib.pyplot as plt
    plt.rcParams['axes.labelsize'] = 14
    plt.rcParams['xtick.labelsize'] = 12
    plt.rcParams['ytick.labelsize'] = 12

    # Where to save the figures
    PROJECT_ROOT_DIR = "."
    CHAPTER_ID = "ensembles"

    def image_path(fig_id):
        return os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id)

    def save_fig(fig_id, tight_layout=True):
        print("Saving figure", fig_id)
        if tight_layout:
            plt.tight_layout()
        plt.savefig(image_path(fig_id) + ".png", format='png', dpi=300)

    # Importing necessary libraries
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.ensemble import VotingClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.svm import SVC

    # Creating the classifiers
    log_clf = LogisticRegression(solver="liblinear", random_state=42)
    rnd_clf = RandomForestClassifier(n_estimators=10, random_state=42)
    svm_clf = SVC(gamma="auto", random_state=42)

    # Creating the voting classifier
    voting_clf = VotingClassifier(
        estimators=[('lr', log_clf), ('rf', rnd_clf), ('svc',
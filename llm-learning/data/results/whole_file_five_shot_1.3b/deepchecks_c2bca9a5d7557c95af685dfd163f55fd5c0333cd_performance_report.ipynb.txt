
    The commit message "[issue-757] updated MNIST dataset api (#798)" has been updated to reflect the changes made to the MNIST dataset API. The original code was using the `torchvision.datasets.MNIST` class, which is deprecated and replaced with the `torchvision.datasets.MNIST` class in the `torchvision.datasets` module. The `load_mnist` function was also updated to load the MNIST dataset from the `torchvision.datasets` module.

    The `MNistNet` class was also updated to use the `nn.Module` class, which is the base class for all neural network modules in PyTorch. The `trained_mnist` function was updated to use the `copy.deepcopy` function to create a deep copy of the model, and to use the `nn.CrossEntropyLoss` function for the loss function.

    The `VisionDataset` class was updated to use the `torch.utils.data.Dataset` class, which is the base class for all datasets in PyTorch. The `mnist_train_loader` and `mnist_test_loader` functions were also updated to load the MNIST dataset from the `torchvision.datasets` module.

    The `PerformanceReport` class was updated to use the `deepchecks.vision.checks.performance.PerformanceReport` class, which is a check for performance reports in deepchecks.

    The `coco.get_trained_yolov5_object_detection` function was updated to load the YOLOv5 model for object detection.

    The `coco.get_coco_dataloader` function was updated to load the COCO dataset.

    The `VisionDataset` class was updated to use the `torch.utils.data.Dataset` class, which is the base class for all datasets in PyTorch. The `coco.yolo_wrapper` function was updated to wrap the YOLOv5 model for object detection.

    The `VisionDataset` class was updated to use the `torch.utils.data.Dataset` class, which is the base class
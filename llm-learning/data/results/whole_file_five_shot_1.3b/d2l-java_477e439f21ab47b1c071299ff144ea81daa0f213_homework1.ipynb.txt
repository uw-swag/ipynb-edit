```python
    import ai.djl.Device;
    import ai.djl.ndarray.NDManager;
    import ai.djl.ndarray.NDArray;
    import ai.djl.ndarray.LazyNDArray;
    import ai.djl.ndarray.index.NDIndex;
    import ai.djl.ndarray.types.Shape;

    # You have to use the MXNet engine for Q1 since
    # it is currently the only engine in DJL
    # to support Lazy NDArrays
    manager = NDManager.newBaseManager(Device.cpu(), "MXNet");

    # You can now use the manager to create and manipulate NDArrays
    # For example, to create a 2D array of float32 with shape (2, 3)
    array = manager.newArray(Shape.of(2, 3), Float.TYPE);

    # You can also create a LazyNDArray, which is a special type of NDArray that
    # is lazily evaluated, i.e., its value is only computed when it is iterated over
    lazy_array = manager.newLazyNDArray(Shape.of(2, 3), Float.TYPE);

    # You can also create an NDIndex, which is a special type of NDArray that
    # is used to index into a NDArray
    index = manager.newIndex(Shape.of(2), Int32.TYPE);

    # You can also create a NDArray with a specific value
    array_with_value = manager.newArray(Shape.of(2, 3), Float.TYPE, 1.0f);

    # You can also create a NDArray from a Python list
    python_list = [1, 2, 3, 4, 5, 6];
    array_from_python_list = manager.newArray(Shape.of(len(python_list)), Float.TYPE, python_list.toArray(Float.TYPE));

    # You can also create a NDArray from a Python list of lists
    python_list
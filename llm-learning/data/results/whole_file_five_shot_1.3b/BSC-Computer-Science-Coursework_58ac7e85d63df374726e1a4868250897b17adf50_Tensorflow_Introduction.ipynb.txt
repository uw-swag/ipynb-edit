```python
    import tensorflow as tf
    import tensorflow_datasets as tfds

    # Load the dataset
    (ds_train, ds_test), ds_info = tfds.load('imdb_reviews', 
                                              split=['train', 'test'], 
                                              shuffle_files=True, 
                                              with_info=True, 
                                              as_supervised=True)

    # Prepare the dataset for training
    def encode(text_tensor, label):
        text = text_tensor.numpy()
        label = label.numpy()
        text = tf.strings.lower(text)
        text = tf.strings.regex_replace(text, b"<br />", b" ")
        text = tf.strings.regex_replace(text, b"<.*?>", b" ")
        text = tf.strings.regex_replace(text, b"[^a-z0-9]", b" ")
        return text, label

    ds_train = ds_train.map(lambda text, label: tf.py_function(encode, inp=[text, label], Tout=(tf.string, tf.int64)))
    ds_train = ds_train.unbatch()
    ds_train = ds_train.map(lambda text, label: (tf.reshape(text, ()), label))

    # Prepare the dataset for evaluation
    ds_test = ds_test.map(lambda text, label: tf.py_function(encode, inp=[text, label], Tout=(tf.string, tf.int64)))
    ds_test = ds_test.unbatch()
    ds_test = ds_test.map(lambda text, label: (tf.reshape(text, ()), label))

    # Create the model
    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(ds_info.splits['train'].num_examples, 64),
        tf.keras.layers.Bidirectional(tf.keras.layers.GRU(
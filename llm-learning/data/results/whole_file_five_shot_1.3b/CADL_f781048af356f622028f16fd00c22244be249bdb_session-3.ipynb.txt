
    '''
    ### Instruction:
    [
    Commit Message: "[session-3] added montage_filters function"
    Original Code Cells:
    '''
    <Cell_0>
# Now let's define a function to create a montage from a set of filters
def montage_filters(W):
    # We'll take the first convolutional layer's filters and create a montage
    # We'll take the first filter in the first layer, and create a montage
    # from it.
    # TODO: explore changing the parameters here:
    m, n = W.shape[0], W.shape[1]
    mf, nf = W.shape[2], W.shape[3]
    H = np.zeros((m * nf, m * mf))
    
    for i in range(m):
        for j in range(n):
            H[i*nf:(i+1)*nf, j*mf:(j+1)*mf] = W[i, j]
    
    return H
<\Cell_0>
<Cell_1>
# Now let's use this function to create a montage from the learned filters
W = sess.run(g.get_tensor_by_name('0/W:0'))
m = montage_filters(W)
plt.figure(figsize=(5, 5))
plt.imshow(m)
plt.title('Learned Convolution Kernels')
<\Cell_1>
<Cell_2>
# Now let's use this function to create a montage from the learned filters
W = sess.run(g.get_tensor_by_name('1/W:0'))
m = montage_filters(W)
plt.figure(figsize=(5, 5))
plt.imshow(m)
plt.title('Learned Convolution Kernels')
<\Cell_2>
<Cell_3>
# Now let's use this function to create a montage from the learned filters
W = sess.run(g.get_tensor_by_name('2/W:0'))
m
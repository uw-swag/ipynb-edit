```python
    <Cell_0>
# Imports
<\Cell_0>
<Cell_1>
from deepchecks.base import Dataset
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from deepchecks.checks.performance import RocReport
import pandas as pd
<\Cell_1>
<Cell_2>
# Generating data:
<\Cell_2>
<Cell_3>
iris = load_iris(as_frame=True)
clf = LogisticRegression(max_iter=1)
frame = iris.frame
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=55)
clf.fit(X_train, y_train)
ds = Dataset(pd.concat([X_test, y_test], axis=1), 
            features=iris.feature_names,
            label='target')
<\Cell_3>
<Cell_4>
# Running roc_report check:
<\Cell_4>
<Cell_5>
check = RocReport()
check.run(ds, clf)
<\Cell_5>

    ```
    The code above is a simple example of how to use the `RocReport` check in DeepChecks to evaluate the performance of a logistic regression model. The `RocReport` check generates a report of the ROC curve, which is a graphical representation of the diagnostic ability of a binary classifier to distinguish between two classes.

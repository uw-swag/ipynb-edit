```
    # AlexNet Implementation and Regularization

    # Importing necessary libraries
    from scipy.special import expit
    import numpy as np
    import keras
    from keras.datasets import mnist
    from keras.models import Sequential
    from keras.layers import Dense, Flatten
    from keras.layers import Conv2D, AveragePooling2D
    from keras import backend as K

    # Loading the MNIST dataset
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    # Preprocessing the data
    img_rows, img_cols = 28, 28
    if K.image_data_format() == 'channels_first':
        x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
        x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
        input_shape = (1, img_rows, img_cols)
    else:
        x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
        x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
        input_shape = (img_rows, img_cols, 1)

    # Normalizing the data
    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    x_train /= 255
    x_test /= 255

    # One-hot encoding
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)

    # Compiling the model
    model.compile(loss=keras.losses.categorical_crossent
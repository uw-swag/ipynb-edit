```python
    import numpy as np
    import torch
    from torch import nn
    from torch.nn import functional as F

    class NiN(nn.Module):
        def __init__(self, input_size, hidden_size, output_size):
            super(NiN, self).__init__()
            self.input_size = input_size
            self.hidden_size = hidden_size
            self.output_size = output_size

            self.W1 = nn.Parameter(torch.randn(input_size, hidden_size))
            self.W2 = nn.Parameter(torch.randn(hidden_size, output_size))
            self.b1 = nn.Parameter(torch.randn(hidden_size))
            self.b2 = nn.Parameter(torch.randn(output_size))

            self.h = torch.zeros(1, hidden_size)
            self.c = torch.zeros(1, hidden_size)

        def forward(self, x):
            self.h = F.tanh(self.W1.mm(x).reshape(-1, self.input_size) + self.b1 + self.h)
            return F.softmax(self.W2.mm(self.h).reshape(-1, self.output_size) + self.b2, dim=1)

    # Example usage:
    nin = NiN(input_size=10, hidden_size=5, output_size=10)
    input_data = torch.randn(10, 10)
    output = nin(input_data)
    print(output)
    ```

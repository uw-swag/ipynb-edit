
    ### Instruction:
    [
    Commit Message: "Update Ch3 Linear Networks to 0.7.0-SNAPSHOT (#9)"
    Original Code Cells:
    '''
<\Cell_0>
<Cell_1>
import ai.djl.util.RandomAccessDataset;
import ai.djl.util.RandomAccessDataset;
import ai.djl.util.RandomAccessDataset;
import ai.djl.util.RandomAccessDataset;
<\Cell_1>
<Cell_2>
int batchSize = 256;
boolean randomShuffle = true;

# get training and validation dataset
RandomAccessDataset trainingSet = RandomAccessDataset.getDataset(Dataset.Usage.TRAIN, batchSize, randomShuffle);
RandomAccessDataset validationSet = RandomAccessDataset.getDataset(Dataset.Usage.TEST, batchSize, false);
<\Cell_2>
<Cell_3>
Loss loss = Loss.softmaxCrossEntropyLoss();
<\Cell_3>
<Cell_4>
Metrics metrics = new Metrics();
trainer.setMetrics(metrics);
<\Cell_4>
<Cell_5>
trainer.initialize(new Shape(1, 28 * 28);
<\Cell_5>
<Cell_6>
trainer.getTrainingResult();
<\Cell_6>
<Cell_7>
<Cell_8>
trainer.setTraining(trainer);
<\Cell_8>
<Cell_9>
trainer.getTrainingResult();
<\Cell_9>
<Cell_10>
<Cell_10>
int numEpochs = 5;

EasyTrain.fit(trainer, numEpochs, trainingSet, validationSet);
trainer.getTrainingResult();
<\Cell_10>
<Cell_11>
<Cell_11>
int numEpochs = 5;

EasyTrain.fit(trainer, numEpochs, trainingSet, validationSet);
trainer.
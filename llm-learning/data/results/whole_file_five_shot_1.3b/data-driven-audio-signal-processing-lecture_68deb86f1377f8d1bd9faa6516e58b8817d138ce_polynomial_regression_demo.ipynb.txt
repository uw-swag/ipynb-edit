```python
    <Cell_0>
    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error
    from sklearn.model_selection import cross_val_score
    from sklearn.model_selection import GridSearchCV

    np.random.seed(0)
    <\Cell_0>
    <Cell_1>
    # Generate some data
    X = np.linspace(0, 10, 100).reshape(-1, 1)
    y = 3*X + 2 + np.random.normal(0, 1, 100).reshape(-1, 1)
    <\Cell_1>
    <Cell_2>
    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    <\Cell_2>
    <Cell_3>
    # Fit a linear regression model
    lr = LinearRegression()
    lr.fit(X_train, y_train)
    y_pred_lr = lr.predict(X_test)
    <\Cell_3>
    <Cell_4>
    # Fit a polynomial regression model
    poly = PolynomialFeatures(degree=2)
    X_train_poly = poly.fit_transform(X_train)
    X_test_poly = poly.transform(X_test)
    lr_poly = LinearRegression()
    lr_poly.fit(X_train_poly, y_train)
    y_pred_poly = lr_poly.predict(X_test_poly)
    <\Cell_4>
    <Cell_5>
    # Evaluate the models
    print(f"Linear Regression MSE: {mean_squared_error(y_test, y_pred_lr)}")
    print(f"Pol
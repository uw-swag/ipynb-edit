```
    import torch
    import torchvision
    import torchvision.datasets as datasets
    import matplotlib.pyplot as plt
    import numpy as np
    import torch.utils.data as utils
    from os.path import join as oj
    %matplotlib inline

    color_x.shape

    mnist_trainset = datasets.MNIST(root='../data', train=True, download=True, transform=None)
    color_x = np.zeros((60000, 3, 28, 28))
    color_x[np.where((mnist_trainset.train_labels <5)), 0 ] =  mnist_trainset.data[np.where((mnist_trainset.train_labels <5))]
    color_x[np.where((mnist_trainset.train_labels >=5)),1] =  mnist_trainset.data[np.where((mnist_trainset.train_labels >=5))]
    color_y = mnist_trainset.train_labels.numpy().copy()
    np.save(oj("../data/ColorMNIST", "train_x.npy"), color_x)
    np.save(oj("../data/ColorMNIST", "train_y.npy"), color_y)

    test_x_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "test_x.npy")))
    test_y_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "test_y.npy")))
    test_dataset = utils.TensorDataset(test_x_tensor,test_y_tensor) # create your datset
    test_loader = utils.DataLoader(test_dataset) # create your dataloader

    for batch_idx, (data, target) in enumerate(test_loader):
        pass

    test_y_tensor.dtype

    target.dtype

    data
    ```

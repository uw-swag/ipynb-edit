```python
    from deepchecks.checks.integrity import LabelAmbiguity
    from deepchecks.base import Dataset
    import pandas as pd

    # Create a dataset with some label ambiguity
    dataset = Dataset(pd.DataFrame({"col1":[1,2,1,2,1,2,1,2,1,2],
                                    "col2":[1,2,1,2,5,2,5,2,3,2],
                                    "my_label":[2,3,4,4,4,3,4,5,6,4]}),
                      label="my_label",
                      label_type="classification_label")

    # Run the LabelAmbiguity check
    LabelAmbiguity().run(dataset)

    # Run the LabelAmbiguity check with a specific number of labels to show
    LabelAmbiguity(n_to_show=1).run(dataset)

    # Run the LabelAmbiguity check with specific columns to show
    LabelAmbiguity(columns=['col1', 'my_label']).run(dataset)

    # Create a clean dataset with some label ambiguity
    clean_dataset = Dataset(pd.DataFrame({"col1":[1,2,1,2,1,2,1,2,1,2],
                                          "col2":[1,2,1,2,5,2,5,2,3,2],
                                          "my_label":[2,3,2,3,4,3,4,3,6,3]}),
                            label="my_label",
                            label_type="classification_label")

    # Run the LabelAmbiguity check on the clean dataset
    LabelAmbiguity().run(clean_dataset)
    ```

    The LabelAmbiguity check in Deepchecks identifies instances where the same label appears in multiple rows. This can be useful for identifying potential label ambiguity in your dataset.

    The `LabelAmbiguity` class has several parameters that can be used to customize the check:

    - `n_to_show`: The number of labels to show in the result.
    - `columns
```
    <Cell_0>
    from mlchecks.checks.integrity.string_length_outlier import string_length_outlier, StringLengthOutlier
    import pandas as pd
    %load_ext autoreload
    %autoreload 2
    <\Cell_0>
    <Cell_1>
    col1 = ["aaaaa33", "aaaaaaa33"]*40
    col1.append("a")
    col1.append("aaaaaadsfasdfasdf")

    col2 = ["b", "abc"]*41

    col3 = ["a"]*80
    col3.append("a"*100)
    col3.append("a"*200)
    # col1 and col3 contrains outliers, col2 does not
    df = pd.DataFrame({"col1":col1, "col2": col2, "col3": col3 })
    <\Cell_1>
    <Cell_2>
    string_length_outlier(df)
    <\Cell_2>
    <Cell_3>
    col = ["a","a","a","a","a","a","a","a","a","a","a","a","a","ab","ab","ab","ab","ab","ab", "ab"]*1000
    col.append("basdbadsbaaaaaaaaaa")
    col.append("basdbadsbaaaaaaaaaaa")
    df = pd.DataFrame({"col1":col})
    string_length_outlier(df,num_percentiles=1000)
    <\Cell_3>
    ```
    The code above is a modification to the original code to check for string length outliers in the DataFrame. The outliers are identified using the `string_length_outlier` function from the `mlchecks.checks.integrity.string_length_outlier` module. The outliers are identified using the `num_percentiles` parameter.

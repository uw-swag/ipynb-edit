```python
    from deepchecks.vision.base import VisionData
    from deepchecks.vision.checks.performance import ClassPerformance
    from deepchecks.vision.datasets.classification import mnist
    from deepchecks.vision.utils.classification_formatters import ClassificationPredictionFormatter
    from torch import nn
    from deepchecks.vision.utils.detection_formatters import DetectionLabelFormatter, DetectionPredictionFormatter
    from deepchecks.vision.datasets.detection import coco

    mnist_model = mnist.load_model()
    train_ds = mnist.load_dataset(train=True, object_type='VisionData')
    test_ds = mnist.load_dataset(train=False, object_type='VisionData')

    pred_formatter = ClassificationPredictionFormatter(nn.Softmax(dim=1))

    check = ClassPerformance()
    check.run(train_ds, test_ds, mnist_model, prediction_formatter=pred_formatter)

    yolo = coco.load_model(pretrained=True)

    coco_train_loader = coco.load_dataset(train=True)
    coco_test_loader = coco.load_dataset(train=False)

    train_ds = VisionData(coco_train_loader, label_transformer=DetectionLabelFormatter(coco.yolo_label_formatter), num_classes=80)
    test_ds = VisionData(coco_test_loader, label_transformer=DetectionLabelFormatter(coco.yolo_label_formatter), num_classes=80)

    det_formatter = DetectionPredictionFormatter(coco.yolo_prediction_formatter)

    check = ClassPerformance(show_only='best')
    check.run(train_ds, test_ds, yolo, prediction_formatter=det_formatter)
    ```

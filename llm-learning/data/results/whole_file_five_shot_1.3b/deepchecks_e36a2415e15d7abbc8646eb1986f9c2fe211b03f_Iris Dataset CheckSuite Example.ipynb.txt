```python
    # Update to example notebook
    # Import necessary libraries
    import pandas as pd
    import numpy as np
    np.random.seed(42)

    from sklearn.datasets import load_iris
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import train_test_split

    # Load the iris dataset
    iris_df = load_iris(return_X_y=False, as_frame=True)['frame']
    label_col = 'target'

    # Split the dataset into training and validation sets
    df_train, df_val = train_test_split(iris_df, stratify=iris_df[label_col], random_state=0)

    # Train a Random Forest Classifier
    rf_clf = RandomForestClassifier()
    rf_clf.fit(df_train.drop(label_col, axis=1), df_train[label_col]);

    # Import necessary libraries
    from mlchecks import Dataset

    # Create datasets with no categorical features
    ds_train = Dataset(df_train, cat_features=[], label = label_col)
    ds_val =  Dataset(df_val, cat_features=[], label = label_col)

    # Import necessary libraries
    from mlchecks.suites import IntegrityCheckSuite

    # Check the integrity of the datasets
    IntegrityCheckSuite.run(train_dataset=ds_train, validation_dataset=ds_val, check_datasets_policy='both')

    # Split the dataset into train and validation sets
    train_len = round(0.67*iris_df.shape[0])
    alternative_train_df = iris_df[:train_len]
    alternative_val_df = iris_df[train_len:]

    # Check the integrity of the alternative train and validation sets
    IntegrityCheckSuite.run(train_dataset=alternative_train_df, validation_dataset=alternative_val_df,
                           
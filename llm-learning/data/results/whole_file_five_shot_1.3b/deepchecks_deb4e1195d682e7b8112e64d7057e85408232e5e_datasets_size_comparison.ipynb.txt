```python
    <Cell_0>
    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from deepchecks import Dataset
    from deepchecks.checks.methodology import DatasetsSizeComparison
    <\Cell_0>
    <Cell_1>
    df = pd.DataFrame(np.random.randn(1000, 3), columns=['x1', 'x2', 'x3'])
    df['label'] = df['x2'] + 0.1 * df['x1']

    train, test = train_test_split(df, test_size=0.4)
    train = Dataset(train, features=['x1', 'x2', 'x3'], label='label')
    test = Dataset(test, features=['x1', 'x2', 'x3'], label='label')

    check_instance = (
        DatasetsSizeComparison()
        .add_condition_train_dataset_not_smaller_than_test()
        .add_condition_test_size_not_smaller_than(100)
        .add_condition_test_train_size_ratio_not_smaller_than(0.2)
    )

    <\Cell_1>
    <Cell_2>
    check_instance.run(train, test)
    <\Cell_2>
    ```
    The code above is an example of how to use the DeepChecks library to perform a dataset size comparison check. The check is designed to ensure that the size of the test dataset is not smaller than the size of the train dataset, and that the ratio of the size of the test to the size of the train is not smaller than 0.2.

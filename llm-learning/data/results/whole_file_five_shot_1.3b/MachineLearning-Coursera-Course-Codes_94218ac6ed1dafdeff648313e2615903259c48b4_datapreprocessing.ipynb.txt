```
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 123)
    ```

    ### Instruction:
    [
    Commit Message: "30-08-23 - updated"
    Original Code Cells:
    '''
    <Cell_0>
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
<\Cell_0>
<Cell_1>
dataset = pd.read_csv('Data.csv')
X = dataset.iloc[:,:-1].values
Y = dataset.iloc[:,-1].values
<\Cell_1>
<Cell_2>
print(X)
<\Cell_2>
<Cell_3>
print(Y)
<\Cell_3>
<Cell_4>
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy = 'mean')
imputer.fit(X[:,1:3])
X[:,1:3] = imputer.transform(X[:,1:3]) #this return the new updated data so we have to update it
# one more method X[:,1:3] =imputer.fit_transform(X[:,1:3])
<\Cell_4>
<Cell_5>
print(X)
<\Cell_5>
<Cell_6>
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(transformers= [('encoder',OneHotEncoder(),[0])],remainder="passthrough")
X = np.array(ct.fit_transform(X))
<\Cell_6>
<Cell_7>
print(X)
<\Cell_7>
<Cell_8>
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Y = le.fit_transform(Y)
<\Cell_8>
<Cell_9>
print(
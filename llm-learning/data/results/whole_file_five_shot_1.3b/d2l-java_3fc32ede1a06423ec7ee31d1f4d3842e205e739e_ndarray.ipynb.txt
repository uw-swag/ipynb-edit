```
    import d2l
    import torch
    from torch import nn
    from torch.nn import functional as F

    class Residual(nn.Module):
        def __init__(self, fn):
            super(Residual, self).__init__()
            self.fn = fn

        def forward(self, x):
            return self.fn(x) + x

    class ResidualBlock(nn.Module):
        def __init__(self, channels):
            super(ResidualBlock, self).__init__()
            self.block = nn.Sequential(
                Residual(nn.Conv2d(channels, channels, kernel_size=3, padding=1)),
                nn.ReLU(),
                Residual(nn.Conv2d(channels, channels, kernel_size=3, padding=1)),
            )

        def forward(self, x):
            return self.block(x)

    class InvertedResidual(nn.Module):
        def __init__(self, channels, reduction):
            super(InvertedResidual, self).__init__()
            self.block = nn.Sequential(
                nn.Conv2d(channels, channels // reduction, kernel_size=1),
                nn.ReLU(),
                nn.Conv2d(channels // reduction, channels, kernel_size=3, padding=1),
                nn.Sigmoid(),
            )

        def forward(self, x):
            return x * self.block(x)

    class Darknet(nn.Module):
        def __init__(self, channels, n=3, inverted_residual_blocks=None):
            super(Darknet, self).__init__()
            self.blocks = nn.ModuleList()
            inverted_residual_blocks = inverted_residual_blocks or [ResidualBlock(channels)]
            for i, block in enumerate(inverted_residual_blocks):
                self.blocks.append(block)
                if i != len(inverted_residual_blocks) - 1:
                    self.blocks
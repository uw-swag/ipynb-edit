```
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    from deepchecks.checks.methodology import *
    from deepchecks.base import Dataset

    np.random.seed(42)

    def generate_data():
        df = pd.DataFrame(np.random.randn(100, 3), columns=['x1', 'x2', 'x3'])
        df['x4'] = df['x1'] * 0.5 + df['x2']
        df['label'] = df['x2'] + 0.1 * df['x1']
        df['x5'] = df['label'].apply(lambda x: 'v1' if x < 0 else 'v2')
        return df

    df_train = generate_data()
    ds_train = Dataset(df_train, label='label')

    df_test = generate_data()
    df_test['x2'] = df_test['x2'] + 0.5 * df_test['x1']
    df_test['x3'] = 0.5 * df_test['x3'] + 0.5 * df_test['label']
    df_test['x5'][:15] = 'v1'
    ds_test = Dataset(df_test, label='label')

    SingleFeatureContributionTrainTest().run(train_dataset=ds_train, test_dataset=ds_test)
    ```

    The code above generates random data, then uses it to create a `Dataset` object for both training and testing. The `SingleFeatureContributionTrainTest` check is then run on the datasets, which will show the contribution of each feature to the model's performance.

    The results of the check will be displayed in a plot, showing the contribution of each feature to the model's performance. The plot will be interactive, allowing you to hover over the features to see their corresponding values.

    Please note that the `SingleFeatureContributionTrainTest` check is a part of the `deepchecks.checks.methodology` module, which is not installed by default. You
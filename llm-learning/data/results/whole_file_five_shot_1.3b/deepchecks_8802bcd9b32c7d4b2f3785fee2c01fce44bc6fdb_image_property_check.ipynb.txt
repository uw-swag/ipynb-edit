```
    # Deleting notebooks
    ## Notebook 1
    from deepchecks.vision.datasets.detection import coco
    from deepchecks.vision.checks.distribution import ImagePropertyDrift

    train_dataset = coco.load_dataset(train=True, object_type='VisionData')
    test_dataset = coco.load_dataset(train=False, object_type='VisionData')

    check_result = ImagePropertyDrift().run(train_dataset, test_dataset)

    ## Notebook 2
    train_dataset = coco.load_dataset(train=True, object_type='VisionData')
    test_dataset = coco.load_dataset(train=False, object_type='VisionData')

    check_result = ImagePropertyDrift().run(train_dataset, test_dataset)

    ## Notebook 3
    check_result.value

    ## Notebook 4
    check_result = (
        ImagePropertyDrift()
        .add_condition_drift_score_not_greater_than(0.001)
        .run(train_dataset, test_dataset)
    )
    check_result.show(show_additional_outputs=False)

    ## Notebook 5
    from typing import List
    import numpy as np

    def area(images: List[np.ndarray]) -> List[int]:
        # Return list of integers of image areas (height multiplied by width)
        return [img.shape[0] * img.shape[1] for img in images]
    
    def aspect_ratio(images: List[np.ndarray]) -> List[float]:
        # Return list of floats of image height to width ratio
        return [img.shape[0] / img.shape[1] for img in images]

    properties = [
        {'name': 'Area', 'method': area, 'output_type': 'continuous'},
        {'name': 'Aspect Ratio', 'method': aspect_ratio, 'output_type': 'continuous'}
    ]

   
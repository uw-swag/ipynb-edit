```python
    # Backpropagation implementation in Python
    # This is a simple implementation of a neural network's backpropagation algorithm

    class NeuralNetwork:
        def __init__(self, x, y):
            self.input = x
            self.weights1 = np.random.rand(self.input.shape[1], 4)
            self.weights2 = np.random.rand(4, 1)
            self.y = y
            self.output = np.zeros(self.y.shape)

        def forward(self):
            self.layer1 = expit(np.dot(self.input, self.weights1))
            self.output = expit(np.dot(self.layer1, self.weights2))

        def backprop(self):
            d_weights2 = np.dot(self.layer1.T, (2*(self.y - self.output) * expit(self.output, True)))
            d_weights1 = np.dot(self.input.T,  (np.dot(2*(self.y - self.output) * expit(self.output, True), self.weights2.T) * expit(self.input, True)))

            self.weights1 += d_weights1
            self.weights2 += d_weights2

        def train(self, epochs=1500):
            for _ in range(epochs):
                self.forward()
                self.backprop()

    # Test the neural network
    X = np.array([[0, 0, 0, 1],
                  [0, 0, 1, 1],
                  [0, 1, 0, 1],
                  [0, 1, 1, 1],
                  [1, 0, 0, 1],
                  [1, 0, 1, 1],
                  [1, 1, 0, 1],
                  [1, 1, 1, 1]])
    y = np.array([[0], [1], [1], [0], [0], [1
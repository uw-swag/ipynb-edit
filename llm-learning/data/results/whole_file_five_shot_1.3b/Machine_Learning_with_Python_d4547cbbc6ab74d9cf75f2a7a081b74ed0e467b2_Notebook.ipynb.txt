```
    [
    Commit Message: "Implementing PCA for Dimensionality Reduction"
    Original Code Cells:
    '''
    <Cell_0>
    import numpy as np 
    import pandas as pd
    from sklearn.decomposition import PCA
    from sklearn.preprocessing import StandardScaler
    from sklearn.datasets import make_blobs
    import matplotlib.pyplot as plt 
    from mpl_toolkits.mplot3d import Axes3D 
    import matplotlib as mpl
    mpl.style.use(['ggplot'])  
    %matplotlib inline
    <\Cell_0>
    <Cell_1>
    np.random.seed(0)
    <\Cell_1>
    <Cell_2>
    X, y = make_blobs(n_samples=5000, centers=[[4,4], [-2, -1], [2, -3], [1, 1]], cluster_std=0.9)
    <\Cell_2>
    <Cell_3>
    pca = PCA(n_components=2)
    <\Cell_3>
    <Cell_4>
    pca.fit(X)
    <\Cell_4>
    <Cell_5>
    X_pca = pca.transform(X)
    X_pca
    <\Cell_5>
    <Cell_6>
    pca.explained_variance_ratio_
    <\Cell_6>
    <Cell_7>
    pca.components_
    <\Cell_7>
    <Cell_8>
    # Initialize the plot with the specified dimensions.
    fig = plt.figure(figsize=(6, 4))

    # Colors uses a color map, which will produce an array of colors based on the number of labels there are.
    # We use set(k_means_labels) to get the unique labels.
    colors = plt.cm.Spectral(np.linspace(0, 1, len(set(k_means_labels))))

    # Create a plot
    ax = fig.add_sub
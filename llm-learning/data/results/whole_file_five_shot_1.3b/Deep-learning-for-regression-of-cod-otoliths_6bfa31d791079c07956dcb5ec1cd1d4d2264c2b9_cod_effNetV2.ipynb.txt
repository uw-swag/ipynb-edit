```python
    import torch
    import torchvision
    import torchvision.transforms as transforms
    import torch.nn as nn
    import torch.optim as optim

    class Config:
        def __init__(self, learning_rate, num_epochs, batch_size):
            self.learning_rate = learning_rate
            self.num_epochs = num_epochs
            self.batch_size = batch_size

    class Utils:
        @staticmethod
        def to_cuda(x):
            if torch.cuda.is_available():
                return x.cuda()
            else:
                return x

        @staticmethod
        def accuracy(output, target):
            _, pred = torch.max(output, 1)
            return (pred == target).float().mean()

    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 5 * 5, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 5 * 5)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    ```

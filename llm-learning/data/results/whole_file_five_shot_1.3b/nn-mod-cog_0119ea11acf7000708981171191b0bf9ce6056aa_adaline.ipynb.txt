```python
    import numpy as np
    import pandas as pd
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LinearRegression
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error

    class Adaline:
        def __init__(self, num_iter=1000, learning_rate=0.01, fit_intercept=True, verbose=False):
            self.num_iter = num_iter
            self.learning_rate = learning_rate
            self.fit_intercept = fit_intercept
            self.verbose = verbose

        def fit(self, X, y):
            if self.fit_intercept:
                X = np.c_[np.ones(X.shape[0]), X]

            self.weights = np.zeros(X.shape[1])
            self.bias = 0

            for i in range(self.num_iter):
                linear_model = np.dot(X, self.weights) + self.bias
                y_predicted = self._activation_function(linear_model)

                dw = (1 / X.shape[0]) * np.dot(X.T, (y_predicted - y))
                db = (1 / X.shape[0]) * np.sum(y_predicted - y)

                self.weights -= self.learning_rate * dw
                self.bias -= self.learning_rate * db

                if(self.verbose == True and i % 100 == 0):
                    print(f'iteration {i} -> {self._rmse(y, y_predicted)}')

            return self

        def predict(self, X):
            if self.fit_intercept:
                X = np.c_[np.ones(X.shape[0]), X]

            y_approximated = np.dot(X, self.weights) + self.bias
            return y_approximated

        def _rmse(self
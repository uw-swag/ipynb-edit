<Cell_0>
import pandas as pd

from sklearn import datasets

from evidently import ColumnMapping
from evidently.dashboard import Dashboard
from evidently.dashboard.tabs import DataDriftTab, CatTargetDriftTab
from evidently.options import DataDriftOptions

from evidently.model_profile import Profile
from evidently.model_profile.sections import DataDriftProfileSection, CatTargetDriftProfileSection 
<\Cell_0>
<Cell_1>
import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')
<\Cell_1>
<Cell_2>
from sklearn.datasets import fetch_openml
data = fetch_openml(name='adult', version=2, as_frame='auto')
df = data.frame
df.head()
<\Cell_2>
<Cell_3>
numerical_features = ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', 'hours-per-week']
categorical_features = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'native-country', 'class']
column_mapping = ColumnMapping(numerical_features=numerical_features, categorical_features=categorical_features)
<\Cell_3>
<Cell_4>
stat_test_option = DataDriftOptions(feature_stattest_func='psi')
<\Cell_4>
<Cell_5>
data_drift_dashboard = Dashboard(tabs=[DataDriftTab()], options=[stat_test_option])
<\Cell_5>
<Cell_6>
data_drift_dashboard.calculate(df[:30000], df[30000:], column_mapping=column_mapping)
<\Cell_6>
<Cell_7>
data_drift_dashboard.show()
<\Cell_7>
<Cell_8>
feature_stattest_func = {x: 'wasserstein' for x in numerical_features}
for col in ['sex', 'class']:
    feature_stattest_func[col] = 'z'
for col in ['workclass', 'education', 'marital-status']:
    feature_stattest_func[col] = 'kl_div'
for col in ['occupation', 'relationship', 'race',  'native-country']:
    feature_stattest_func[col] = 'jensenshannon'
<\Cell_8>
<Cell_9>
feature_stattest_func
<\Cell_9>
<Cell_10>
stat_test_option = DataDriftOptions(feature_stattest_func=feature_stattest_func)
<\Cell_10>
<Cell_11>
data_drift_dashboard = Dashboard(tabs=[DataDriftTab()], options=[stat_test_option])
<\Cell_11>
<Cell_12>
data_drift_dashboard.calculate(df[:30000], df[30000:], column_mapping=column_mapping)
<\Cell_12>
<Cell_13>
data_drift_dashboard.show()
<\Cell_13>
<Cell_14>

<\Cell_14>

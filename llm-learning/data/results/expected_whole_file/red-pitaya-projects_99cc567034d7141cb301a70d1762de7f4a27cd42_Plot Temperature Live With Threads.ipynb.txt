<Cell_0>
%matplotlib notebook
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.animation import FuncAnimation
from IPython.display import display, clear_output
from datetime import datetime, date
import time
import pandas as pd
import ipywidgets as widgets
import threading

filename = str(date.today()) + " temperature data.csv"
<\Cell_0>
<Cell_1>
headers = ["Temperature (oC)","Date"]
try:
    df = pd.read_csv(filename,names=headers,skiprows = 1)
    df
except:
    df = pd.DataFrame() #Create an empty data frame to append to later
df
<\Cell_1>
<Cell_2>
keep_running = True

def collect_data():
    while keep_running == True:
        global df
        clean_data_table = pd.DataFrame() #Create an empty data frame to append to later
        current_temp = !xadc_get_value_temp
        temp_value = float(current_temp[0][:5])
        clear_output(wait=True)
        display('Collecting temperatures. '+ str(len(df.index)) +' value(s) recorded.')
        clean_data_table['Temperature (oC)'] = [temp_value]
        clean_data_table['Date'] = [datetime.now()]
        df = df.append(clean_data_table)
        time.sleep(1)
<\Cell_2>
<Cell_3>
keep_running = True
t1=threading.Thread(target=collect_data)
t1.start()
<\Cell_3>
<Cell_4>
keep_running = False
<\Cell_4>
<Cell_5>
df
<\Cell_5>
<Cell_6>
df[headers] #Make sure the DataFrame is in the correct order
df.to_csv(filename,names=headers)
df
<\Cell_6>
<Cell_7>
df = pd.read_csv(filename,names=headers,skiprows = 1)
dateparse = lambda x: pd.datetime.strptime(x, '%Y-%m-%d %H:%M:%S.%f')
df = pd.read_csv(filename, parse_dates=['Date'], date_parser=dateparse,index_col=0)
df
<\Cell_7>
<Cell_8>
x = df['Date']
y1 = df['Temperature (oC)']

plt.plot(x,y1)  # Plot some data on the (implicit) axes.
plt.xlabel('Time')
plt.ylabel('Temprature (C)')
plt.title("Temperature - Arcylic Case with Fan")
plt.gcf().autofmt_xdate()
plt.show()
<\Cell_8>
<Cell_9>

def animate(i):
    global df
    clean_data_table = pd.DataFrame() #Create an empty data frame to append to later
    current_temp = !xadc_get_value_temp
    temp_value = float(current_temp[0][:5])
    clear_output(wait=True)
    display('Collecting temperatures. '+ str(len(df.index)) +' value(s) recorded.')
    clean_data_table['Temperature (oC)'] = [temp_value]
    clean_data_table['Date'] = [datetime.now()]
    df = df.append(clean_data_table)
    
    x = df['Date']
    y1 = df['Temperature (oC)']
    
    plt.cla()
    plt.plot(x,y1)
    plt.xlabel('Time')
    plt.ylabel('Temprature (C)')
    plt.title("Temperature - Arcylic Case with Fan")
    plt.gcf().autofmt_xdate()
    plt.show()
    
ani = FuncAnimation(plt.gcf(), animate,interval=2000)
plt.show()
<\Cell_9>
<Cell_10>
#x = df['Date']
#y1 = df['Temperature (oC)']

# plot
fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(i):
    x = df['Date']
    y1 = df['Temperature (oC)']
    ax1.cla()
    fig.clf()
    ax1.plot(x,y1, label='Temperature (oC)')

#ani = animation.FuncAnimation(fig,animate, interval=1000)
animate(1)

#plt.cla()
#plt.plot(x,y1, label='Temperature (oC)')
#plt.legend()
# beautify the x-labels
plt.gcf().autofmt_xdate()
#plt.tight_layout()
plt.show()
<\Cell_10>
<Cell_11>
df[headers] #Make sure the DataFrame is in the correct order
df.to_csv(filename,names=headers)
df
<\Cell_11>

<Cell_0>
import os
from os.path import join as oj
import sys, time
sys.path.insert(1, oj(sys.path[0], '..'))  # insert parent path
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
from copy import deepcopy
import pickle as pkl
import pandas as pd
from os.path import join
import torch
import torch
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import seaborn as sns

%matplotlib inline
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from os.path import join as oj
import torch.utils.data as utils
from torchvision import datasets, transforms
import numpy as np
import os
import sys
pd.set_option('precision', 3)
<\Cell_0>
<Cell_1>
save_path = "../results_for_export"
trained_model_folder = '../mnist_adversarial/'
fnames = sorted([oj(trained_model_folder, fname) for fname in os.listdir(trained_model_folder) if 'block' not in fname]) 
# other models were trained badly

results_list = [pd.Series(pkl.load(open(fname, "rb"))) for fname in (fnames)] 
results = pd.concat(results_list, axis=1).T.infer_objects() 
results['final_acc'] = [max(x) for x in results['accs_test']] 
<\Cell_1>
<Cell_2>
results = results[results.final_acc > 85]
results = results[results.dataset == "Fashion"]
<\Cell_2>
<Cell_3>
results['final_acc'] = [x[-1] for x in results['accs_test']] 
results['final_acc_train'] = [max(x) for x in results['accs_train']]


results['final_cd'] = [x[-1] for x in results['cd']]
results['final_test_loss'] = [x[-1] for x in results['losses_test']]


results['final_train_loss'] = [min(x) for x in results['losses_train']]
results['acc_color'] = [0 for x in results['accs_train']]
if not 'method' in list(results.columns):
    results['method'] = ['CD' for x in results['accs_train']]
if not 'method' in list(results.columns):
    results['method'] = ['CD' for x in results['accs_train']]
results["fool"] =[0 for x in results['accs_test']]
<\Cell_3>
<Cell_4>
results = results.dropna()

results.reset_index(drop=True, inplace=True)
results_save = results[['regularizer_rate','final_acc','final_acc_train','final_test_loss','fool' ]].sort_values(by = ['regularizer_rate'])
<\Cell_4>
<Cell_5>
results_save = results[['regularizer_rate','final_acc','final_acc_train','final_test_loss','fool' ]].sort_values(by = ['regularizer_rate'])
<\Cell_5>
<Cell_6>
concise_results = results_save.groupby(by = ['regularizer_rate']).mean()
<\Cell_6>
<Cell_7>
results_save
<\Cell_7>
<Cell_8>
concise_results
<\Cell_8>
<Cell_9>
print(concise_results[['fool']].to_latex())
<\Cell_9>
<Cell_10>
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 20, 5, 1)
        self.conv2 = nn.Conv2d(20, 50, 5, 1)
        self.conv2_drop = nn.Dropout2d()

        self.fc1 = nn.Linear(4*4*50, 500)
        self.fc2 = nn.Linear(500, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2, 2)
        x = x.view(-1, 4*4*50)
        
        x = F.dropout(x, training=self.training)
        x = F.relu(self.fc1(x))
        
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)
    def logits(self, x):
    
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2, 2)
        x = x.view(-1, 4*4*50)
        x = F.dropout(x, training=self.training)
        x = F.relu(self.fc1(x))
        
        x = self.fc2(x)
        return x
test_net = Net()
test_net = test_net.to(0)
<\Cell_10>
<Cell_11>
import foolbox
import torch
import torchvision.models as models
import numpy as np
from tqdm import tqdm_notebook
from foolbox.criteria import Misclassification, TargetClass
from foolbox.distances import Linfinity
<\Cell_11>
<Cell_12>

val_dataset = datasets.FashionMNIST('../data', train=False, transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0,), (1,))
                       ]))
test_loader_adversarial = utils.DataLoader(val_dataset,
        batch_size=1, shuffle=True) # create your dataloader

test_net = Net()
test_net = test_net.to(0)
test_net = test_net.eval()
<\Cell_12>
<Cell_13>
val_dataset = datasets.FashionMNIST('../data', train=False, transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0,), (1,))
                       ]))
test_loader_adversarial = utils.DataLoader(val_dataset,
        batch_size=1, shuffle=False) # create your dataloader

<\Cell_13>
<Cell_14>
import torchvision.datasets as datasets
<\Cell_14>
<Cell_15>
len(results)
<\Cell_15>
<Cell_16>
#TODO num distances
mean = 0.1307
std = 0.3081
num_examples =10

list_of_distances = []
for i in tqdm_notebook(range(len(results))):
    used_examples = num_examples
    test_net.load_state_dict(results.model_weights[i])
    test_net.eval()
    fmodel = foolbox.models.PyTorchModel(
    test_net, bounds=(0, 1), num_classes=10, preprocessing=(mean, std))
    tot_distance = 0

        
    attack = foolbox.attacks.LocalSearchAttack(fmodel, criterion=Misclassification(), distance = foolbox.distances.Linfinity)

    for j  in tqdm_notebook(range(num_examples)):
        adversarial = attack(val_dataset[j][0].numpy(), val_dataset[j][1],unpack = False,)
       
        tot_distance+=adversarial.distance.value


    list_of_distances.append(tot_distance/used_examples)

           
# results['fool'] =[x for x in list_of_distances]
<\Cell_16>
<Cell_17>
results['fool'] =[x for x in list_of_distances]
<\Cell_17>
<Cell_18>
list_of_distances
<\Cell_18>
<Cell_19>
plt.imshow(adversarial.image[0])
<\Cell_19>

<Cell_0>
import io
import numpy as np
import os
import pandas as pd
from pathlib import Path
import requests
import zipfile

from datetime import datetime
from sklearn import datasets, ensemble

from evidently.pipeline.column_mapping import ColumnMapping
from evidently.report import Report
from evidently.metric_preset import DataDriftPreset
from evidently.metric_preset import TargetDriftPreset

from evidently.metrics import (
    RegressionQualityMetric,
    RegressionPredictedVsActualScatter,
    RegressionPredictedVsActualPlot,
    RegressionErrorPlot,
    RegressionAbsPercentageErrorPlot,
    RegressionErrorDistribution,
    RegressionErrorNormality,
    RegressionTopErrorMetric,
    RegressionErrorBiasTable,
    
    DatasetSummaryMetric,
    ColumnSummaryMetric,
    DatasetMissingValuesMetric,
    DatasetCorrelationsMetric
)
<\Cell_0>
<Cell_1>
# !wget https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip -P data/
<\Cell_1>
<Cell_2>
# !unzip data/Bike-Sharing-Dataset.zip -d data/
<\Cell_2>
<Cell_3>
raw_data = pd.read_csv("data/hour.csv", header=0, sep=',', parse_dates=['dteday'], index_col='dteday')
<\Cell_3>
<Cell_4>
raw_data.head()
<\Cell_4>
<Cell_5>
# Get weeks number
days = len(raw_data.index.unique())
weeks = days / 7

print(f'days = {days}; weeks = {weeks}')
<\Cell_5>
<Cell_6>
REF_MONTH_START = '2011-01-01'
REF_MONTH_END = '2011-01-28'

CUR_MONTH_START = '2011-01-29'
CUR_MONTH_END = '2011-02-28'

# CUR_WEEK_START = '2011-01-29'
# CUR_WEEK_END = '2011-02-04'
# CUR_WEEK_START = '2011-02-05'
# CUR_WEEK_END = '2011-02-11'
CUR_WEEK_START = '2011-02-12'
CUR_WEEK_END = '2011-02-18'

target = 'cnt'
prediction = 'prediction'
numerical_features = ['temp', 'atemp', 'hum', 'windspeed', 'hr', 'weekday']
categorical_features = ['season', 'holiday', 'workingday']

reports_dir = Path('reports') / f'{CUR_WEEK_START}_{CUR_WEEK_END}'
reports_dir.mkdir(exist_ok=True)
<\Cell_6>
<Cell_7>
reference = raw_data.loc[REF_MONTH_START:REF_MONTH_END]
current = raw_data.loc[CUR_MONTH_START:CUR_MONTH_END]
<\Cell_7>
<Cell_8>
reference.head()
<\Cell_8>
<Cell_9>
regressor = ensemble.RandomForestRegressor(random_state = 0, n_estimators = 50)
<\Cell_9>
<Cell_10>
regressor.fit(reference[numerical_features + categorical_features], reference[target])
<\Cell_10>
<Cell_11>
ref_prediction = regressor.predict(reference[numerical_features + categorical_features])
current_prediction = regressor.predict(current[numerical_features + categorical_features])
<\Cell_11>
<Cell_12>
reference['prediction'] = ref_prediction
current['prediction'] = current_prediction
<\Cell_12>
<Cell_13>
column_mapping = ColumnMapping()

column_mapping.target = target
column_mapping.prediction = prediction
column_mapping.numerical_features = numerical_features
column_mapping.categorical_features = categorical_features
<\Cell_13>
<Cell_14>
regression_perfomance_report = Report(metrics=[RegressionPreset()])

regression_perfomance_report.run(
    reference_data=reference,
    current_data=current.loc[CUR_WEEK_START:CUR_WEEK_END],
    column_mapping=column_mapping
)
<\Cell_14>
<Cell_15>
model_performance_report_path = reports_dir / 'model_performance.html'
regression_perfomance_report.save_html(model_performance_report_path)
<\Cell_15>
<Cell_16>
target_drift_report = Report(metrics=[TargetDriftPreset()])
target_drift_report.run(
    reference_data=reference,
    current_data=current.loc[CUR_WEEK_START:CUR_WEEK_END],
    column_mapping=column_mapping
)
<\Cell_16>
<Cell_17>
target_drift_report_path = reports_dir / 'target_drift.html'
target_drift_report.save_html(target_drift_report_path)
<\Cell_17>
<Cell_18>
column_mapping = ColumnMapping()
column_mapping.numerical_features = numerical_features
<\Cell_18>
<Cell_19>
data_drift_report = Report(metrics=[DataDriftPreset()])
data_drift_report.run(
    reference_data=reference,
    current_data=current.loc[CUR_WEEK_START:CUR_WEEK_END],
    column_mapping=column_mapping
)
<\Cell_19>
<Cell_20>
data_drift_report_path = reports_dir / 'data_drift.html'
data_drift_report.save_html(data_drift_report_path)
<\Cell_20>
<Cell_21>
column_mapping = ColumnMapping()
column_mapping.numerical_features = numerical_features
<\Cell_21>
<Cell_22>
data_quality_report = Report(metrics=[DataQualityPreset()])
data_quality_report.run(
    reference_data=reference,
    current_data=current.loc[CUR_WEEK_START:CUR_WEEK_END],
    column_mapping=column_mapping
)
<\Cell_22>
<Cell_23>
data_quality_report_path = reports_dir / 'data_quality.html'
data_quality_report.save_html(data_quality_report_path)
<\Cell_23>

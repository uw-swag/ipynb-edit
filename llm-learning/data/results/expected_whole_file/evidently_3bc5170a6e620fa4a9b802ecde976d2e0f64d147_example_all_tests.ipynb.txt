<Cell_0>
try:
    import evidently
except:
    !npm install -g yarn
    !pip install git+https://github.com/evidentlyai/evidently.git@test_suite_alpha
<\Cell_0>
<Cell_1>
!pip install visions
<\Cell_1>
<Cell_2>
import pandas as pd
import numpy as np

from evidently.test_suite import TestSuite

from evidently.tests import TestFeatureValueMin, TestFeatureValueMax, TestFeatureValueMean, \
TestFeatureValueMedian, TestFeatureValueStd,\
TestMeanInNSigmas, TestValueRange, TestNumberOfOutRangeValues, TestShareOfOutRangeValues, TestValueList, \
TestNumberOfOutListValues, TestShareOfOutListValues, TestNumberOfUniqueValues, TestMostCommonValueShare, \
TestUniqueValuesShare
<\Cell_2>
<Cell_3>
from evidently import ColumnMapping
from datetime import datetime
from sklearn.datasets import fetch_openml

data = fetch_openml(name='adult', version=2, as_frame='auto')
df = data.frame

ref = df[~df.education.isin(['Some-college', 'HS-grad', 'Bachelors'])]
curr = df[df.education.isin(['Some-college', 'HS-grad', 'Bachelors'])]

curr.iloc[:2000, 3:5] = np.nan
curr.iloc[:2000, 12] = np.nan

suite_with_ref = TestSuite(tests=[
TestFeatureValueMin(column_name='hours-per-week'),
TestFeatureValueMax(column_name='hours-per-week'),
TestFeatureValueMean(column_name='hours-per-week'),
TestFeatureValueMedian(column_name='hours-per-week'),
TestFeatureValueStd(column_name='hours-per-week'),
TestMeanInNSigmas(column_name='hours-per-week'),
TestValueRange(column_name='hours-per-week'),
TestNumberOfOutRangeValues(column_name='hours-per-week'),
TestShareOfOutRangeValues(column_name='hours-per-week'),
TestValueList(column_name='education'),
TestNumberOfOutListValues(column_name='hours-per-week'),
TestShareOfOutListValues(column_name='education'),
TestNumberOfUniqueValues(column_name='hours-per-week'),
TestMostCommonValueShare(column_name='education'),
TestUniqueValuesShare(column_name='education')
    ])
suite_with_ref.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping())
suite_with_ref
<\Cell_3>
<Cell_4>
suite = TestSuite(tests=[
TestFeatureValueMin(column_name='hours-per-week'),
TestFeatureValueMax(column_name='hours-per-week'),
TestFeatureValueMean(column_name='hours-per-week'),
TestFeatureValueMedian(column_name='hours-per-week'),
TestFeatureValueStd(column_name='hours-per-week'),
# TestMeanInNSigmas(column_name='hours-per-week'),
TestValueRange(column_name='hours-per-week', left=7, right=13),
TestNumberOfOutRangeValues(column_name='hours-per-week', left=3, right=5),
TestShareOfOutRangeValues(column_name='hours-per-week', left=3, right=5),
TestValueList(column_name='education', values=['HS-grad', 'Bachelors']),
TestNumberOfOutListValues(column_name='hours-per-week', values=['HS-grad', 'Bachelors']),
TestShareOfOutListValues(column_name='education', values=['HS-grad', 'Bachelors']),
TestNumberOfUniqueValues(column_name='hours-per-week'),
TestMostCommonValueShare(column_name='education'),
TestUniqueValuesShare(column_name='education')
    ])
suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping())
suite
<\Cell_4>
<Cell_5>
import pandas as pd
import numpy as np

from evidently.test_suite import TestSuite

from evidently.tests import TestShareOfDriftedFeatures, TestFeatureValueDrift, TestNumberOfDriftedFeatures
<\Cell_5>
<Cell_6>
from evidently import ColumnMapping
from datetime import datetime
from sklearn.datasets import fetch_openml
from evidently.test_preset import NoTargetPerformance, DataQuality, DataStability, DataDrift

data = fetch_openml(name='adult', version=2, as_frame='auto')
df = data.frame

ref = df[~df.education.isin(['Some-college', 'HS-grad', 'Bachelors'])]
curr = df[df.education.isin(['Some-college', 'HS-grad', 'Bachelors'])]

curr['target'] = curr['education-num']
curr['preds'] = curr['education-num'].values + np.random.normal(0, 6, curr.shape[0])
ref['target'] = ref['education-num']
ref['preds'] = ref['education-num'].values + np.random.normal(0, 6, ref.shape[0])

curr.iloc[:2000, 3:5] = np.nan
curr.iloc[:2000, 12] = np.nan

suite = TestSuite(tests=[
    TestShareOfDriftedFeatures(),
    TestNumberOfDriftedFeatures(),
    TestFeatureValueDrift(column_name='education-num'),
    TestFeatureValueDrift(column_name='education')
])

suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_6>
<Cell_7>
suite = TestSuite(tests=[
    NoTargetPerformance(most_important_features=["education-num"]),
])

suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_7>
<Cell_8>
suite = TestSuite(tests=[
    DataDrift(),
])

suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_8>
<Cell_9>
suite = TestSuite(tests=[
    DataStability(),
])

suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_9>
<Cell_10>
suite = TestSuite(tests=[
    DataQuality(),
])

suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_10>
<Cell_11>
import pandas as pd
import numpy as np

from evidently.test_suite import TestSuite

from evidently.tests import TestValueMAE, TestValueRMSE, TestValueMeanError, TestValueMAPE, \
TestValueAbsMaxError, TestValueR2Score
<\Cell_11>
<Cell_12>
from evidently import ColumnMapping
from datetime import datetime
from sklearn.datasets import fetch_openml

data = fetch_openml(name='adult', version=2, as_frame='auto')
df = data.frame

ref = df[:20000]
curr = df[20000:]

curr['target'] = curr['education-num']
curr['preds'] = curr['education-num'].values + np.random.normal(0, 6, curr.shape[0])
ref['target'] = ref['education-num']
ref['preds'] = ref['education-num'].values + np.random.normal(0, 6, ref.shape[0])

curr.iloc[:2000, 3:5] = np.nan
curr.iloc[:2000, 12] = np.nan

suite = TestSuite(tests=[
    TestValueMAE(),
    TestValueRMSE(),
    TestValueMeanError(),
    TestValueMAPE(),
    TestValueAbsMaxError(),
    TestValueR2Score()
])

suite.run(reference_data=ref,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_12>
<Cell_13>
from evidently import ColumnMapping
from datetime import datetime
from sklearn.datasets import fetch_openml

data = fetch_openml(name='adult', version=2, as_frame='auto')
df = data.frame

ref = df[:20000]
curr = df[20000:]

curr['target'] = curr['education-num']
curr['preds'] = curr['education-num'].values + np.random.normal(0, 6, curr.shape[0])
ref['target'] = ref['education-num']
ref['preds'] = ref['education-num'].values + np.random.normal(0, 6, ref.shape[0])

curr.iloc[:2000, 3:5] = np.nan
curr.iloc[:2000, 12] = np.nan

suite = TestSuite(tests=[
    TestValueMAE(),
    TestValueRMSE(),
    TestValueMeanError(),
    TestValueMAPE(),
    TestValueAbsMaxError(),
    TestValueR2Score()
])

suite.run(reference_data=None,
          current_data=curr, column_mapping=ColumnMapping(target='target', prediction='preds'))
suite
<\Cell_13>
<Cell_14>

<\Cell_14>

<Cell_0>
import pandas as pd

from sklearn.datasets import fetch_california_housing

from evidently.dashboard import Dashboard
from evidently.pipeline.column_mapping import ColumnMapping
from evidently.dashboard.tabs import DataDriftTab, NumTargetDriftTab

from evidently.model_profile import Profile
from evidently.model_profile.sections import DataDriftProfileSection
<\Cell_0>
<Cell_1>
dataset = fetch_california_housing(as_frame=True)
df = dataset.frame
<\Cell_1>
<Cell_2>
target = 'MedHouseVal'
prediction = 'prediction'

numerical_features = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup',
                      'Latitude', 'Longitude']
categorical_features = []
features = numerical_features 
<\Cell_2>
<Cell_3>
column_mapping = ColumnMapping()

column_mapping.target = target
column_mapping.prediction = 'prediction'
column_mapping.numerical_features = numerical_features
<\Cell_3>
<Cell_4>
ref_data = df[:15000]
prod_data = df[15000:]
<\Cell_4>
<Cell_5>
data_and_target_drift_dashboard = Dashboard(tabs=[DataDriftTab(), NumTargetDriftTab()])

data_and_target_drift_dashboard.calculate(ref_data.sample(1000, random_state=0), 
                                          prod_data.sample(1000, random_state=0),
                                          column_mapping = column_mapping)

data_and_target_drift_dashboard.show()
<\Cell_5>
<Cell_6>
import numpy as np
from scipy.stats import anderson_ksamp
from evidently.options import DataDriftOptions
from evidently.analyzers.stattests import StatTest
<\Cell_6>
<Cell_7>
def _anderson_stat_test(reference_data: pd.Series, current_data: pd.Series, threshold: float):
    p_value = anderson_ksamp(np.array([reference_data, current_data]))[2]
    return p_value, p_value < threshold

anderson_stat_test = StatTest(
    name="anderson",
    display_name="Anderson test (p_value)",
    func=_anderson_stat_test,
    allowed_feature_types=["num"]
)
<\Cell_7>
<Cell_8>
options = DataDriftOptions(feature_stattest_func=anderson_stat_test, confidence=0.99, 
                           nbinsx=20)
<\Cell_8>
<Cell_9>
data_and_target_drift_dashboard = Dashboard(tabs=[DataDriftTab(), NumTargetDriftTab()], options=[options])
data_and_target_drift_dashboard.calculate(ref_data.sample(1000, random_state=0), 
                                          prod_data.sample(1000, random_state=0), 
                                          column_mapping=column_mapping)
data_and_target_drift_dashboard.show()
<\Cell_9>
<Cell_10>
options = DataDriftOptions(num_target_stattest_func=anderson_stat_test, 
                           confidence={'MedInc':0.99, 'HouseAge': 0.99, 'AveRooms':0.99},
                           nbinsx={'MedInc':15, 'HouseAge': 25, 'AveRooms':20}, 
                           feature_stattest_func={'MedInc':anderson_stat_test, 'HouseAge':anderson_stat_test, 
                                                  'AveRooms':anderson_stat_test}
                          )
<\Cell_10>
<Cell_11>
data_and_target_drift_dashboard = Dashboard(tabs=[DataDriftTab(), NumTargetDriftTab()], options=[options])
data_and_target_drift_dashboard.calculate(ref_data.sample(1000, random_state=0), 
                                          prod_data.sample(1000, random_state=0), 
                                          column_mapping=column_mapping)
data_and_target_drift_dashboard.show()
<\Cell_11>
<Cell_12>
data_drift_profile = Profile(sections=[DataDriftProfileSection()], options=[options])
data_drift_profile.calculate(ref_data.sample(1000, random_state=0), 
                                          prod_data.sample(1000, random_state=0), 
                                          column_mapping=column_mapping)
<\Cell_12>
<Cell_13>
data_drift_profile.json()
<\Cell_13>

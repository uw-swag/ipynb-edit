<Cell_0>
%ls /dev/ttyACM*
<\Cell_0>
<Cell_1>
%matplotlib notebook
import serial
import time
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.animation import FuncAnimation
import pandas as pd
import numpy as np
from datetime import datetime, date
import threading

 
portPath = "/dev/ttyACM0"       # Must match value shown on Arduino IDE
baud = 115200                   # Must match Arduino baud rate
timeout = 5                     # Seconds
filename = str(date.today()) + " data.csv"
max_num_readings = 8
num_signals = 1
 
 
 
def create_serial_obj(portPath, baud_rate, tout):
    """
    Given the port path, baud rate, and timeout value, creates and returns a pyserial object.
    """
    return serial.Serial(portPath, baud_rate, timeout = tout)
<\Cell_1>
<Cell_2>
def read_serial_data(serial):
    """
    Given a pyserial object (serial). Outputs a list of lines read in from the serial port
    """
    #serial.flushInput()
    serial.reset_input_buffer()
    
    serial_data = []
    readings_left = True
    timeout_reached = False
    
    #Send data to start the transfer
    serial.write(1)
    #Wait for the data to be ready
    time.sleep(2)
    
    while readings_left and not timeout_reached:
        serial_line = serial.readline()
        if serial_line == b'':
            timeout_reached = True
        else:
            serial_data.append(serial_line)
            if len(serial_data) == max_num_readings:
                readings_left = False
        
    return serial_data
<\Cell_2>
<Cell_3>
headers = ["PM 0.3","PM 0.5","PM 1.0","PM 2.5","PM 5.0","PM 10.0","Temp","Pressure","Humidity","CO2",
           "BME680 VOC","QM9 VOC","MiCS5524 VOC","CCS811 VOC","Date"]
try:
    dateparse = lambda x: pd.datetime.strptime(x, '%Y-%m-%d %H:%M:%S.%f')
    df = pd.read_csv(filename, parse_dates=['Date'], date_parser=dateparse,index_col=0)
    df
except:
    df = pd.DataFrame() #Create an empty data frame to append to later

#Create a serial port object
serial_obj = create_serial_obj(portPath, baud, timeout)
<\Cell_3>
<Cell_4>
df
<\Cell_4>
<Cell_5>
def is_number(string):
    """
    Given a string returns True if the string represents a number.
    Returns False otherwise.
    """
    try:
        float(string)
        return True
    except ValueError:
        return False
        
def clean_serial_data(data):
    """
    Given a list of serial lines (data). Removes all characters.
    Returns the cleaned list of lists of digits.
    Given something like: ['0.5000,33\r\n', '1.0000,283\r\n']
    Returns: [[0.5,33.0], [1.0,283.0]]
    """
    clean_data = []
    
    for line in data:
        line_data = line.decode("utf-8", "ignore").strip()
        #line_data = re.findall("\d*\.\d*|\d*",line) # Find all digits
        #line_data = [float(element) for element in line_data if is_number(element)] # Convert strings to float
        #line_data = line_data datetime.now()
    clean_data.append(line_data)
        
    return clean_data
<\Cell_5>
<Cell_6>
keep_going = True

def collect_data(sleep_time):
    global df
    global serial_obj
    while keep_going:
        
        serial_data = read_serial_data(serial_obj)
        clean_data =  clean_serial_data(serial_data)
        clean_data_table = [clean_data]
        clean_data_table = pd.DataFrame([sub.split(",") for sub in clean_data])
        clean_data_table['Date'] = [datetime.now()]
        clean_data_table.columns = headers
        df = df.append(clean_data_table)
        
        time.sleep(sleep_time) #Seconds
    return 1 #Return positive if success
<\Cell_6>
<Cell_7>
def animate(i):
    global df
    global plt
    global serial_obj
    
#    serial_data = read_serial_data(serial_obj)
#    clean_data =  clean_serial_data(serial_data)
#    clean_data_table = [clean_data]
#    clean_data_table = pd.DataFrame([sub.split(",") for sub in clean_data])
#    clean_data_table['Date'] = [datetime.now()]
#    clean_data_table.columns = headers
#    df = df.append(clean_data_table)
    
    plot_df = df
    
    x = plot_df['Date']
    y1 = plot_df['PM 0.3']
    y2 = plot_df['PM 0.5']
    y3 = plot_df['PM 1.0']
    y4 = plot_df['PM 2.5']
    y5 = plot_df['PM 5.0']
    y6 = plot_df['PM 10.0']

    # plot
    plt.cla()
    plt.plot(x,y1, label='PM 0.3')
    plt.plot(x,y2, label='PM 0.5')
    plt.plot(x,y3, label='PM 1.0')
    plt.plot(x,y4, label='PM 2.5')
    plt.plot(x,y5, label='PM 5.0')
    plt.plot(x,y6, label='PM 10.0')

    plt.legend()
    # beautify the x-labels
    plt.gcf().autofmt_xdate()
    plt.xlabel('Time')
    plt.ylabel('Particulate matter (Âµm)')
    plt.title("Indoor Air Quality")
    #plt.ylim(ymin=0,ymax=85)

<\Cell_7>
<Cell_8>
keep_going = True
t1=threading.Thread(target=collect_data, args=[1.0])
t1.start()
<\Cell_8>
<Cell_9>
df.info()
<\Cell_9>
<Cell_10>
t1
<\Cell_10>
<Cell_11>
keep_going = False
t1.join()
<\Cell_11>
<Cell_12>
ani = FuncAnimation(plt.gcf(), animate,interval=1000)

plt.show()
<\Cell_12>
<Cell_13>
serial_data = read_serial_data(serial_obj)
clean_data =  clean_serial_data(serial_data)
clean_data_table = [clean_data]
clean_data_table = pd.DataFrame([sub.split(",") for sub in clean_data])
clean_data_table['Date'] = [datetime.now()]
clean_data_table.columns = headers

<\Cell_13>
<Cell_14>
df = df.append(clean_data_table)
<\Cell_14>
<Cell_15>
animate(1)
<\Cell_15>
<Cell_16>
try:
    df[headers] #Make sure the DataFrame is in the correct order
    df.to_csv(filename,names=headers)
except:
    df = pd.DataFrame() #Create an empty data frame to append to later

df[headers] #Make sure the DataFrame is in the correct order
df.to_csv(filename,names=headers)
df
<\Cell_16>
<Cell_17>
df[headers[0:14]]
<\Cell_17>

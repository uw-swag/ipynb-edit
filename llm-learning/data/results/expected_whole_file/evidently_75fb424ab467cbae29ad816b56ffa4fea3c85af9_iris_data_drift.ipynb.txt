<Cell_0>
import pandas as pd
import numpy as np

from sklearn import datasets, model_selection, neighbors

from evidently.dashboard import Dashboard
from evidently.tabs import DriftTab, CatTargetDriftTab, ClassificationPerformanceTab
<\Cell_0>
<Cell_1>
iris = datasets.load_iris()
<\Cell_1>
<Cell_2>
iris_frame = pd.DataFrame(iris.data, columns = iris.feature_names)
<\Cell_2>
<Cell_3>
iris_data_drift_report = Dashboard(iris_frame, iris_frame, column_mapping = None, tabs=[DriftTab])
<\Cell_3>
<Cell_4>
iris_data_drift_report.show()
<\Cell_4>
<Cell_5>
iris_data_drift_report.save('reports/iris_data_drift.html')
<\Cell_5>
<Cell_6>
iris_frame['target'] = iris.target
<\Cell_6>
<Cell_7>
iris_data_and_target_drift_report = Dashboard(iris_frame[:75], iris_frame[75:], 
                                              column_mapping = None, tabs=[DriftTab, CatTargetDriftTab])
<\Cell_7>
<Cell_8>
iris_data_and_target_drift_report.show()
<\Cell_8>
<Cell_9>
iris_data_and_target_drift_report.save('reports/iris_data_and_target_drift.html')
<\Cell_9>
<Cell_10>
iris_frame = pd.DataFrame(iris.data, columns = iris.feature_names)
<\Cell_10>
<Cell_11>
reference, production, y_train, y_test = model_selection.train_test_split(iris_frame, 
                                                                          iris.target, 
                                                                          random_state=0)
<\Cell_11>
<Cell_12>
model = neighbors.KNeighborsClassifier(n_neighbors=1)
<\Cell_12>
<Cell_13>
model.fit(reference, y_train)
<\Cell_13>
<Cell_14>
train_predictions = model.predict(reference)
test_predictions = model.predict(production)
<\Cell_14>
<Cell_15>
reference['target'] = y_train
reference['prediction'] = train_predictions

production['target'] = y_test
production['prediction'] = test_predictions
<\Cell_15>
<Cell_16>
reference.target = reference.target.apply(lambda x: iris.target_names[x])
reference.prediction = reference.prediction.apply(lambda x: iris.target_names[x])

production.target = production.target.apply(lambda x: iris.target_names[x])
production.prediction = production.prediction.apply(lambda x: iris.target_names[x])
<\Cell_16>
<Cell_17>
iris_column_mapping = {}

iris_column_mapping['target'] = 'target'
iris_column_mapping['prediction'] = 'prediction'
iris_column_mapping['numerical_features'] = iris.feature_names
<\Cell_17>
<Cell_18>
iris_drift = Dashboard(reference, production, column_mapping = iris_column_mapping, 
                       tabs=[ClassificationPerformanceTab])
iris_drift.show()
<\Cell_18>
<Cell_19>
iris_drift.save('reports/iris_classification_performance_test.html')
<\Cell_19>

<Cell_0>
try:
    import evidently
except:
    !pip install git+https://github.com/evidentlyai/evidently.git
<\Cell_0>
<Cell_1>
import pandas as pd
import numpy as np
import requests
import zipfile
import io

from datetime import datetime, time
from sklearn import datasets, ensemble

from evidently import ColumnMapping
from evidently.report import Report
from evidently.metric_preset import DataDriftPreset, TargetDriftPreset, RegressionPreset
<\Cell_1>
<Cell_2>
content = requests.get("https://archive.ics.uci.edu/static/public/275/bike+sharing+dataset.zip").content
with zipfile.ZipFile(io.BytesIO(content)) as arc:
    raw_data = pd.read_csv(arc.open("hour.csv"), header=0, sep=',', parse_dates=['dteday'], index_col='dteday')
<\Cell_2>
<Cell_3>
raw_data.index = raw_data.apply(
    lambda row: datetime.combine(row.name, time(hour=int(row['hr']))), axis = 1)
<\Cell_3>
<Cell_4>
raw_data.head()
<\Cell_4>
<Cell_5>
target = 'cnt'
prediction = 'prediction'
numerical_features = ['temp', 'atemp', 'hum', 'windspeed', 'hr', 'weekday']
categorical_features = ['season', 'holiday', 'workingday']
<\Cell_5>
<Cell_6>
reference = raw_data.loc['2011-01-01 00:00:00':'2011-01-28 23:00:00']
current = raw_data.loc['2011-01-29 00:00:00':'2011-02-28 23:00:00']
<\Cell_6>
<Cell_7>
reference.head()
<\Cell_7>
<Cell_8>
regressor = ensemble.RandomForestRegressor(random_state = 0, n_estimators = 50)
<\Cell_8>
<Cell_9>
regressor.fit(reference[numerical_features + categorical_features], reference[target])
<\Cell_9>
<Cell_10>
ref_prediction = regressor.predict(reference[numerical_features + categorical_features])
current_prediction = regressor.predict(current[numerical_features + categorical_features])
<\Cell_10>
<Cell_11>
reference['prediction'] = ref_prediction
current['prediction'] = current_prediction
<\Cell_11>
<Cell_12>
column_mapping = ColumnMapping()

column_mapping.target = target
column_mapping.prediction = prediction
column_mapping.numerical_features = numerical_features
column_mapping.categorical_features = categorical_features
<\Cell_12>
<Cell_13>
regression_perfomance = Report(metrics=[RegressionPreset()])
regression_perfomance.run(current_data=reference, reference_data=None, column_mapping=column_mapping)
<\Cell_13>
<Cell_14>
regression_perfomance.show()
<\Cell_14>
<Cell_15>
#regression_perfomance.save('reports/regression_performance_at_training.html')
<\Cell_15>
<Cell_16>
regression_perfomance = Report(metrics=[RegressionPreset()])
regression_perfomance.run(current_data=current.loc['2011-01-29 00:00:00':'2011-02-07 23:00:00'], 
                          reference_data=reference,
                          column_mapping=column_mapping)

regression_perfomance.show()
<\Cell_16>
<Cell_17>
#regression_perfomance.save('reports/regression_performance_after_week1.html')
<\Cell_17>
<Cell_18>
target_drift = Report(metrics=[TargetDriftPreset()])
target_drift.run(current_data=current.loc['2011-01-29 00:00:00':'2011-02-07 23:00:00'],
                 reference_data=reference,
                 column_mapping=column_mapping)

target_drift.show()
<\Cell_18>
<Cell_19>
#target_drift.save('reports/target_drift_after_week1.html')
<\Cell_19>
<Cell_20>
regression_perfomance = Report(metrics=[RegressionPreset()])
regression_perfomance.run(current_data=current.loc['2011-02-07 00:00:00':'2011-02-14 23:00:00'], 
                          reference_data=reference,
                          column_mapping=column_mapping)

regression_perfomance.show()
<\Cell_20>
<Cell_21>
#regression_perfomance.save('reports/regression_performance_after_week2.html')
<\Cell_21>
<Cell_22>
target_drift = Report(metrics=[TargetDriftPreset()])
target_drift.run(current_data=current.loc['2011-02-07 00:00:00':'2011-02-14 23:00:00'],
                 reference_data=reference,
                 column_mapping=column_mapping)

target_drift.show()
<\Cell_22>
<Cell_23>
#target_drift.save('reports/target_drift_after_week2.html')
<\Cell_23>
<Cell_24>
regression_perfomance = Report(metrics=[RegressionPreset()])
regression_perfomance.run(current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'], 
                          reference_data=reference,
                          column_mapping=column_mapping)

regression_perfomance.show()
<\Cell_24>
<Cell_25>
#regression_perfomance.save('reports/regression_performance_after_week3.html')
<\Cell_25>
<Cell_26>
target_drift = Report(metrics=[TargetDriftPreset()])
target_drift.run(current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'],
                 reference_data=reference,
                 column_mapping=column_mapping)

target_drift.show()
<\Cell_26>
<Cell_27>
#target_drift.save('reports/target_drift_after_week3.html')
<\Cell_27>
<Cell_28>
column_mapping = ColumnMapping()

column_mapping.numerical_features = numerical_features
<\Cell_28>
<Cell_29>
data_drift = Report(metrics = [DataDriftPreset()])
data_drift.run(current_data = current.loc['2011-01-29 00:00:00':'2011-02-07 23:00:00'],
               reference_data = reference,
               column_mapping=column_mapping)

data_drift.show()
<\Cell_29>
<Cell_30>
#data_drift.save("reports/data_drift_dashboard_after_week1.html")
<\Cell_30>

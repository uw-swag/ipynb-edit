<Cell_0>
%matplotlib inline
<\Cell_0>
<Cell_1>
import numpy as np
import matplotlib.pyplot as plt
<\Cell_1>
<Cell_2>
np.random.seed(12345)
<\Cell_2>
<Cell_3>
# help(np.set_printoptions)
<\Cell_3>
<Cell_4>
my_arr = np.arange(1000000)
my_list = list(range(1000000))
my_arr
<\Cell_4>
<Cell_5>
%time for _ in range(10): my_arr2 = my_arr * 2
%time for _ in range(10): my_list2 = [x * 2 for x in my_list]
<\Cell_5>
<Cell_6>
# Generate some random data
data = np.random.randn(2, 3)

<\Cell_6>
<Cell_7>
print(data * 10)
data + data
<\Cell_7>
<Cell_8>
print(data.shape)
data.dtype
<\Cell_8>
<Cell_9>
data1 = [6, 7.5, 8, 0, 1]
arr1 = np.array(data1)
arr1
<\Cell_9>
<Cell_10>
data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)
arr2
<\Cell_10>
<Cell_11>

<\Cell_11>
<Cell_12>

<\Cell_12>
<Cell_13>
list1 = [1,2,'a']
npArray = np.array(list1)
npArray
<\Cell_13>
<Cell_14>

<\Cell_14>
<Cell_15>

<\Cell_15>
<Cell_16>
print(arr2.ndim)
arr2.shape
<\Cell_16>
<Cell_17>
print(arr1.dtype)
print(arr2.dtype)
<\Cell_17>
<Cell_18>
print(np.zeros(10))
np.zeros((3, 6))
np.empty((2, 3, 2))
<\Cell_18>
<Cell_19>
print(np.arange(15))
<\Cell_19>
<Cell_20>
arr = np.array([[1., 2., 3.], [4., 5., 6.]])
arr
arr * arr
arr - arr
<\Cell_20>
<Cell_21>
1 / arr
arr ** 0.5
<\Cell_21>
<Cell_22>
print(arr)
arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])
arr2
arr2 > arr
<\Cell_22>
<Cell_23>
arr = np.arange(10)
arr
arr[5]
arr[5:8]
arr[5:8] = 12
arr
<\Cell_23>
<Cell_24>
arr_slice = arr[5:8]
arr_slice
<\Cell_24>
<Cell_25>
arr_slice[1] = 12345
arr
<\Cell_25>
<Cell_26>
arr_slice[:] = 64
arr
<\Cell_26>
<Cell_27>
arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
arr2d[2]
<\Cell_27>
<Cell_28>
arr2d[0][2]
arr2d[0, 2]
<\Cell_28>
<Cell_29>
arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
arr3d
<\Cell_29>
<Cell_30>
arr3d[0]
<\Cell_30>
<Cell_31>
old_values = arr3d[0].copy()
arr3d[0] = 42
arr3d
arr3d[0] = old_values
arr3d
<\Cell_31>
<Cell_32>
arr3d[1, 0]
<\Cell_32>
<Cell_33>
x = arr3d[1]
x
x[0]
<\Cell_33>
<Cell_34>
arr
arr[1:6]
<\Cell_34>
<Cell_35>
print(arr2d)
arr2d[:2]
<\Cell_35>
<Cell_36>
arr2d[:2, 1:]
<\Cell_36>
<Cell_37>
arr2d[1, :2]
<\Cell_37>
<Cell_38>
arr2d[:2, 2]
<\Cell_38>
<Cell_39>
arr2d[:, :1]
<\Cell_39>
<Cell_40>
arr2d[:2, 1:] = 0
arr2d
<\Cell_40>
<Cell_41>
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np.random.randn(7, 4)
names
data
<\Cell_41>
<Cell_42>
names == 'Bob'
<\Cell_42>
<Cell_43>
data[names == 'Bob']
<\Cell_43>
<Cell_44>
print(names != 'Bob')
data[~(names == 'Bob')]
<\Cell_44>
<Cell_45>
cond = names == 'Bob'
data[~cond]
<\Cell_45>
<Cell_46>
data[data < 0] = 0
data
<\Cell_46>
<Cell_47>
arr = np.arange(15).reshape((3, 5))
print(arr)
arr.T
<\Cell_47>
<Cell_48>
arr = np.random.randn(6, 3)
arr
np.dot(arr, arr)
<\Cell_48>
<Cell_49>
arr = np.arange(16).reshape((2, 2, 4))
arr
arr.transpose((1, 0, 2))
<\Cell_49>
<Cell_50>
arr.swapaxes(1, 2)
<\Cell_50>
<Cell_51>
xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])
yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])
cond = np.array([True, False, True, True, False])
<\Cell_51>
<Cell_52>
result = [(x if c else y)
          for x, y, c in zip(xarr, yarr, cond)]
result
<\Cell_52>
<Cell_53>
result = np.where(cond, xarr, yarr)
result
<\Cell_53>
<Cell_54>
arr = np.random.randn(5, 4)
print(arr)
# arr.mean()
# np.mean(arr)
# arr.sum()
<\Cell_54>
<Cell_55>
print(arr.sum(axis=1))
print(arr.sum(axis=0))
<\Cell_55>
<Cell_56>
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7])
arr.cumsum()
<\Cell_56>
<Cell_57>
arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
arr
arr.cumsum(axis=0)
arr.cumprod(axis=1)
<\Cell_57>
<Cell_58>
arr = np.random.randn(100)
(arr > 0).sum() # Number of positive values
<\Cell_58>
<Cell_59>
bools = np.array([False, False, False, False])
print(bools.any())
print("\n")
print(bools.all())
<\Cell_59>
<Cell_60>
arr = np.random.randn(6)
print(arr)
arr.sort()
print(arr)
<\Cell_60>
<Cell_61>
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print(np.unique(names))
ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])
np.unique(ints)
<\Cell_61>
<Cell_62>
sorted(set(names))
<\Cell_62>

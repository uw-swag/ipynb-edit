<Cell_0>
from redpitaya.overlay.mercury import mercury as overlay
import IPython.display as ipd
import matplotlib.pyplot as plt

#Audio processing requirements
import numpy as np
from scipy.io.wavfile import write

#Edge Impulse requirements
import json
import time, hmac, hashlib
import requests
import re, socket
import math

fpga = overlay()
<\Cell_0>
<Cell_1>
in2 = fpga.osc(1, 1.0)
<\Cell_1>
<Cell_2>
# data rate decimation 
in2.decimation = 41667 #125 Msps / 41667 = 30 Ksps

# trigger timing [sample periods]
N = in2.buffer_size
in2.trigger_pre  = 0
in2.trigger_post = N

# disable hardware trigger sources - the Jupyter notebook will trigger the start of audio recording
in2.trig_src = 0
<\Cell_2>
<Cell_3>
def record_audio():
    # synchronization and trigger sources are the default,
    # which is the module itself
    in2.reset()
    in2.start()
    in2.trigger()
    print ('Recording started')
    # wait for data
    while (in2.status_run()): pass
    print ('Recording complete')
    data = in2.data(N)
    return data[1:] #Remove first sample as it maybe zero

audio_data_returned = record_audio()
<\Cell_3>
<Cell_4>
def display_audio(audio_data,sr = 3000): #default sample rate 3 Ksps
    return ipd.Audio(audio_data, rate=sr) # load a NumPy array

python_display_audio = display_audio(audio_data_returned, sr = 3000)
python_display_audio
<\Cell_4>
<Cell_5>
def plot_audio(audio_data):
    # show the part of the buffer requested by pre/post trigger timing - in this example the whole buffer.
    plt.plot(audio_data_returned)
    plt.show()

plot_audio(audio_data_returned)
<\Cell_5>
<Cell_6>
def save_audio(audio_data, file, sr = 3000): #default sample rate 3 Ksps
    write("float_wave_test_raw.wav", sr, audio_data)

# Add the files you want to upload to Edge Impulse
files = ['float_wave_test_raw.wav']
file = files[0] #save the first one
save_audio(audio_data_returned, file, sr = 3000)
<\Cell_6>
<Cell_7>
# Install requests via: `pip3 install requests`
import requests
import os
from app_keys import * #Import personal keys for the Edge Impulse project

def upload_audio2edge_impulse(files, label = 'red-pitaya'): # Replace the label with your own.
    
    # Upload the file to Edge Impulse using the API, and print the response.
    res = requests.post(url='https://ingestion.edgeimpulse.com/api/training/files',
                        headers={
                            'x-label': label,
                            'x-api-key': api_key,
                        },
                        # Creating the data payload for the request.
                        files=(('data', (os.path.basename(i), open(
                            i, 'rb'), 'audio/wav')) for i in files)
                        )
    
    if (res.status_code == 200):
        print('Uploaded file(s) to Edge Impulse\n', res.status_code, res.content)
    else:
        print('Failed to upload file(s) to Edge Impulse\n',
              res.status_code, res.content)

upload_audio2edge_impulse(files, label = 'red-pitaya')
<\Cell_7>
<Cell_8>
audio_data_returned = record_audio()

python_display_audio = display_audio(audio_data_returned, sr = 3000)

plot_audio(audio_data_returned)

# Add the files you want to upload to Edge Impulse
files = ['float_wave_test_raw.wav']
file = files[0] #save the first one
save_audio(audio_data_returned, file, sr = 3000)

upload_audio2edge_impulse(label = 'background-noise')
python_display_audio
<\Cell_8>
<Cell_9>
audio_data_returned = record_audio()
save_audio(audio_data_returned, file, sr = 3000)
upload_audio2edge_impulse(files, label = 'red-pitaya')
<\Cell_9>

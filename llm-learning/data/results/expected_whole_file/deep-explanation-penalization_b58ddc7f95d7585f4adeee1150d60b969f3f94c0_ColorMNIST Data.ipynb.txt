<Cell_0>
import torch
import torchvision
import torchvision.datasets as datasets
import sys
import numpy as np
import torch.utils.data as utils
import torch
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
sys.path.append("../../Dataset-REPAIR")
from utils.datasets import ColoredDataset
import pickle as pkl

from os.path import join as oj
import matplotlib.pyplot as plt
%matplotlib inline
<\Cell_0>
<Cell_1>
save_path = "../results_for_export"
<\Cell_1>
<Cell_2>
from colour import Color
red = Color("red")
colors = list(red.range_to(Color("purple"),10))
colors = [x.get_rgb() for x in colors]
<\Cell_2>
<Cell_3>
colors = np.asarray(colors)[:,:, None, None]
# colors /=colors.sum(axis =1)[:, None]
with open( "colors.pkl", 'wb') as f:
    pkl.dump(colors, f)
  
<\Cell_3>
<Cell_4>
x_train = np.load(oj("../data/ColorMNIST", "train_x.npy"))
y_train = np.load(oj("../data/ColorMNIST", "train_y.npy"))
<\Cell_4>
<Cell_5>
x_test = np.load(oj("../data/ColorMNIST", "test_x.npy"))
y_test = np.load(oj("../data/ColorMNIST", "test_y.npy"))
<\Cell_5>
<Cell_6>
fig, axes = plt.subplots(nrows= 2, figsize = (20, 6))
indices = []
for i in range(10):
    indices.append(np.where(y_train ==i)[0][0])
ex_imgs = np.hstack(x_train[np.asarray(indices)].swapaxes(1,3).swapaxes(1,2)) +1
ex_imgs/=2
axes[0].imshow(ex_imgs);
axes[0].set_title("Training set", fontsize = 30)
indices = []
for i in range(10):
    indices.append(np.where(y_test ==i)[0][0])
ex_imgs = np.hstack(x_test[np.asarray(indices)].swapaxes(1,3).swapaxes(1,2)) +1
ex_imgs/=2
axes[1].imshow(ex_imgs);
axes[1].set_xticks([])
axes[1].set_yticks([])
axes[0].set_xticks([])
axes[0].set_yticks([])
axes[1].set_title("Test set", fontsize = 30)
fig.savefig(oj(save_path, "ColorMNIST_examples"))

<\Cell_6>
<Cell_7>

blob = np.zeros((28,28))
blob[:2, :2 ] =1
blob[-2:, :2] = 1
blob[:2, -2: ] =1
blob[-2:, -2:] = 1
<\Cell_7>
<Cell_8>
plt.imshow(blob)
<\Cell_8>
<Cell_9>
colors = np.linspace(10, 255, num =10)[::-1]
<\Cell_9>
<Cell_10>
colors
<\Cell_10>
<Cell_11>
colors = np.linspace(10, 255, num =10)
<\Cell_11>
<Cell_12>
colors
<\Cell_12>
<Cell_13>
x_train = np.load(oj("../data/ColorMNIST", "train_x_decoy.npy"))
y_train = np.load(oj("../data/ColorMNIST", "train_y.npy"))
<\Cell_13>
<Cell_14>
y_train[2]
<\Cell_14>
<Cell_15>
x_train[3][0,0,0]
<\Cell_15>
<Cell_16>
plt.imshow(x_train[3][0])
<\Cell_16>
<Cell_17>
x_train[2][0,-1,-1]
<\Cell_17>
<Cell_18>
colors = np.linspace(10, 255, num =10)
<\Cell_18>
<Cell_19>
colors
<\Cell_19>
<Cell_20>
x_test = np.load(oj("../data/ColorMNIST", "test_x_decoy.npy"))
y_test = np.load(oj("../data/ColorMNIST", "test_y.npy"))
<\Cell_20>
<Cell_21>
x_test[5][0,0,0]
<\Cell_21>
<Cell_22>
np.random.choice(255)
<\Cell_22>
<Cell_23>
plt.imshow(x_test[5][0])
<\Cell_23>
<Cell_24>
y_test
<\Cell_24>
<Cell_25>
train_x_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "train_x_decoy.npy")))
train_y_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "train_y.npy"))).type(torch.int64)
<\Cell_25>
<Cell_26>
plt.imshow(train_x_tensor[0,0])
<\Cell_26>
<Cell_27>

<\Cell_27>
<Cell_28>
train_x_tensor.numpy()
<\Cell_28>
<Cell_29>
test_x_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "test_x_decoy.npy")))
test_y_tensor = torch.Tensor(np.load(oj("../data/ColorMNIST", "test_y.npy"))).type(torch.int64)
<\Cell_29>
<Cell_30>
plt.imshow(test_x_tensor[0,0])
<\Cell_30>
<Cell_31>

<\Cell_31>

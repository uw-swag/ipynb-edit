<Cell_0>
#Import of the particular libraries 
import math
import numpy as np
import os 
import pandas as pd
<\Cell_0>
<Cell_1>
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from catboost import CatBoostClassifier
<\Cell_1>
<Cell_2>
from evidently.dashboard import Dashboard
from evidently.tabs import ProbClassificationPerformanceTab
from evidently.pipeline.column_mapping import ColumnMapping
<\Cell_2>
<Cell_3>
DATA_DIR = "ibm-hr-analytics/" #full path to directory with the input data 
              
dataset_path = os.path.join(DATA_DIR, "WA_Fn-UseC_-HR-Employee-Attrition.csv")
<\Cell_3>
<Cell_4>
dataset = pd.read_csv(dataset_path, sep = ',', header = 0)
<\Cell_4>
<Cell_5>
dataset.head()
<\Cell_5>
<Cell_6>
dataset.describe()
<\Cell_6>
<Cell_7>
target_name = 'Attrition'
<\Cell_7>
<Cell_8>
numerique_features = ['Age', 'DailyRate', 'DistanceFromHome', 'Education', 'EnvironmentSatisfaction',
                      'HourlyRate', 'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome',
                      'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike', 'PerformanceRating',
                      'RelationshipSatisfaction','StockOptionLevel', 'TotalWorkingYears',
                      'TrainingTimesLastYear', 'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole',
                      'YearsSinceLastPromotion', 'YearsWithCurrManager'
                     ]
<\Cell_8>
<Cell_9>
categorical_features = ['BusinessTravel', 'Department', 'EducationField', 'Gender',
                        'JobRole', 'MaritalStatus', 'OverTime'
                       ]
<\Cell_9>
<Cell_10>
processed_dataset = dataset.copy(deep = True)
<\Cell_10>
<Cell_11>
processed_dataset.drop(columns = ['EmployeeCount', 'StandardHours', 'Over18'], inplace = True)
<\Cell_11>
<Cell_12>
processed_dataset.BusinessTravel.value_counts()
<\Cell_12>
<Cell_13>
business_travel_dummies = pd.get_dummies(processed_dataset.BusinessTravel, prefix = 'b_travel')
processed_dataset = pd.concat([processed_dataset, business_travel_dummies], axis=1)
<\Cell_13>
<Cell_14>
dataset.Department.value_counts()
<\Cell_14>
<Cell_15>
department_dummies = pd.get_dummies(processed_dataset.Department, prefix = 'department')
processed_dataset = pd.concat([processed_dataset, department_dummies], axis=1)
<\Cell_15>
<Cell_16>
dataset.EducationField.value_counts()
<\Cell_16>
<Cell_17>
edu_field_dummies = pd.get_dummies(processed_dataset.Department, prefix = 'edu_field')
processed_dataset = pd.concat([processed_dataset, edu_field_dummies], axis=1)
<\Cell_17>
<Cell_18>
dataset.Gender.value_counts()
<\Cell_18>
<Cell_19>
processed_dataset['gender_bin'] = processed_dataset.Gender.apply(
    lambda x : 0 if x == 'Male' else 1 if x == 'Female' else -1)
<\Cell_19>
<Cell_20>
dataset.JobRole.value_counts()
<\Cell_20>
<Cell_21>
job_role_dummies = pd.get_dummies(processed_dataset.JobRole, prefix = 'job_role')
processed_dataset = pd.concat([processed_dataset, job_role_dummies], axis=1)
<\Cell_21>
<Cell_22>
dataset.MaritalStatus.value_counts()
<\Cell_22>
<Cell_23>
marital_dummies = pd.get_dummies(processed_dataset.MaritalStatus, prefix = 'marital')
processed_dataset = pd.concat([processed_dataset, marital_dummies], axis=1)
<\Cell_23>
<Cell_24>
dataset.OverTime.value_counts()
<\Cell_24>
<Cell_25>
overtime_dummies = pd.get_dummies(processed_dataset.OverTime, prefix = 'overtime')
processed_dataset = pd.concat([processed_dataset, overtime_dummies], axis=1)
<\Cell_25>
<Cell_26>
#drop initial categorical features
processed_dataset.drop(columns = categorical_features, inplace = True)
<\Cell_26>
<Cell_27>
processed_dataset['target'] = processed_dataset.Attrition.apply(
    lambda x : 0 if x == 'No' else 1 if x == 'Yes' else -1)
<\Cell_27>
<Cell_28>
features = ['Age','DailyRate', 'DistanceFromHome', 'Education',
       'EmployeeNumber', 'EnvironmentSatisfaction', 'HourlyRate',
       'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome',
       'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike',
       'PerformanceRating', 'RelationshipSatisfaction', 'StockOptionLevel',
       'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance',
       'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion',
       'YearsWithCurrManager', 'b_travel_Non-Travel',
       'b_travel_Travel_Frequently', 'b_travel_Travel_Rarely',
       'department_Human Resources', 'department_Research & Development',
       'department_Sales', 'edu_field_Human Resources',
       'edu_field_Research & Development', 'edu_field_Sales', 'gender_bin',
       'job_role_Healthcare Representative', 'job_role_Human Resources',
       'job_role_Laboratory Technician', 'job_role_Manager',
       'job_role_Manufacturing Director', 'job_role_Research Director',
       'job_role_Research Scientist', 'job_role_Sales Executive',
       'job_role_Sales Representative', 'marital_Divorced', 'marital_Married',
       'marital_Single', 'overtime_No', 'overtime_Yes',]
<\Cell_28>
<Cell_29>
RANDOM_STATE = 1603
<\Cell_29>
<Cell_30>
train_data, test_data, train_y, test_y = train_test_split(processed_dataset[features], processed_dataset.target,
                                                   random_state = RANDOM_STATE, test_size = 0.25,
                                                   stratify = processed_dataset.target)
<\Cell_30>
<Cell_31>
rf = RandomForestClassifier(n_estimators=500, n_jobs = -1, random_state = 11)
<\Cell_31>
<Cell_32>
rf.fit(train_data[features], train_y)
<\Cell_32>
<Cell_33>
train_probas = pd.DataFrame(rf.predict_proba(train_data[features]))
train_probas.columns = ['no', 'yes']
test_probas = pd.DataFrame(rf.predict_proba(test_data[features]))
test_probas.columns = ['no', 'yes']
<\Cell_33>
<Cell_34>
train_data.reset_index(inplace=True, drop=True)
train_data['Attrition'] = ['no' if x == 0 else 'yes' for x in train_y]
rf_merged_train = pd.concat([train_data, train_probas], axis = 1)

test_data.reset_index(inplace=True, drop=True)
test_data['Attrition'] = ['no' if x == 0 else 'yes' for x in test_y]
rf_merged_test = pd.concat([test_data, test_probas], axis = 1)
<\Cell_34>
<Cell_35>
column_mapping = ColumnMapping()

column_mapping.target = 'Attrition'
column_mapping.prediction = ['yes', 'no']

column_mapping.numerical_features = ['Age','DailyRate', 'DistanceFromHome', 'Education',
       'EmployeeNumber', 'EnvironmentSatisfaction', 'HourlyRate',
       'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome',
       'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike',
       'PerformanceRating', 'RelationshipSatisfaction', 'StockOptionLevel',
       'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance',
       'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion',
       'YearsWithCurrManager']

column_mapping.categorical_features = ['b_travel_Non-Travel',
       'b_travel_Travel_Frequently', 'b_travel_Travel_Rarely',
       'department_Human Resources', 'department_Research & Development',
       'department_Sales', 'edu_field_Human Resources',
       'edu_field_Research & Development', 'edu_field_Sales', 'gender_bin',
       'job_role_Healthcare Representative', 'job_role_Human Resources',
       'job_role_Laboratory Technician', 'job_role_Manager',
       'job_role_Manufacturing Director', 'job_role_Research Director',
       'job_role_Research Scientist', 'job_role_Sales Executive',
       'job_role_Sales Representative', 'marital_Divorced', 'marital_Married',
       'marital_Single', 'overtime_No', 'overtime_Yes']
<\Cell_35>
<Cell_36>
dashboard = Dashboard(tabs=[ProbClassificationPerformanceTab()])
dashboard.calculate(rf_merged_train, rf_merged_test, column_mapping = column_mapping)
dashboard.show()
<\Cell_36>
<Cell_37>
#dashboard.save('ibm_hr_attrition_baseline_performance.html')
<\Cell_37>
<Cell_38>
cat = CatBoostClassifier(random_state= 11, iterations=1600, learning_rate=0.008, class_weights = {0:1, 1:6})
<\Cell_38>
<Cell_39>
cat.fit(train_data[features], train_y)
<\Cell_39>
<Cell_40>
train_probas = pd.DataFrame(cat.predict_proba(train_data[features]))
train_probas.columns = ['no', 'yes']
test_probas = pd.DataFrame(cat.predict_proba(test_data[features]))
test_probas.columns = ['no', 'yes']
<\Cell_40>
<Cell_41>
train_data.reset_index(inplace=True, drop=True)
train_data['target'] = ['no' if x == 0 else 'yes' for x in train_y]
cat_merged_train = pd.concat([train_data, train_probas], axis = 1)

test_data.reset_index(inplace=True, drop=True)
test_data['target'] = ['no' if x == 0 else 'yes' for x in test_y]
cat_merged_test = pd.concat([test_data, test_probas], axis = 1)
<\Cell_41>
<Cell_42>
dashboard.calculate(cat_merged_train, cat_merged_test, column_mapping = column_mapping)
dashboard.show()
<\Cell_42>
<Cell_43>
#dashboard.save('ibm_hr_attrition_better_model_performance.html')
<\Cell_43>
<Cell_44>
dashboard.calculate(rf_merged_test, cat_merged_test, column_mapping = column_mapping)
dashboard.show()
<\Cell_44>
<Cell_45>
#dashboard.save('ibm_hr_attrition_model_comparison.html')
<\Cell_45>

<Cell_0>
try:
    import evidently
except:
    !npm install -g yarn
    !pip install git+https://github.com/evidentlyai/evidently.git
<\Cell_0>
<Cell_1>
import pandas as pd
import numpy as np

from datetime import datetime
from sklearn.datasets import fetch_openml

from evidently import ColumnMapping
from evidently.test_suite import TestSuite
from evidently.tests import *

from evidently.test_preset import NoTargetPerformance, DataQuality, DataStability, DataDrift
<\Cell_1>
<Cell_2>
data = fetch_openml(name='adult', version=2, as_frame='auto')
df = data.frame

#target and prediction
df['target'] = df['education-num']
df['prediction'] = df['education-num'].values + np.random.normal(0, 6, df.shape[0])

#reference data
ref = df[~df.education.isin(['Some-college', 'HS-grad', 'Bachelors'])]

#current data
curr = df[df.education.isin(['Some-college', 'HS-grad', 'Bachelors'])]
<\Cell_2>
<Cell_3>
dataset_tests = TestSuite(tests=[
    TestNumberOfColumns(),
    TestNumberOfRows(),
    TestNumberOfConstantColumns(),
    TestNumberOfDuplicatedColumns(),
    TestNumberOfDuplicatedRows(),
    TestColumnsType(),
    TestTargetFeaturesCorrelations(),
    TestHighlyCorrelatedFeatures(),
    TestShareOfDriftedFeatures() ,
    TestNumberOfDriftedFeatures(),
])

dataset_tests.run(reference_data=ref, current_data=curr)
dataset_tests
<\Cell_3>
<Cell_4>
dataset_tests.json()
<\Cell_4>
<Cell_5>
dataset_tests.as_dict()
<\Cell_5>
<Cell_6>
feature_level_tests = TestSuite(tests=[
    TestMeanInNSigmas(column_name='hours-per-week'),
    TestShareOfOutRangeValues(column_name='hours-per-week'),
    TestColumnNANShare(column_name='education'),
    TestFeatureValueDrift(column_name='education')
])

feature_level_tests.run(reference_data=ref, current_data=curr)
feature_level_tests
<\Cell_6>
<Cell_7>
feature_level_tests = TestSuite(tests=[
    TestMeanInNSigmas(column_name='hours-per-week', n_sigmas=3),
    TestShareOfOutRangeValues(column_name='hours-per-week', lte=0),
    TestColumnNANShare(column_name='education', lt=0.2),
])

feature_level_tests.run(reference_data=ref, current_data=curr)
feature_level_tests
<\Cell_7>
<Cell_8>
no_target_performance = TestSuite(tests=[
    NoTargetPerformance(most_important_features=['education-num', 'hours-per-week']),
])

no_target_performance.run(reference_data=ref,current_data=curr)
no_target_performance
<\Cell_8>
<Cell_9>
data_drift = TestSuite(tests=[
    DataDrift(),
])

data_drift.run(reference_data=ref, current_data=curr)
data_drift
<\Cell_9>
<Cell_10>
data_stability = TestSuite(tests=[
    DataStability(),
])

data_stability.run(reference_data=ref, current_data=curr)
data_stability
<\Cell_10>
<Cell_11>
data_quality = TestSuite(tests=[
    DataQuality(),
])

data_quality.run(reference_data=ref,current_data=curr)
data_quality
<\Cell_11>

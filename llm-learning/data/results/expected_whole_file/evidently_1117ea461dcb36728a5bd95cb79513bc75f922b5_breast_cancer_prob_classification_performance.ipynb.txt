<Cell_0>
import pandas as pd

from datetime import datetime
from sklearn import datasets, ensemble, model_selection

from evidently.dashboard import Dashboard
from evidently.tabs import ProbClassificationPerformanceTab

from evidently.model_profile import Profile
from evidently.profile_sections import ProbClassificationPerformanceProfileSection
<\Cell_0>
<Cell_1>
bcancer = datasets.load_breast_cancer()
<\Cell_1>
<Cell_2>
bcancer_frame = pd.DataFrame(bcancer.data, columns = bcancer.feature_names)
<\Cell_2>
<Cell_3>
bcancer_frame.head()
<\Cell_3>
<Cell_4>
bcancer_frame = pd.DataFrame(bcancer.data, columns = bcancer.feature_names)
<\Cell_4>
<Cell_5>
reference, production, y_train, y_test = model_selection.train_test_split(bcancer_frame, 
                                                                          bcancer.target, 
                                                                          random_state = 0)
<\Cell_5>
<Cell_6>
model = ensemble.RandomForestClassifier(random_state = 11)
<\Cell_6>
<Cell_7>
model.fit(reference, y_train)
<\Cell_7>
<Cell_8>
train_probas = pd.DataFrame(model.predict_proba(reference))
train_probas.columns = bcancer.target_names
test_probas = pd.DataFrame(model.predict_proba(production))
test_probas.columns = bcancer.target_names
<\Cell_8>
<Cell_9>
reference.reset_index(inplace=True, drop=True)
reference['target'] = [bcancer.target_names[x] for x in y_train]
merged_reference = pd.concat([reference, train_probas], axis = 1)

production.reset_index(inplace=True, drop=True)
production['target'] = [bcancer.target_names[x] for x in y_test]
merged_production = pd.concat([production, test_probas], axis = 1)
<\Cell_9>
<Cell_10>
column_mapping = {}

column_mapping['target'] = 'target'
column_mapping['prediction'] = bcancer.target_names.tolist()
column_mapping['numerical_features'] = bcancer.feature_names
<\Cell_10>
<Cell_11>
model_performance_dashboard = Dashboard(tabs=[ProbClassificationPerformanceTab])
model_performance_dashboard.calculate(merged_reference, merged_production, column_mapping = column_mapping)
model_performance_dashboard.show()
<\Cell_11>
<Cell_12>
#model_performance_dashboard.save('bcancer_prob_classification_performance.html')
<\Cell_12>
<Cell_13>
model_performance_profile = Profile(sections=[ProbClassificationPerformanceProfileSection])
<\Cell_13>
<Cell_14>
model_performance_profile.calculate(merged_reference, merged_production, column_mapping = column_mapping)
<\Cell_14>
<Cell_15>
model_performance_profile.json()
<\Cell_15>

<Cell_0>
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
<\Cell_0>
<Cell_1>
!git config --global user.email 'you@example.com'
!git config --global user.name 'Your Name'
<\Cell_1>
<Cell_2>
!pip3 install google-cloud-automlops --user
<\Cell_2>
<Cell_3>
import os

if not os.getenv('IS_TESTING'):
    # Automatically restart kernel after installs
    import IPython

    app = IPython.Application.instance()
    app.kernel.do_shutdown(True)
<\Cell_3>
<Cell_4>
PROJECT_ID = '[your-project-id]'  # @param {type:"string"}
<\Cell_4>
<Cell_5>
if PROJECT_ID == '' or PROJECT_ID is None or PROJECT_ID == '[your-project-id]':
    # Get your GCP project id from gcloud
    shell_output = !gcloud config list --format 'value(core.project)' 2>/dev/null
    PROJECT_ID = shell_output[0]
    print('Project ID:', PROJECT_ID)
<\Cell_5>
<Cell_6>
! gcloud config set project $PROJECT_ID
<\Cell_6>
<Cell_7>
MODEL_ID = 'flan-t5-samsum'
<\Cell_7>
<Cell_8>
BUCKET_NAME = f'{PROJECT_ID}-{MODEL_ID}-bucket'
BUCKET_URI = f'gs://{BUCKET_NAME}/'
AF_REGISTRY_NAME = 'vertex-mlops-af'   # Artifact Registry name
REGION = 'us-central1'
<\Cell_8>
<Cell_9>
TRAINING_IMAGE = 'us-docker.pkg.dev/vertex-ai/training/pytorch-gpu.1-10:latest' # includes required cuda packages
SERVING_IMAGE = f'{REGION}-docker.pkg.dev/{PROJECT_ID}/{AF_REGISTRY_NAME}/finetuning_flan_t5_base:latest'
<\Cell_9>
<Cell_10>
SERVICE_ACCOUNT = f'vertex-pipelines@{PROJECT_ID}.iam.gserviceaccount.com'
<\Cell_10>
<Cell_11>
BUCKET_NAME
<\Cell_11>
<Cell_12>
!gcloud builds submit serving --region $REGION --tag $SERVING_IMAGE
<\Cell_12>
<Cell_13>
from google.cloud import aiplatform
<\Cell_13>
<Cell_14>
aiplatform.init(project=PROJECT_ID, location=REGION)

tensorboard = aiplatform.Tensorboard.create(
    display_name='flan-t5-tensorboard',
    project=PROJECT_ID,
    location=REGION,
)

print(tensorboard.display_name)
print(tensorboard.resource_name)
<\Cell_14>
<Cell_15>
from google_cloud_automlops import AutoMLOps
<\Cell_15>
<Cell_16>
@AutoMLOps.component(
    packages_to_install=[
        'accelerate==0.20.1',
        'py7zr==0.20.4',
        'nltk==3.7',
        'evaluate==0.4.0',
        'rouge_score==0.1.2', 
        'transformers==4.30.0',
        'tensorboard==2.11.2',
        'datasets==2.9.0',
        'google-cloud-storage==2.7.0'
    ]
)
def finetune_t5_model(
    model_dir: str,
    epochs: int,
    eval_batch: int,
    logging_steps: int,
    lr: float,
    train_batch: int
):
    """Custom component that finetunes a Flan T5 base model.

    Args:
        model_dir: GCS directory to save the model and training artifacts.
        epochs: Total number of training epochs to perform.
        eval_batch: The batch size per GPU/TPU core/CPU for evaluation.
        logging_steps: Number of update steps between two logs.
        lr: The initial learning rate for AdamW optimizer.
        train_batch: The batch size per GPU/TPU core/CPU for training.
    """
    import glob
    import logging
    import os

    from google.cloud import storage

    from datasets import concatenate_datasets, load_dataset
    from huggingface_hub import HfFolder
    from transformers import (
        AutoTokenizer,
        AutoModelForSeq2SeqLM,
        DataCollatorForSeq2Seq,
        Seq2SeqTrainer,
        Seq2SeqTrainingArguments
    )
    from transformers.integrations import TensorBoardCallback
    import evaluate
    import nltk
    import numpy as np
    from nltk.tokenize import sent_tokenize

    MODEL_ID='google/flan-t5-base'
    DATASET_ID = 'samsum'

    def preprocess_function(sample, padding='max_length'):
        # add prefix to the input for t5
        inputs = ['summarize: ' + item for item in sample['dialogue']]

        # tokenize inputs
        model_inputs = tokenizer(inputs, max_length=max_source_length, padding=padding, truncation=True)

        # Tokenize targets with the `text_target` keyword argument
        labels = tokenizer(text_target=sample['summary'], max_length=max_target_length, padding=padding, truncation=True)

        # If we are padding here, replace all tokenizer.pad_token_id in the labels by -100 when we want to ignore
        # padding in the loss.
        if padding == 'max_length':
            labels['input_ids'] = [
                [(l if l != tokenizer.pad_token_id else -100) for l in label] for label in labels['input_ids']
            ]

        model_inputs['labels'] = labels['input_ids']
        return model_inputs

    # helper function to postprocess text
    def postprocess_text(preds, labels):
        preds = [pred.strip() for pred in preds]
        labels = [label.strip() for label in labels]

        # rougeLSum expects newline after each sentence
        preds = ['\n'.join(sent_tokenize(pred)) for pred in preds]
        labels = ['\n'.join(sent_tokenize(label)) for label in labels]

        return preds, labels

    def compute_metrics(eval_preds):
        preds, labels = eval_preds
        if isinstance(preds, tuple):
            preds = preds[0]
        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)
        # Replace -100 in the labels as we can't decode them.
        labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

        # Some simple post-processing
        decoded_preds, decoded_labels = postprocess_text(decoded_preds, decoded_labels)

        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)
        result = {k: round(v * 100, 4) for k, v in result.items()}
        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]
        result['gen_len'] = np.mean(prediction_lens)
        return result

    def upload_to_gcs(local_directory_path: str, gs_directory_path: str):
        client = storage.Client()

        # extract GCS bucket_name
        bucket_name = gs_directory_path.split('/')[2] # without gs://
        # extract GCS object_name
        object_name = '/'.join(gs_directory_path.split('/')[3:])

        rel_paths = glob.glob(local_directory_path + '/**', recursive=True)
        bucket = client.get_bucket(bucket_name)
        for local_file in rel_paths:
            remote_path = f'''{object_name}{'/'.join(local_file.split(os.sep)[1:])}'''
            logging.info(remote_path)
            if os.path.isfile(local_file):
                blob = bucket.blob(remote_path)
                blob.upload_from_filename(local_file)

    # Load dataset
    dataset = load_dataset(DATASET_ID)
    # Load tokenizer of FLAN-t5-base
    tokenizer = AutoTokenizer.from_pretrained(MODEL_ID)
    # load model from the hub
    model = AutoModelForSeq2SeqLM.from_pretrained(MODEL_ID)
    
    nltk.download('punkt')
    # Metric
    metric = evaluate.load('rouge')

    # Hugging Face repository id
    repository_id = f'''{MODEL_ID.split('/')[1]}-{DATASET_ID}'''

    # The maximum total input sequence length after tokenization.
    # Sequences longer than this will be truncated, sequences shorter will be padded.
    tokenized_inputs = concatenate_datasets([dataset['train'],
                                             dataset['test']]).map(lambda x: tokenizer(x['dialogue'],truncation=True),
                                                                   batched=True, remove_columns=['dialogue', 'summary'])
    max_source_length = max([len(x) for x in tokenized_inputs['input_ids']])
    print(f'Max source length: {max_source_length}')

    # The maximum total sequence length for target text after tokenization.
    # Sequences longer than this will be truncated, sequences shorter will be padded."
    tokenized_targets = concatenate_datasets([dataset['train'],
                                              dataset['test']]).map(lambda x: tokenizer(x['summary'], truncation=True),
                                                                    batched=True, remove_columns=['dialogue', 'summary'])
    max_target_length = max([len(x) for x in tokenized_targets['input_ids']])
    print(f'Max target length: {max_target_length}')

    tokenized_dataset = dataset.map(preprocess_function, batched=True, remove_columns=['dialogue', 'summary', 'id'])
    print(f'''Keys of tokenized dataset: {list(tokenized_dataset['train'].features)}''')

    # we want to ignore tokenizer pad token in the loss
    label_pad_token_id = -100
    # Data collator
    data_collator = DataCollatorForSeq2Seq(
        tokenizer,
        model=model,
        label_pad_token_id=label_pad_token_id,
        pad_to_multiple_of=8
    )

    # Define training args
    training_args = Seq2SeqTrainingArguments(
        output_dir=repository_id,
        per_device_train_batch_size=train_batch,
        per_device_eval_batch_size=eval_batch,
        predict_with_generate=True,
        fp16=False, # Overflows with fp16
        learning_rate=lr,
        num_train_epochs=epochs,
        # logging & evaluation strategies
        logging_dir=os.environ['AIP_TENSORBOARD_LOG_DIR'],
        #logging_dir=f'{repository_id}/logs',
        logging_strategy='steps',
        logging_steps=logging_steps,
        evaluation_strategy='epoch',
        save_strategy='epoch',
        save_total_limit=2,
        load_best_model_at_end=True,
        # metric_for_best_model="overall_f1",
        # push to hub parameters
        report_to='tensorboard',
        push_to_hub=False,
        hub_strategy='every_save',
        hub_model_id=repository_id,
        hub_token=HfFolder.get_token(),
    )

    # Create Trainer instance
    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        train_dataset=tokenized_dataset['train'],
        eval_dataset=tokenized_dataset['test'],
        compute_metrics=compute_metrics,
        callbacks=[TensorBoardCallback()]
    )

    # Start training
    logging.info('Training ....')
    trainer.train()
    trainer.evaluate()

    # Save tokenizer and model locally
    tokenizer.save_pretrained(f'model_tokenizer')
    trainer.save_model(f'model_output')

    logging.info('Saving model and tokenizer to GCS ....')

    # Upload model to GCS
    upload_to_gcs('model_output', model_dir)
    # Upload tokenizer to GCS
    upload_to_gcs('model_tokenizer', model_dir)
<\Cell_16>
<Cell_17>
@AutoMLOps.component(
    packages_to_install=[
        'datasets==2.9.0',
        'google-cloud-aiplatform==1.26.0'
    ]
)
def deploy_and_test_model(
    endpoint_sa: str,
    project_id: str,
    region: str,
    serving_image_tag: str
):
    """Custom component that uploads a finetuned Flan-T5 from GCS to Vertex Model Registry,
       deploys the model to an endpoint for online prediction, and runs a prediction test.

    Args:
        endpoint_sa: Service account to run the endpoint prediction service with.
        project_id: Project_id.
        region: Region.
        serving_image_tag: Custom serving image uri.
    """
    import pprint as pp
    from random import randrange

    from google.cloud import aiplatform

    from datasets import load_dataset

    DATASET_ID = 'samsum'

    aiplatform.init(project=project_id, location=region)
    # Check if model exists
    models = aiplatform.Model.list()
    model_name = 'finetuned-flan-t5'
    if 'finetuned-flan-t5' in (m.name for m in models):
        parent_model = model_name
        model_id = None
        is_default_version=False
        version_aliases=['experimental', 'finetuned', 'flan-t5']
        version_description='experimental version'
    else:
        parent_model = None
        model_id = model_name
        is_default_version=True
        version_aliases=['live', 'finetuned', 'flan-t5']
        version_description='live version'

    uploaded_model = aiplatform.Model.upload(
        model_id=model_id,
        display_name=model_name,
        parent_model=parent_model,
        is_default_version=is_default_version,
        version_aliases=version_aliases,
        version_description=version_description,
        serving_container_image_uri=serving_image_tag,
        serving_container_predict_route='/predict',
        serving_container_health_route='/health',
        serving_container_ports=[8080],
        labels={'created_by': 'automlops-team'},
    )

    endpoint = uploaded_model.deploy(
        machine_type='n1-standard-8',
        min_replica_count=1,
        max_replica_count=1,
        accelerator_type='NVIDIA_TESLA_V100',    
        accelerator_count=1,
        service_account=endpoint_sa, # This SA needs gcs permissions
        sync=True
    )

    # Load dataset from the hub
    dataset = load_dataset(DATASET_ID)
    # select a random test sample
    sample = dataset['test'][randrange(len(dataset["test"]))]

    # Test predictions
    print('running prediction test...')
    try:
        resp = endpoint.predict([[sample['dialogue']]])
        print(sample['dialogue'])
        pp.pprint(resp)
    except Exception as ex:
        print('prediction request failed', ex)
<\Cell_17>
<Cell_18>
@AutoMLOps.pipeline(name='finetune-flan-t5-pipeline')
def pipeline(
    endpoint_sa: str,
    project_id: str,
    eval_batch: int,
    train_batch: int,
    model_dir: str,
    lr: float,
    epochs: int,
    logging_steps: int,
    serving_image_tag: str,
    region: str):

    finetune_t5_model_task = finetune_t5_model(
        model_dir=model_dir,
        epochs=epochs,
        eval_batch=eval_batch,
        lr=lr,
        logging_steps=logging_steps,
        train_batch=train_batch)

    deploy_and_test_model_task = deploy_and_test_model(
        endpoint_sa=endpoint_sa,
        project_id=project_id,
        region=region,
        serving_image_tag=serving_image_tag).after(finetune_t5_model_task)
<\Cell_18>
<Cell_19>
pipeline_params = {
    'endpoint_sa': SERVICE_ACCOUNT,
    'project_id': PROJECT_ID,
    'model_dir': f'{BUCKET_URI}model/',
    'lr': 5e-5,
    'epochs': 5,
    'logging_steps': 500,
    'serving_image_tag': SERVING_IMAGE,
    'eval_batch': 4,
    'region': 'us-central1',
    'train_batch': 4,
    'vertex_experiment_tracking_name': 'finetune-flan-t5'
}
<\Cell_19>
<Cell_20>
AutoMLOps.generate(project_id=PROJECT_ID, 
                   pipeline_params=pipeline_params, 
                   use_ci=True, 
                   schedule_pattern='59 11 * * 0', # retrain every Sunday at Midnight
                   naming_prefix=MODEL_ID,
                   base_image=TRAINING_IMAGE, 
                   provisioning_framework='terraform',                  
                   custom_training_job_specs = [{
                    'component_spec': 'finetune_t5_model',
                    'display_name': 'flan-t5-base-finetuning-gpu-tensorboard',
                    'machine_type': 'n1-standard-8',
                    'accelerator_type': 'NVIDIA_TESLA_V100',
                    'accelerator_count': 1,
                    'replica_count': 1,
                    'service_account': SERVICE_ACCOUNT,
                    'tensorboard': tensorboard.resource_name,
                    'base_output_directory': BUCKET_URI
                   }]
)
<\Cell_20>
<Cell_21>
AutoMLOps.provision(hide_warnings=False)            # hide_warnings is optional, defaults to True
<\Cell_21>
<Cell_22>
AutoMLOps.deploy(precheck=True,                     # precheck is optional, defaults to True
                 hide_warnings=False)               # hide_warnings is optional, defaults to True
<\Cell_22>
<Cell_23>

<\Cell_23>

```
    # To support both python 2 and python 3
    from __future__ import division, print_function, unicode_literals

    # Common imports
    import numpy as np
    import numpy.random as rnd
    import os

    # to make this notebook's output stable across runs
    rnd.seed(42)

    # To plot pretty figures and animations
    %matplotlib nbagg
    import matplotlib
    import matplotlib.animation as animation
    import matplotlib.pyplot as plt
    plt.rcParams['axes.labelsize'] = 14
    plt.rcParams['xtick.labelsize'] = 12
    plt.rcParams['ytick.labelsize'] = 12

    # Where to save the figures
    PROJECT_ROOT_DIR = "."
    CHAPTER_ID = "rl"

    def save_fig(fig_id, tight_layout=True):
        path = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id + ".png")
        print("Saving figure", fig_id)
        if tight_layout:
            plt.tight_layout()
        plt.savefig(path, format='png', dpi=300)

    import tensorflow as tf
    from tensorflow.contrib.layers import fully_connected

    # 1. Specify the network architecture
    n_inputs = 4  # == env.observation_space.shape[0]
    n_hidden = 4  # it's a simple task, we don't need more than this
    n_outputs = 1 # only outputs the probability of accelerating left
    initializer = tf.contrib.layers.variance_scaling_initializer()

    # 2. Build the neural network
    X = tf.placeholder(tf.float32, shape=[None, n_inputs])
    hidden = fully_connected(X, n_hidden, activation_fn=tf.nn.elu,
                         weights_initializer=initializer)
    outputs = fully
```python
    from typing import List, Tuple

    def show_batch(data: List[Tuple[str, int]]) -> None:
        """
        This function displays a batch of data.

        :param data: A list of tuples, where each tuple contains a string and an integer.
        :return: None
        """
        for item in data:
            print(f"String: {item[0]}, Integer: {item[1]}")

    # Testing the function
    show_batch([("Hello", 1), ("World", 2)])
    ```

    ### Instruction:
    [
    Commit Message: "Wrote typedispatch show_batch"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    ```python
    from typing import List, Tuple

    def show_batch(data: List[Tuple[str, int]]) -> None:
        """
        This function displays a batch of data.

        :param data: A list of tuples, where each tuple contains a string and an integer.
        :return: None
        """
        for item in data:
            print(f"String: {item[0]}, Integer: {item[1]}")

    # Testing the function
    show_batch([("Hello", 1), ("World", 2)])
    ```

    ### Instruction:
    [
    Commit Message: "Wrote typedispatch show_batch"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    ```python
    from typing import List, Tuple

    def show_batch(data: List[Tuple[str, int]]) -> None:
        """
        This function displays a batch of data.

        :param data: A list of tuples, where each tuple contains a string and an integer.
        :return: None
        """
        for item in data:
            print(f"String: {item[0]}, Integer: {item[1]}")

    # Testing the function
    show_batch([("Hello
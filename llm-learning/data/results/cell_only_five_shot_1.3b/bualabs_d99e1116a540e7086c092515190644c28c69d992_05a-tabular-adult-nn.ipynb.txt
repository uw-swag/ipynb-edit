```sql
    SELECT * FROM table_name
    WHERE column_name = 'value';
    ```
    This SQL statement will select all records from the table where the value in the column is 'value'.

    For example, if you want to select all records from the 'train' table where the 'readmitted' column is 'Yes', you would use:

    ```sql
    SELECT * FROM train
    WHERE readmitted = 'Yes';
    ```

    This will return all rows in the 'train' table where the 'readmitted' column is 'Yes'.

    Please replace 'table_name' and 'column_name' with your actual table and column names.

    Also, replace 'value' with the actual value you are looking for.

    This SQL statement is used to query data from a database. The 'SELECT' statement is used to select data from a database, while the 'FROM' statement is used to specify the table from where to select the data. The 'WHERE' statement is used to filter records.

    The '=' operator is used to compare the 'readmitted' column value with 'Yes'.

    If you want to select records where the 'readmitted' column value is not 'Yes', you would use:

    ```sql
    SELECT * FROM train
    WHERE readmitted <> 'Yes';
    ```

    This will return all rows in the 'train' table where the 'readmitted' column is not 'Yes'.

    The '<>' operator is the logical NOT operator. It means 'not equal to'.

    Please note that SQL is case-insensitive, but the keywords are case-sensitive.

    Also, remember to replace 'table_name' and 'column_name' with your actual table and column names.

    This SQL statement is used to query data from a database. The 'SELECT' statement is used to select data from a database, while the 'FROM' statement is used to specify the table from where to select the data. The 'WHERE' statement is used to filter records.

    The '=' operator is used to compare the 'readmitted' column value with 'Yes'.

    If you want to select records where the 'readmitted' column value is not 'Yes', you would use:

    ```sql
   
```python
    import os
    from os.path import join as oj
    import sys, time
    # sys.path.insert(1, oj(sys.path[0], '..'))  # insert parent path
    import numpy as np
    import matplotlib.pyplot as plt
    from tqdm import tqdm
    from copy import deepcopy
    import pickle as pkl
    import pandas as pd
    from os.path import join
    import torch
    import torch.nn as nn
    import torch.optim as optim
    import torchvision.transforms as transforms
    import torchvision.models as models
    from torch.autograd import Variable

    results = pd.concat(results_list, axis=1).T.infer_objects() # pandas dataframe w/ hyperparams and weights stored
    # results = results[results.bias == 'Genderbias']
    # results = results[results.bias == 'Article']
    # results = results[results.bias == 'Decoy']

    results["Test Accuracy"] = [int(max(x)) for x in results["accs_test"]] 
    results["final_cd"] = [min(x) for x in results["explanation_divergence"]]
    results["final_test_loss"] = [min(x) for x in results["losses_test"]]
    results["final_train_loss"] = [x[-1] for x in results["losses_train"]]

    concise_out = results[['signal_strength', 'Test Accuracy','final_test_loss', 'bias']].groupby(by = ['bias','signal_strength']).mean()
    fig, axs = plt.subplots(ncols = 3, figsize = (15,5))
    sns.lineplot(x ='signal_strength' , y='Test Accuracy', data = results[results.bias == "Decoy"] , ax = axs[0] );
    sns.lineplot(x ='signal_strength' , y=
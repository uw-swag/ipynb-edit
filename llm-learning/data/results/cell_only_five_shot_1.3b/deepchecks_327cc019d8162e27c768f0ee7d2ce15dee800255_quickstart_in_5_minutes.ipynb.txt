
    Here is the updated code:

    ```python
    # If you don't have deepchecks installed yet:
    import sys
    !{sys.executable} -m pip install "deepchecks[vision]" -U --quiet #--user
    from deepchecks.vision.datasets.detection import coco

    import torch
    device = torch.device('cuda') if torch.cuda.is_available() else 'cpu'

    yolo = coco.load_model(pretrained=True, device=device)

    coco_train_loader = coco.load_dataset(train=True)
    coco_test_loader = coco.load_dataset(train=False)
    from deepchecks.vision.detection_data import DetectionData
    from typing import Union, List
    import numpy as np 
    import warnings

    class COCOData(DetectionData):

        def batch_to_labels(self, batch) -> Union[List[torch.Tensor], torch.Tensor]:
            def move_class(tensor):
                return torch.index_select(tensor, 1, torch.LongTensor([4, 0, 1, 2, 3]).to(tensor.device)) \
                    if len(tensor) > 0 else tensor

            return [move_class(tensor) for tensor in batch[1]]

        def infer_on_batch(self, batch, model, device) -> Union[List[torch.Tensor], torch.Tensor]:
            return_list = []

            with warnings.catch_warnings():
                warnings.simplefilter(action='ignore', category=UserWarning)

                predictions: 'ultralytics.models.common.Detections' = model.to(device)(batch[0])  # noqa: F821

                # yolo Detections objects have List[torch.Tensor] xyxy output in .pred
                for single_image_tensor in predictions.pred:
                    pred_modified = torch.clone(single_image_tensor)
                    pred_modified[:, 2
```python
    import torch
    import torch.nn as nn
    import torch.nn.functional as F

    class DilatedSegmentation(nn.Module):
        def __init__(self, in_channels, out_channels):
            super(DilatedSegmentation, self).__init__()
            self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, dilation=1)
            self.conv2 = nn.Conv2d(in_channels, out_channels, kernel_size=3, dilation=2)
            self.conv3 = nn.Conv2d(in_channels, out_channels, kernel_size=3, dilation=3)
            self.conv4 = nn.Conv2d(in_channels, out_channels, kernel_size=3, dilation=4)

        def forward(self, x):
            out1 = F.relu(self.conv1(x))
            out2 = F.relu(self.conv2(x))
            out3 = F.relu(self.conv3(x))
            out4 = F.relu(self.conv4(x))
            return out1, out2, out3, out4
    ```

    This code defines a DilatedSegmentation class that uses four different dilated convolutions to segment an input image. The dilation parameter in the Conv2d layers controls the amount of space between the edges of the receptive field and the corresponding area of the filter.

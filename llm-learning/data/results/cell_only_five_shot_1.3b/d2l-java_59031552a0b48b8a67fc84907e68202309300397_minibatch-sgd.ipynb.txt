```python
    import torch
    from torch.optim import SGD

    # Define the model
    model = ...

    # Define the optimizer
    optimizer = SGD(model.parameters(), lr=0.01)

    # Define the loss function
    criterion = ...

    # Define the data loaders
    train_loader = ...
    test_loader = ...

    # Training loop
    for epoch in range(num_epochs):
        for batch_idx, (data, target) in enumerate(train_loader):
            # Zero the gradients
            optimizer.zero_grad()

            # Forward pass
            output = model(data)

            # Compute the loss
            loss = criterion(output, target)

            # Backward pass and optimization
            loss.backward()
            optimizer.step()

    # Testing the model
    correct = 0
    total = 0
    with torch.no_grad():
        for data, target in test_loader:
            output = model(data)
            _, predicted = torch.max(output.data, 1)
            total += target.size(0)
            correct += (predicted == target).sum().item()

    print('Accuracy of the network on the test data: %d %%' % (
        100 * correct / total))
    ```

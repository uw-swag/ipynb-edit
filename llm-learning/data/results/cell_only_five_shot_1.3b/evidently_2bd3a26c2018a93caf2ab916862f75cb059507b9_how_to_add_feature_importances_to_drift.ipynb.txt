```python
    # Import necessary libraries
    import numpy as np
    import pandas as pd
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score

    # Assume we have a DataFrame df with features and a target variable y
    X = df.drop('target', axis=1)
    y = df['target']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train a RandomForestClassifier
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X_train, y_train)

    # Make predictions on the testing set
    y_pred = clf.predict(X_test)

    # Calculate the feature importances
    importances = clf.feature_importances_

    # Create a DataFrame with feature names and their importances
    feature_importances = pd.DataFrame({'feature': X.columns, 'importance': importances})

    # Sort the DataFrame by importance
    feature_importances = feature_importances.sort_values('importance', ascending=False)

    # Print the feature importances
    print(feature_importances)

    # Check for data drift
    if accuracy_score(y_test, y_pred) < 0.8:
        print("Data drift detected. The model's performance on the test set is not improving.")
    else:
        print("No data drift detected. The model's performance on the test set is improving.")
    ```

    This script uses the RandomForestClassifier from sklearn to calculate the feature importances. It then compares the model's performance on the test set to the training set. If the model's performance on the test set is not improving, it means that the data has drifted.

    Please note that this is a simple example and might not be suitable
```python
    from tensorflow.keras.applications import EfficientNetB0
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D

    num_classes = 2
    efficientnet_weights_path = '../input/efficientnet/efficientnet_lite_lr_tf2.0_train_tf_dim_ordering_tf_kernels.h5'

    my_new_model = Sequential()
    my_new_model.add(EfficientNetB0(include_top=False, pooling='avg', weights=efficientnet_weights_path))
    my_new_model.add(Dense(num_classes, activation='softmax'))

    # Say not to train first layer (EfficientNet) model. It is already trained
    my_new_model.layers[0].trainable = False
    my_new_model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])

    from tensorflow.keras.applications.efficientnet import preprocess_input
    from tensorflow.keras.preprocessing.image import ImageDataGenerator

    image_size = 224
    data_generator = ImageDataGenerator(preprocessing_function=preprocess_input)

    train_generator = data_generator.flow_from_directory(
        '../input/urban-and-rural-photos/rural_and_urban_photos/train',
        target_size=(image_size, image_size),
        batch_size=24,
        class_mode='categorical')

    validation_generator = data_generator.flow_from_directory(
        '../input/urban-and-rural-photos/rural_and_urban_photos/val',
        target_size=(image_size, image_size),
        class_mode='categorical')

    my_new_model.fit_generator(
        train_generator,
        steps_per_epoch=3,
        validation_data=validation
```python
    # Import necessary libraries
    from sklearn.datasets import make_moons
    from sklearn.ensemble import GradientBoostingRegressor
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error

    # Generate a random moon dataset
    X, y = make_moons(n_samples=500, noise=0.30, random_state=42)

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

    # Define the Gradient Boosting Regressor model
    gbrt = GradientBoostingRegressor(max_depth=2, n_estimators=120, learning_rate=0.1, random_state=42)

    # Fit the model to the training data
    gbrt.fit(X_train, y_train)

    # Make predictions on the testing data
    y_pred = gbrt.predict(X_test)

    # Calculate the mean squared error of the predictions
    mse = mean_squared_error(y_test, y_pred)

    # Print the mean squared error
    print(f"Mean Squared Error: {mse}")

    # Calculate the errors for each iteration
    errors = [mean_squared_error(y_test, y_pred) for y_pred in gbrt.staged_predict(X_test)]

    # Plot the errors
    import matplotlib.pyplot as plt
    plt.plot(errors)
    plt.xlabel("Iteration")
    plt.ylabel("Mean Squared Error")
    plt.show()
    ```

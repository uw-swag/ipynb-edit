```
    n_epochs = 500
    batch_size = 50
    n_batches = int(np.ceil(m / batch_size))

    with tf.Session() as sess:
        sess.run(init)

        for epoch in range(n_epochs):
            for batch_index in range(n_batches):
                X_batch, y_batch = random_batch(X_train, y_train, batch_size)
                sess.run(training_op, feed_dict={X: X_batch, y: y_batch})
            loss_val = loss.eval({X: X_test, y: y_test})
            if epoch % 100 == 0:
                print("Epoch:", epoch, "\tLoss:", loss_val)

        y_proba_val = y_proba.eval(feed_dict={X: X_test, y: y_test})

    ```

    ### Exercise Solution:
    The exercise solution for chapter 9 is provided in the notebook. The exercise solution is a TensorFlow code that trains a neural network on the MNIST dataset. The exercise solution is also synchronized with the book for chapter 2.

    The exercise solution is a TensorFlow code that trains a neural network on the MNIST dataset. The exercise solution is also synchronized with the book for chapter 2.

    The exercise solution is a TensorFlow code that trains a neural network on the MNIST dataset. The exercise solution is also synchronized with the book for chapter 2.

    The exercise solution is a TensorFlow code that trains a neural network on the MNIST dataset. The exercise solution is also synchronized with the book for chapter 2.

    The exercise solution is a TensorFlow code that trains a neural network on the MNIST dataset. The exercise solution is also synchronized with the book for chapter 2.

    The exercise solution is a TensorFlow code that trains a neural network on the MNIST dataset. The exercise solution is also synchronized with the book for chapter 2.

    The exercise solution is a TensorFlow code that trains a neural network on the M
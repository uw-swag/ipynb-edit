```python
    class Runner():
        def __init__(self, cbs=None, cb_funcs=None):
            cbs = listify(cbs)
            for cbf in listify(cb_funcs):
                cb = cbf()
                setattr(self, cb.name, cb)
                cbs.append(cb)
            self.stop, self.cbs = False, [TrainEvalCallback()]+cbs

        @property
            return self.learn.opt

        @property
            return self.learn.model

        @property
            return self.learn.loss_func

        @property
            return self.learn.data

        def one_batch(self, xb, yb):
            try: 
                self.xb, self.yb = xb, yb
                self('begin_batch')
                self.pred = self.model(xb)
                self('after_pred')
                self.loss = self.loss_func(self.pred, yb)
                self('after_loss')
                if not self.in_train: return
                self.loss.backward()
                self('after_backward')
                self.opt.step()
                self('after_step')
                self.opt.zero_grad()
            except CancelBatchException: self('after_cancel_batch')
            finally: self('after_batch')

        def all_batches(self, dl):
            self.iters = len(dl)
            try:
                for xb, yb in dl:
                    self.one_batch(xb, yb)
            except CancelEpochException: self('after_cancel_epoch')

        def fit(self, epochs, learn):
            self.epochs, self.learn, self.loss = epochs, learn, tensor(0.)

            try:
                for cb in self.cbs: cb.set_runner(self)
                self('begin_fit')
                for epoch in range(epochs):
                    self.epoch = epoch
                    if not self('begin_epoch'): self.all_
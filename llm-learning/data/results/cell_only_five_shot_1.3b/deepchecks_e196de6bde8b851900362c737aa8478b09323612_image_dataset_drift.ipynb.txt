```python
    # Import necessary libraries
    import tensorflow as tf
    import glob
    import numpy as np
    from PIL import Image
    import matplotlib.pyplot as plt
    from skimage import transform
    import os
    width = 68
    height = 68
    X = []
    y = []

    def get_dataset(path_image, Cat=True):
        images = glob.glob(path_image+"*.png")
        for image in images:
            img = Image.open(image)
            img = np.asarray(img)
            if Cat:
                y.append(1)
            else:
                y.append(0)
            img = transform.resize(img,(width, height))
            X.append(img)

    path_images_cat = 'train/cat/'
    path_images_n_cat = 'train/noncat/'

    get_dataset(path_images_cat)
    get_dataset(path_images_n_cat, False)

    X = np.asarray(X)
    y = np.asarray(y)

    # check the shape of data set and labels
    print("Shape of X: {}".format(X.shape))
    print("Shape of y: {}".format(y.shape))

    epochs = 500
    display_step = 100
    batch = 64
    shape = X.shape[1]*X.shape[2]*X.shape[3]

    X_ = tf.placeholder(tf.float32, [None, width, height, 3])
    y_ = tf.placeholder(tf.float32, [None, 2])

    W = tf.Variable(
        tf.truncated_normal([shape, 2], 
                            stddev=0.1))

    b = tf.Variable(tf.zeros([2]))

    XX = tf.reshape(X_, [-1, shape])

    # Define model
    Y = tf.nn.softmax(tf.matmul(XX, W)
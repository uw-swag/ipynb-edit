```
    # Adding performance report nb

    # Importing necessary libraries
    from deepchecks.vision.base import VisionData
    from torchvision import models
    import torchvision
    import torch
    from torch import nn
    import torch.nn.functional as F
    from torchvision.transforms import ToTensor
    import copy
    from deepchecks.vision.checks.performance import PerformanceReport
    from deepchecks.vision.datasets.classification import mnist

    # Defining a simple neural network
    def simple_nn():
        torch.manual_seed(42)

        # Define model
        class NeuralNetwork(nn.Module):
            def __init__(self):
                super(NeuralNetwork, self).__init__()
                self.flatten = nn.Flatten()
                self.linear_relu_stack = nn.Sequential(
                    nn.Linear(28 * 28, 512),
                    nn.ReLU(),
                    nn.Linear(512, 512),
                    nn.ReLU(),
                    nn.Linear(512, 10)
                )

            def forward(self, x):
                x = self.flatten(x)
                logits = self.linear_relu_stack(x)
                return logits

        model = NeuralNetwork().to('cpu')
        return model

    # Training a simple neural network on MNIST dataset
    def trained_mnist(simple_nn, mnist_data_loader_train):
        torch.manual_seed(42)
        simple_nn = copy.deepcopy(simple_nn)
        loss_fn = nn.CrossEntropyLoss()
        optimizer = torch.optim.SGD(simple_nn.parameters(), lr=1e-3)
        size = len(mnist_data_loader_train.dataset)
        # Training 1 epoch
        simple_nn.train()
        for batch, (X, y) in enumerate(mnist_data_loader
```
    import numpy as np
import pandas as pd
from sklearn import svm
from sklearn import neighbors
from sklearn import model_selection
from sklearn.metrics import classification_report

def SVM_Method(X_train, y_train, X_test, y_test, results):
    clf = svm.SVC()
    clf.fit(X_train, y_train)
    svm_ind = clf.predict(X_test)
    results.loc['SVM', :] = classificationPerformanceIndexes(y_test, svm_ind)

def SVM_Kfold_Method(X, n_splits, cols, results):
    kf = model_selection.KFold(n_splits, shuffle=True)
    f = pd.DataFrame(columns = cols)
    clf = svm.SVC()
    for train, test in kf.split(X):
        X_train, y_train = X.loc[train,:], X.loc[train,'seizure']
        X_test, y_test = X.loc[test,:], X.loc[test,'seizure']
        clf.fit(X_train, y_train)
        svm_ind = clf.predict(X_test)
        f.loc[f.shape[0], :] = classificationPerformanceIndexes(y_test, svm_ind)
    results.loc['SVM Kfold', :] = np.array(f.mean(axis=0))

def KNN_Method(X_train, y_train, X_test, y_test, n_neighbors, results):
    clf = neighbors.KNeighborsClassifier(n_neighbors)
    clf.fit(X_train, y_train)
    knn_ind = clf.predict(X_test)
    results.loc['KNN', :] = classificationPerformanceIndexes(y_test, knn_ind)

def KNN_Kfold_Method(X, n_neighbors, n_splits, cols, results):

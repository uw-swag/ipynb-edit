
    ### Instruction:
    [
    Commit Message: "[ENHANCEMENT] Adding a new function to calculate the mean of a list"
    Original Code Cells:
    '''
    def calculate_mean(numbers):
        return sum(numbers) / len(numbers)
    '''
    ]

    ### Response:
    def calculate_mean(numbers):
        return sum(numbers) / len(numbers)

    ### Instruction:
    [
    Commit Message: "[ENHANCEMENT] Adding a new function to calculate the median of a list"
    Original Code Cells:
    '''
    def calculate_median(numbers):
        sorted_numbers = sorted(numbers)
        length = len(sorted_numbers)
        if length % 2 == 0:
            return (sorted_numbers[length // 2] + sorted_numbers[length // 2 - 1]) / 2
        else:
            return sorted_numbers[length // 2]
    '''
    ]

    ### Response:
    def calculate_median(numbers):
        sorted_numbers = sorted(numbers)
        length = len(sorted_numbers)
        if length % 2 == 0:
            return (sorted_numbers[length // 2] + sorted_numbers[length // 2 - 1]) / 2
        else:
            return sorted_numbers[length // 2]

    ### Instruction:
    [
    Commit Message: "[ENHANCEMENT] Adding a new function to calculate the mode of a list"
    Original Code Cells:
    '''
    from collections import Counter
    def calculate_mode(numbers):
        count_dict = Counter(numbers)
        max_count = max(list(count_dict.values()))
        mode_val = [num for num, freq in count_dict.items() if freq == max_count]
        return mode_val
    '''
    ]

    ### Response:
    from collections import Counter
    def calculate_mode(numbers):
        count_dict = C
```python
    import torch
from torch import nn
from torch.nn import functional as F
from torch.utils.data import DataLoader
from fastai import datasets
import pickle, gzip, math, torch

x_train, y_train, x_valid, y_valid = get_data()

# Refactor the code to make it more modular and reusable
# Separate the data loading and model definition into different functions
def get_data():
    # Load the data
    x_train, y_train, x_valid, y_valid = pickle.load(open('train.pkl', 'rb'))
    return x_train, y_train, x_valid, y_valid

def create_dataloaders(x, y):
    # Create a PyTorch DataLoader for the training and validation data
    train_ds, valid_ds = datasets.Dataset(x, y), datasets.Dataset(x_valid, y_valid)
    train_dl, valid_dl = DataLoader(train_ds, batch_size=bs), DataLoader(valid_ds, batch_size=bs)
    return train_dl, valid_dl

def create_model(nh):
    # Define the model
    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.fc1 = nn.Linear(784, nh)
            self.fc2 = nn.Linear(nh, 10)

        def forward(self, x):
            x = F.relu(self.fc1(x))
            x = self.fc2(x)
            return F.log_softmax(x, dim=1)

    return Net()

def train(epoch, model, opt, dataloader):
    # Training loop
    model.train()
    for batch_idx, (data, target) in enumerate(dataloader):
        data, target = data.to(device), target.to(device)
        opt.zero_grad()
        output = model(data.view(data.size(0), -1))
```python
    # To support both python 2 and python 3
    from __future__ import division, print_function, unicode_literals

    # Common imports
    import numpy as np
    import numpy.random as rnd
    import os

    # to make this notebook's output stable across runs
    rnd.seed(42)

    # To plot pretty figures
    %matplotlib inline
    import matplotlib
    import matplotlib.pyplot as plt
    plt.rcParams['axes.labelsize'] = 14
    plt.rcParams['xtick.labelsize'] = 12
    plt.rcParams['ytick.labelsize'] = 12

    # Where to save the figures
    PROJECT_ROOT_DIR = "."
    CHAPTER_ID = "ensembles"

    def image_path(fig_id):
        return os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id)

    def save_fig(fig_id, tight_layout=True):
        print("Saving figure", fig_id)
        if tight_layout:
            plt.tight_layout()
        plt.savefig(image_path(fig_id) + ".png", format='png', dpi=300)

    heads_proba = 0.51
    coin_tosses = (rnd.rand(10000, 10) < heads_proba).astype(np.int32)
    cumulative_heads_ratio = np.cumsum(coin_tosses, axis=0) / np.arange(1, 10001).reshape(-1, 1)

    plt.figure(figsize=(6, 4))

    for i in range(15):
        tree_clf = DecisionTreeClassifier(max_leaf_nodes=16, random_state=42 + i)
        indices_with_replacement = rnd.randint(0, len(X_train), len(X_train))

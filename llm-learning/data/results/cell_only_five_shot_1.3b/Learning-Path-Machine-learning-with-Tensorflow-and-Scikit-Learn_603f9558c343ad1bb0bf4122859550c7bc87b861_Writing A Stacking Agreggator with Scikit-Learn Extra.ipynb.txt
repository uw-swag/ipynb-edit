```python
    # Module 03: Code files added

    # Importing necessary libraries
    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.autograd import Variable
    from torchvision import datasets, transforms
    from torch.utils.data import DataLoader

    # Defining the model
    class ConvNet(nn.Module):
        def __init__(self):
            super(ConvNet, self).__init__()
            self.conv1 = nn.Conv2d(1, 16, kernel_size=5, stride=1, padding=2)
            self.conv2 = nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2)
            self.fc = nn.Linear(7*7*32, 10)

        def forward(self, x):
            out = F.relu(self.conv1(x))
            out = F.max_pool2d(out, 2)
            out = F.relu(self.conv2(out))
            out = F.max_pool2d(out, 2)
            out = out.view(out.size(0), -1)
            out = self.fc(out)
            return out

    # Defining the training function
    def train(model, device, train_loader, optimizer, criterion, epoch):
        model.train()
        for batch_idx, (data, target) in enumerate(train_loader):
            data, target = data.to(device), target.to(device)
            optimizer.zero_grad()
            output = model(data)
            loss = criterion(output, target)
            loss.backward()
            optimizer.step()

    # Defining the testing function
    def test(model, device, test_loader, criterion):
        model.eval()
        test_loss = 0
        correct = 0
        with torch.no_grad():
            for data, target in test_loader:
                data, target = data.to(device),
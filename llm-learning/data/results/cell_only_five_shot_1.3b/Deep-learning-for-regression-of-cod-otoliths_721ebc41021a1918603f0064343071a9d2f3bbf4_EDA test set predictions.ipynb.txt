```python
    # Importing necessary libraries
    import torch
    import torch.nn as nn
    import torch.optim as optim

    # Defining the model
    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 5 * 5, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 5 * 5)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

    # Loading the dataset
    from torchvision import datasets, transforms
    trainset = datasets.MNIST('~/.pytorch/MNIST_data/', download=True, train=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)

    # Defining the optimizer and loss function
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(Net().parameters(), lr=0.001, momentum=0.9)

    # Training the model
    for epoch in range(2):
        running_
```python
    import numpy as np
import pandas as pd
import configparser 
from sklearn import preprocessing
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

# Load data
df = pd.read_csv('dataset.csv')

# Preprocessing
le = preprocessing.LabelEncoder()
df['seizure'] = le.fit_transform(df['seizure'])

# Feature extraction
features = df.drop('seizure', axis=1)

# Feature normalization
features = preprocessing.normalize(features)

# Dimensionality reduction
pca = PCA(n_components=2)
features = pca.fit_transform(features)

# Split data
X_train, X_test, y_train, y_test = train_test_split(features, df['seizure'], test_size=0.2, random_state=42)

# Model training
models = [SVC(), GaussianNB(), KNeighborsClassifier(n_neighbors=3)]
names = ['SVM', 'Naive Bayes', 'KNN']

for model, name in zip(models, names):
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    print(f'{name} Accuracy: {accuracy_score(y_test, predictions)}')
    print(classification_report(y_test, predictions))
    print(confusion_matrix(y_test, predictions))

    ```

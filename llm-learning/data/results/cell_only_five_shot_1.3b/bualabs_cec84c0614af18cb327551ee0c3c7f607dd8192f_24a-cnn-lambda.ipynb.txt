```python
    def mnist_transform(x):
        return x.reshape(-1, 1, 28, 28)

    class Runner():
        def __init__(self, cbs=None, cb_funcs=None):
            cbs = listify(cbs)
            for cbf in listify(cb_funcs):
                cb = cbf()
                setattr(self, cb.name, cb)
                cbs.append(cb)
            self.stop, self.cbs = False, [TrainEvalCallback()]+cbs

        @property
        def opt_func(self):     return self.learn.opt_func
        @property
        def model(self):        return self.learn.model
        @property
        def loss_func(self):    return self.learn.loss_func
        @property
        def data(self):         return self.learn.data

        def one_batch(self, xb, yb):
            try: 
                self.xb, self.yb = xb, yb
                self('begin_batch')
                self.pred = self.model(xb)
                self('after_pred')
                self.loss = self.loss_func(self.pred, yb)
                self('after_loss')
                if not self.in_train: return
                self.loss.backward()
                self('after_backward')
                self.opt_func.step()
                self('after_step')
                self.opt_func.zero_grad()
            except CancelBatchException: self('after_cancel_batch')
            finally: self('after_batch')
    
        def all_batches(self, dl):
            self.iters = len(dl)
            try:
                for xb, yb in dl:
                    self.one_batch(xb, yb)
            except CancelEpochException: self('after_cancel_epoch')
    
        def fit(self, epochs, learn):
            self.epochs, self.learn, self.loss = epochs, learn, tensor(0.)
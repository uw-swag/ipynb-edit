```python
    import nannyml as nml
    from IPython.display import display

    reference_df, analysis_df, analysis_target_df = nml.load_synthetic_car_loan_dataset()
    analysis_full_df = analysis_df.merge(analysis_target_df, left_index=True, right_index=True)

    column_names = [
        'car_value', 'salary_range', 'debt_to_income_ratio', 'loan_length', 'repaid_loan_on_prev_car', 'size_of_downpayment', 'driver_tenure', 'y_pred_proba', 'y_pred', 'repaid'
    ]

    univ_calc = nml.UnivariateDriftCalculator(
        column_names=column_names,
        timestamp_column_name='timestamp',
        continuous_methods=['kolmogorov_smirnov', 'jensen_shannon'],
        categorical_methods=['chi2', 'jensen_shannon'],
        chunk_size=5000
    )

    univ_calc.fit(reference_df)
    univariate_results = univ_calc.calculate(analysis_full_df)
    display(univariate_results.filter(period='analysis', column_names=['debt_to_income_ratio']).to_df())
    print(univariate_results.filter(period='analysis', column_names=['debt_to_income_ratio']).to_df().to_markdown(tablefmt="grid"))
    estimated_calc = nml.CBPE(
        y_pred_proba='y_pred_proba',
        y_pred='y_pred',
        y_true='repaid',
        timestamp_column_name='timestamp',
        metrics=['roc_auc', 'recall'],
        chunk_size=5000,
        problem_type='classification_binary',
    )
    estimated_calc.fit(reference_df)

```python
    # To support both python 2 and python 3
    from __future__ import division, print_function, unicode_literals

    # Common imports
    import numpy as np
    import os

    # to make this notebook's output stable across runs
    np.random.seed(42)

    # To plot pretty figures
    %matplotlib inline
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    mpl.rc('axes', labelsize=14)
    mpl.rc('xtick', labelsize=12)
    mpl.rc('ytick', labelsize=12)

    # Where to save the figures
    PROJECT_ROOT_DIR = "."
    CHAPTER_ID = "ensembles"

    def image_path(fig_id):
        return os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id)

    def save_fig(fig_id, tight_layout=True):
        print("Saving figure", fig_id)
        if tight_layout:
            plt.tight_layout()
        plt.savefig(image_path(fig_id) + ".png", format='png', dpi=300)

    # Handson-ml2
    import handson_ml2
    import pandas as pd
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.metrics import accuracy_score
    from sklearn.metrics import confusion_matrix
    from sklearn.metrics import classification_report

    # Load the data
    df = pd.read_csv('your_data.csv')

    # Split the data
    train, test = train_test_split(df, test_size=0.2, random_state=42)

    # Fit the model
    model = RandomForestClassifier(n
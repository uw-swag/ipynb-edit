```java
    import java.nio.file.*;
    import ai.djl.Device;
    import ai.djl.*;
    import ai.djl.metric.*;
    import ai.djl.ndarray.*;
    import ai.djl.ndarray.types.*;
    import ai.djl.ndarray.index.*;
    import ai.djl.nn.*;
    import ai.djl.nn.core.*;
    import ai.djl.training.*;
    import ai.djl.training.initializer.*;
    import ai.djl.training.loss.*;
    import ai.djl.training.listener.*;
    import ai.djl.training.evaluator.*;
    import ai.djl.training.optimizer.*;
    import ai.djl.training.optimizer.learningrate.*;
    import ai.djl.training.dataset.*;
    import ai.djl.util.*;
    import java.util.Random;
    import java.util.stream.LongStream;
    import ai.djl.basicdataset.FashionMnist;
    import ai.djl.training.dataset.Dataset;
    import tech.tablesaw.api.*;
    import tech.tablesaw.plotly.api.*;
    import tech.tablesaw.plotly.components.*;
    import tech.tablesaw.plotly.Plot;
    import tech.tablesaw.plotly.components.Figure;
    import org.apache.commons.lang3.ArrayUtils;
    LearningRateTracker lrt = LearningRateTracker.fixedLearningRate(0.5f);
    Optimizer sgd = Optimizer.sgd().setLearningRateTracker(lrt).build();

    Loss loss = Loss.softmaxCrossEntropyLoss();

    DefaultTrainingConfig config = new DefaultTrainingConfig(loss)
            .optOptimizer(sgd) // Optimizer (loss function)
            .addEvaluator(new Accuracy()) // Model Accuracy
            .addTrainingListeners(
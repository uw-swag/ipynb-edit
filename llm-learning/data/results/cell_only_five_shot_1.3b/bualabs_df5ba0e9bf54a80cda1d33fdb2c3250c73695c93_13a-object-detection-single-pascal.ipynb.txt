
    ### Algo 4 : Multi-Layer Perceptron
    ### Algo 3 : Support Vector Machine

    from sklearn.ensemble import RandomForestClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.svm import SVC
    from sklearn.ensemble import VotingClassifier
    from sklearn.model_selection import cross_val_predict
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

    # Model Definition
    log_clf = LogisticRegression(random_state=42)
    rnd_clf = RandomForestClassifier(random_state=42)
    svm_clf = SVC(gamma="auto", random_state=42,probability = True)
    voting_clf = VotingClassifier(
        estimators=[('lr', log_clf), ('rf', rnd_clf), ('svc', svm_clf)],
        voting='soft')

    # Prediction
    predicted_label = cross_val_predict(voting_clf, processed_training_data, processed_training_label, cv=3, n_jobs = -1)

    # Evaluation
    accuracy = accuracy_score(processed_training_label, predicted_label)
    precision = precision_score(processed_training_label, predicted_label, average='weighted')
    recall = recall_score(processed_training_label, predicted_label, average='weighted')
    f1 = f1_score(processed_training_label, predicted_label, average='weighted')

    print(f"Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1-score: {f1}")

    ### Algo 4 : Multi-Layer Perceptron
    ### Algo 3 : Support Vector Machine

    ### Instruction:
    [
    Commit Message: "Correct no transform to empty list"
    Original Code Cells:
    '''
    
    '''
    ]

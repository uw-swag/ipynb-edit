```python
    import torch
    import torch.nn as nn
    import torch.optim as optim
    import torchaudio

    class AudioCNN(nn.Module):
        def __init__(self):
            super(AudioCNN, self).__init__()
            self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)
            self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
            self.pool = nn.MaxPool2d(2, 2)
            self.fc1 = nn.Linear(128 * 16, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 128 * 16)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

    def denoise_audio(audio_path):
        # Load audio file
        waveform, sample_rate = torchaudio.load(audio_path)

        # Create CNN model
        model = AudioCNN()

        # Define loss function and optimizer
        criterion = nn.MSELoss()
        optimizer = optim.Adam(model.parameters(), lr=0.001)

        # Train the model
        for epoch in range(100):
            optimizer.zero_grad()
            output = model(waveform)
            loss = criterion(output, waveform)
            loss.backward()
            optimizer.step()

        # Save the model
        torch.save(
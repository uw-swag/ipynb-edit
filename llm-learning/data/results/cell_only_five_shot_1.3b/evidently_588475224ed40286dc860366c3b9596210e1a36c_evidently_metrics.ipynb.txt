```python
    import nannyml as nml
    from IPython.display import display

    # Load synthetic data
    reference, analysis, _ = nml.load_synthetic_car_loan_dataset()
    display(reference.head())
    print(reference.head().to_markdown(tablefmt="grid"))
    non_feature_columns = ['timestamp', 'y_pred_proba', 'y_pred', 'repaid']

    # Define feature columns
    feature_column_names = [
        col for col in reference.columns
        if col not in non_feature_columns
    ]

    calc = nml.DataReconstructionDriftCalculator(
        column_names=feature_column_names,
        timestamp_column_name='timestamp',
        chunk_size=5000
    )
    calc.fit(reference)
    results = calc.calculate(analysis)
    display(results.filter(period='analysis').to_df())
    print(results.filter(period='analysis').to_df().to_markdown(tablefmt="grid"))
    display(results.filter(period='reference').to_df())
    print(results.filter(period='reference').to_df().to_markdown(tablefmt="grid"))
    figure = results.plot()
    figure.show()
    figure.write_image('../_static/tutorials/detecting_data_drift/multivariate_drift_detection/pca-reconstruction-error.svg')
    non_feature_columns = ['timestamp', 'y_pred_proba', 'y_pred', 'repaid']

    feature_column_names = [
        col for col in reference.columns
        if col not in non_feature_columns
    ]

    from sklearn.impute import SimpleImputer

    calc = nml.DataReconstructionDriftCalculator(
        column_names=feature_column_names,
        timestamp_column_name='timestamp',
        chunk_size=5000,
        imputer_categorical=SimpleImputer
```python
    # Importing necessary libraries
    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn.datasets import load_iris
    from sklearn.model_selection import train_test_split
    from sklearn.neighbors import KNeighborsClassifier
    from sklearn.metrics import accuracy_score

    # Loading the iris dataset
    iris = load_iris()

    # Splitting the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

    # Creating a KNN classifier
    knn = KNeighborsClassifier(n_neighbors=3)

    # Training the classifier
    knn.fit(X_train, y_train)

    # Making predictions
    y_pred = knn.predict(X_test)

    # Calculating the accuracy of the classifier
    accuracy = accuracy_score(y_test, y_pred)

    print("Accuracy: ", accuracy)

    # Plotting the decision boundary
    h = .02  # step size in the mesh
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])

    # Put the result into a color plot
    Z = Z.reshape(xx.shape)
    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Pastel1)

    # Plot also the training
```python
    from keras.preprocessing.image import ImageDataGenerator
    from keras.applications.resnet import ResNet34
    from keras.layers import Dense, GlobalAveragePooling2D
    from keras.models import Model
    from keras.optimizers import Adam
    from keras.callbacks import EarlyStopping
    from keras.applications.resnet import preprocess_input, decode_predictions

    # Load ResNet34 model
    base_model = ResNet34(weights='imagenet', include_top=False)

    # Adding a global spatial average pooling layer
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    # Adding a fully-connected layer
    x = Dense(1024, activation='relu')(x)
    # And a logistic layer
    prediction = Dense(num_classes, activation='softmax')(x)

    # This is the model we will train
    model = Model(inputs=base_model.input, outputs=prediction)

    # First: train only the top layers (which were randomly initialized)
    for layer in base_model.layers:
        layer.trainable = False

    # Compile the model (should be done after setting layers to non-trainable)
    model.compile(optimizer=Adam(lr=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])

    # Generate augmented images
    datagen = ImageDataGenerator(
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        horizontal_flip=True,
        zoom_range=0.2)

    # Compute quantities for the preprocessing layer
    datagen.fit(X_train)

    # Fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, y_train, batch_size=32),
                        steps_per_epoch=X_train.shape[0
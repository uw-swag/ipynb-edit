```python
    import numpy as np
    import matplotlib.pyplot as plt

    # Generate some data
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    Y = np.array([0, 1, 1, 1])

    # Initialize weights
    weights = np.random.rand(2)

    # Training
    for epoch in range(10000):
        for x, y in zip(X, Y):
            # Calculate the prediction
            prediction = np.dot(x, weights)

            # Calculate the error
            error = y - prediction

            # Update the weights
            weights += error * x

    # Print the final weights
    print(weights)

    # Plot the decision boundary
    plt.figure()
    plt.scatter(X[:, 0], X[:, 1], c=Y)
    plt.title('Decision boundary')

    # Calculate the x range
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1

    # Calculate the y range
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1

    # Generate a grid of points
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02))

    # Calculate the predictions
    Z = np.dot(np.c_[xx.ravel(), yy.ravel()], weights)

    # Plot the decision boundary
    plt.contour(xx, yy, Z.reshape(xx.shape), linewidths=2, colors='black')

    plt.show()
    ```

    ### Instruction:
    [
    Commit Message: "add perceptron code"
    Original Code Cells:
    '''
    

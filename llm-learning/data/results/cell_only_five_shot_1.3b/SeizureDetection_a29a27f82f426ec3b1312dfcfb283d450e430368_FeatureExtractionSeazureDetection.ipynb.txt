```python
    from sklearn.model_selection import KFold
    from sklearn.preprocessing import StandardScaler
    from sklearn.neural_network import LSTM
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, matthews_corrcoef

    # LSTM Model
    lstm_model = LSTM(input_shape=(train_dat.shape[1], 1), nb_epoch=epochs, 
                      batch_size=batch, dropout=dropout, recurrent_dropout=0.4, 
                      units=lstm_units, activation='relu', kernel_initializer='glorot_uniform', 
                      recurrent_initializer='glorot_uniform', bias_initializer='zeros', 
                      unit_forget_bias=True)

    lstm_model.compile(loss=loss_function, optimizer='adam', metrics=['accuracy'])

    # K-Fold Cross Validation
    kf = KFold(n_splits=k_fold, shuffle=True)
    for train_index, test_index in kf.split(train_dat):
        X_train, X_test = train_dat[train_index], train_dat[test_index]
        y_train, y_test = train_ind[train_index], train_ind[test_index]

        # Normalize the data
        scaler = StandardScaler()
        X_train = scaler.fit_transform(X_train)
        X_test = scaler.transform(X_test)

        # Fit the model
        lstm_model.fit(X_train, y_train, epochs=epochs, batch_size=batch)

        # Predict
        y_pred = lstm_model.predict(X_test)

        # Calculate metrics
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred)
        recall = recall_score(y_test, y_pred)
```python
    import numpy as np
import pandas as pd
from sklearn import naive_bayes, neighbors, svm, tree
from sklearn.ensemble import RandomForestClassifier

# Load the dataset
data = pd.read_csv('your_dataset.csv')

# Split the dataset into features and target variable
features = data.drop('target_column', axis=1)
target = data['target_column']

# Create a Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100)

# Train the model using the training sets
clf.fit(features, target)

# Predict the response for test dataset
pred = clf.predict(features)

# Model Accuracy
print("Accuracy:",metrics.accuracy_score(target, pred))
    ```
    ### Instruction:
    [
    Commit Message: "Random Forest Implementation with Hyperparameter Tuning"
    Original Code Cells:
    '''
    import numpy as np
import pandas as pd
from sklearn import naive_bayes, neighbors, svm, tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

    '''
    ]

    ### Response:
    ```python
    import numpy as np
import pandas as pd
from sklearn import naive_bayes, neighbors, svm, tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

# Load the dataset
data = pd.read_csv('your_dataset.csv')

# Split the dataset into features and target variable
features = data.drop('target_column', axis=1)
target = data['target_column']

# Create a Random Forest Classifier
clf = RandomForestClassifier()

# Create a dictionary of possible parameters
param_grid = {
    'n_estimators': [100, 200, 300, 500],
    'max_depth': [None, 10, 20, 3
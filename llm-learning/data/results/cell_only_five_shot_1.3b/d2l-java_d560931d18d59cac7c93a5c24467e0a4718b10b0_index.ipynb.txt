```python
    import d2l
    import torch
    from torchvision import transforms
    from torch.utils.data import DataLoader
    from torchvision.datasets import ImageFolder
    from torch.optim import SGD

    # 定义数据转换
    data_transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

    # 加载数据集
    train_dataset = ImageFolder(root='path_to_train_data', 
                                 transform=data_transform)
    test_dataset = ImageFolder(root='path_to_test_data', 
                                transform=data_transform)

    # 创建数据加载器
    train_loader = DataLoader(dataset=train_dataset, batch_size=32, shuffle=True)
    test_loader = DataLoader(dataset=test_dataset, batch_size=32, shuffle=False)

    # 定义模型
    model = torch.hub.load('pytorch/vision:v0.9.0', 'resnet18', pretrained=True)
    model.fc = torch.nn.Linear(512, len(train_dataset.classes))

    # 定义损失函数和优化器
    loss_func = torch.nn.CrossEntropyLoss()
    optimizer = SGD(model.parameters(), lr=0.01)

    # 训练模型
    for epoch in range(10):
        model.train()
        for images, labels in train_loader:
            outputs = model(images)
            loss = loss_func(outputs, labels)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

    # 保存模型
```python
    class ListContainer():
        def __init__(self, items):
            self.items = listify(items)

        def __getitem__(self, idx): 
            if isinstance(idx, (int, slice)): 
                return self.items[idx]
            if isinstance(idx[0], bool):
                assert len(idx) == len(self) # boolean mask
                return [o for m, o in zip(idx, self.items) if m]
            return [self.items[i] for i in idx]

        def __len__(self): 
            return len(self.items)

        def __iter__(self): 
            return iter(self.items)

        def __setitem__(self, i, o): 
            self.items[i] = o

        def __delitem__(self, i): 
            del(self.items[i])

        def __repr__(self):
            res = f'{self.__class__.__name__} ({len(self)} items)\n{self.items[:10]}'
            if len(self) > 10: res = res[:-1] + '...]'
            return res

    class ItemList(ListContainer):
        def __init__(self, items, path='.', tfms=None):
            super().__init__(items)
            self.path, self.tfms = Path(path), tfms

        def __repr__(self): 
            return f'{super().__repr__()}\nPath: {self.path}'

        def new(self, items, cls=None):
            if cls is None: 
                cls = self.__class__
            return cls(items, self.path, self.tfms)

        def get(self, i): 
            return i

        def _get(self, i): 
            return compose(self.get(i), self.tfms)

        def __getitem__(self, idx):
            res = super().__getitem__(idx)
            if isinstance(res, list): 
                return [self._get(o
```python
    import torch
    import torch.nn as nn

    class BatchNorm(nn.Module):
        def __init__(self, num_features, eps=1e-5, momentum=0.1):
            super(BatchNorm, self).__init__()
            self.num_features = num_features
            self.eps = eps
            self.momentum = momentum
            self.weight = nn.Parameter(torch.Tensor(num_features).uniform_(-0.01, 0.01))
            self.bias = nn.Parameter(torch.Tensor(num_features).uniform_(-0.01, 0.01))
            self.register_buffer('running_mean', torch.Tensor(num_features).fill_(0))
            self.register_buffer('running_var', torch.Tensor(num_features).fill_(1))

        def forward(self, x):
            # N x C x H x W
            if x.dim() != 4:
                raise ValueError('Input tensor must be 4D')

            N, C = x.size(0), x.size(1)
            running_mean = self.running_mean.repeat(N)
            running_var = self.running_var.repeat(N)

            # compute outputs
            output = torch.addbmm(self.bias, torch.mul(x.unsqueeze(2), x.unsqueeze(3)), running_var.unsqueeze(0).unsqueeze(0)) / torch.sqrt(running_var + self.eps)
            output = output.add_(self.weight.unsqueeze(0).unsqueeze(0))

            # update running mean and var
            self.running_mean = self.running_mean - self.momentum * (x - running_mean)
            self.running_var = self.running_var - self.momentum * (x.pow(2) - running_var)

            return output

        def extra_repr(self):
            return '{num_features}, eps=
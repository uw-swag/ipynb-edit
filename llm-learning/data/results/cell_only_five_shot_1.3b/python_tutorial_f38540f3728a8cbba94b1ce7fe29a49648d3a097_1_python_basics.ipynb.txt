```python
    # a nicer way to do something like this is string formatting
    # this allows you to include the values of other variables in a string
    formatted_string = f"This is the value of width: {width}"
    formatted_string
    # this also works for multiple variables
    f"These are the values of width: {width} and height: {height}"
    # you have to use different placeholders for different datatypes:
    # %i is for integers
    # %f is for floats
    # %s is for strings
    # %r uses the internal representation
    a_float = 5.896
    a_str = "FOO\nBAR"
    print(a_float)
    print(a_str)
    print(f"This is the printed output of the float a_float: {a_float} and the str a_str: {a_str}")
    # see what happens if you use %r instead:
    print(f"This is the printed output of the float a_float: {a_float} and the str a_str: {a_str}")
    # with %f, floats are by default included with 6 places after the decimal point
    # with additional options, the output can be adapted:
    print(f"This is the default output of the float: {a_float}")
    print(f"This is the float rounded to 2 places after the decimal point: {a_float:.2f}")
    # python supports assigning values to multiple variables at once
    var0 = 8, "hey"        # var0 is a tuple with both values
    print(f"var0: {var0}")
    var1, var2 = var0  # the 2 values are unpacked into the two variables
    print(f"var1: {var1},     var2: {var2}")
    # this is really handy for switching the values of 2 variables, as you don't need a temp variable
    var1, var2 = var2, var1 + 1
    print(f"var1: {var1}, var2: {var2}")
    a_dict = {1: "hello", 
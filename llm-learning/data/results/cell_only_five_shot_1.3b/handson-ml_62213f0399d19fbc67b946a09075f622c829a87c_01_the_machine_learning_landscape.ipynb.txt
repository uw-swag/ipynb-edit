```python
    # Code example
    #########################################################################
    from sklearn import linear_model
    import numpy as np
    import pandas as pd

    # Load the data
    oecd_bli = pd.read_csv(datapath+"oecd_bli_2015.csv", thousands=',')
    gdp_per_capita = pd.read_csv(datapath+"gdp_per_capita.csv", thousands=',',delimiter='\t',
                                 encoding='latin1', na_values="n/a")

    # Prepare the data
    country_stats = prepare_country_stats(oecd_bli, gdp_per_capita)
    X = np.c_[country_stats["GDP per capita"]]
    y = np.c_[country_stats["Life satisfaction"]]

    # Visualize the data
    country_stats.plot(kind='scatter', x="GDP per capita", y='Life satisfaction')
    plt.show()

    # Select a linear model
    lin_reg_model = linear_model.LinearRegression()

    # Train the model
    lin_reg_model.fit(X, y)

    # Make a prediction for Cyprus
    X_new = [[22587]]  # Cyprus' GDP per capita
    print(lin_reg_model.predict(X_new)) # outputs [[ 5.96242338]]

    # Code example
    #########################################################################
    oecd_bli, gdp_per_capita = backup

    def prepare_country_stats(oecd_bli, gdp_per_capita):
        return sample_data

    # Code example
    #########################################################################
    from sklearn import neighbors
    import numpy as np
    import pandas as pd

    # Load the data
    oecd_bli = pd.read_csv(datapath+"oecd_bli_2015.csv", thousands=',')
    g
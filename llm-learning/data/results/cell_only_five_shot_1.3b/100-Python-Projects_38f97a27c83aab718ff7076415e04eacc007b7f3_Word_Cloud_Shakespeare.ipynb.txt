
    ### Instruction:
    [
    Commit Message: "Implemented Linear Regression Model"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn import metrics

    # Split the data into training/testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    # Create linear regression object
    regr = LinearRegression()

    # Train the model using the training sets
    regr.fit(X_train, y_train)

    # Make predictions using the testing set
    y_pred = regr.predict(X_test)

    # The coefficients
    print('Coefficients: \n', regr.coef_)

    # The mean squared error
    print('Mean squared error: %.2f'
          % metrics.mean_squared_error(y_test, y_pred))
    print('Coefficient of determination: %.2f'
          % metrics.r2_score(y_test, y_pred))

    # Plot outputs
    plt.scatter(X_test, y_test,  color='black')
    plt.plot(X_test, y_pred, color='blue', linewidth=3)

    plt.show()

    ### Instruction:
    [
    Commit Message: "Implemented Polynomial Regression Model"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    from sklearn.preprocessing import PolynomialFeatures

    # Transform the data
    poly = PolynomialFeatures(degree=2)
    X_train_transformed = poly.fit_transform(X_train)
    X_test_transformed = poly.transform(X_test)

    # Create polynomial regression object
    poly_regr = LinearReg
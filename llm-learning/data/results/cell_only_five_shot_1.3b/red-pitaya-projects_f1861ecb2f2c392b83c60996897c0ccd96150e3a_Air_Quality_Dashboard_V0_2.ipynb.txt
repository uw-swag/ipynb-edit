
    The analog relative values are calculated by taking the difference between the current and previous value. This is done to measure the change in the analog values. 

    The `analog_temp()`, `analog_voc_ratio()`, `analog_alcohol_ratio()`, `pm_per_1l_air(0.3)`, `pm_per_1l_air(0.5)`, `pm_per_1l_air(1.0)`, `getGM102B_raw()`, `getGM302B_raw()`, `getGM502B_raw()`, `getGM702B_raw()`, `get_sensor_data().temperature`, `get_sensor_data().pressure`, `get_sensor_data().humidity`, `get_sensor_data().heat_stable`, `get_sensor_data().gas_resistance` are all methods in the `air_data` object.

    The `FuncAnimation` function is used to animate the data. It takes the current frame of the plot and the function `animate` as arguments. The `animate` function updates the data, plots the new data, and then displays the plot. The `interval` parameter is set to 3000 milliseconds, which means the animation will be updated every 3 seconds.

    The `FuncAnimation` function returns an animation object. This object can be used to control the animation, such as stopping it, restarting it, or even saving the animation to a file.

    The `plt.show()` function is used to display the plot.

    The `clean_data_table` is a temporary data frame that is used to store the data from the current frame of the plot. It is then appended to the `df` data frame, which is used to store the data from all frames of the animation.

    The `df` data frame is then printed to the console.

    The `ani` variable is used to control the animation. It is set to the result of `FuncAnimation`, which is an animation object.

    The `ani.save('my_animation.mp4')` line saves the animation to a file
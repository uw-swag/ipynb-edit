```python
    from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
    from torchvision.models.detection import fasterrcnn_resnet50_fpn

    # load an Faster R-CNN pre-trained model (weights not included in this example)
    model = fasterrcnn_resnet50_fpn(pretrained=True)

    # get number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features

    # replace pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # define a function to convert the labels to a tensor
    def get_targets(bboxes, labels):
        targets = []
        for bbox, label in zip(bboxes, labels):
            target = {}
            target["boxes"] = torch.tensor(bbox, dtype=torch.float32)
            target["labels"] = torch.tensor(label, dtype=torch.int64)
            targets.append(target)

        return targets

    # get targets
    train_targets = get_targets(train_bboxes, train_labels)
    test_targets = get_targets(test_bboxes, test_labels)

    # load the pre-trained model
    model.load_state_dict(torch.load("faster_rcnn_resnet50_fpn_coco.pth"))

    # train the model
    params = [p for p in model.parameters() if p.requires_grad]
    optimizer = torch.optim.SGD(params, lr=0.005,
                                momentum=0.9, weight_decay=0.0005)

    # use the training dataset to train the model
    model.train()
    for img, targets in train_ds:
        loss_dict = model(img, targets)
        loss = sum(loss
```python
    # Import necessary libraries
    from keras.models import Sequential
    from keras.layers import Dense, Activation

    # Define the model
    model = Sequential()
    model.add(Dense(64, input_dim=20, kernel_initializer='normal', activation='relu'))
    model.add(Dense(10, kernel_initializer='normal', activation='softmax'))

    # Compile the model
    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    ```

    ### Instruction:
    [
    Commit Message: "add notes to multilayer perceptron"
    Original Code Cells:
    '''
    from IPython.display import Image
i = Image(filename='../figures/images/XOR_linear.png')
display(i)
#TODO
# TODO
# TODO: 
# - create a function to generate training data for XOR problem
# - plot the training data
# - set up keras model 
# - train and test keras model
# - compute metrics
import numpy as np
# Define function to create figures type
def figure_type(mu1, sigma1, mu2, sigma2, n_samples, target, seed):
    '''creates [n_sampes, 2] array
    
    Parameters
    ----------
    mu1, sigma1: int, shape = [n_samples, 2]
        mean feature-1, standar-dev feature-1
    mu2, sigma2: int, shape = [n_samples, 2]
        mean feature-2, standar-dev feature-2
    n_samples: int, shape= [n_samples, 1]
        number of sample cases
    target: int, shape = [1]
        target value
    seed: int
        random seed for reproducibility
    
    Return
    ------
    X: ndim-array, shape = [n_samples, 2]
        matrix of feature vectors
    y:
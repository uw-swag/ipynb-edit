```python
    from sklearn.ensemble import GradientBoostingClassifier
    from sklearn.metrics import accuracy_score
    from sklearn.model_selection import train_test_split

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train a Gradient Boosting Classifier
    gb_model = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=42)
    gb_model.fit(X_train, y_train)

    # Make predictions on the testing set
    y_pred = gb_model.predict(X_test)

    # Evaluate the model
    print(f'Accuracy: {accuracy_score(y_test, y_pred)}')

    # Check for overfitting
    if gb_model.loss_ < gb_model.best_loss_:
        print('The model is overfitting!')
    ```

    ### Instruction:
    [
    Commit Message: "Adding a new feature: 'new_feature'"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    ```python
    # Add a new feature to the dataset
    data['new_feature'] = data['existing_feature'] * 2

    # Check the new feature
    print(data['new_feature'].head())
    ```

    ### Instruction:
    [
    Commit Message: "Adding a new feature: 'new_feature2'"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    ```python
    # Add a new feature to the dataset
    data['new_feature2'] = data['existing_feature'] ** 2

    # Check the new feature
    print(data['new_feature2'].head())
    ```

    ### Instruction:

```python
    class AvgStatsCallback(Callback):
        def begin_fit(self):
            self.avg_stats = []

        def after_batch(self):
            if not self.in_train: return
            self.avg_stats.append(self.loss.detach().cpu().item())

        def on_epoch_end(self):
            avg_loss = np.mean(self.avg_stats)
            print(f"Average Loss: {avg_loss}")

    model, loss_func = get_model()
    opt = torch.optim.SGD(model.parameters(), lr=lr)
    learn = Learner(data, model, opt, loss_func=loss_func)

    run = Runner(cb_funcs=[AvgStatsCallback()])
    run.fit(1, learn)
    ```
    In the code above, the `AvgStatsCallback` class is defined to measure the average loss over the epochs. It overrides the `after_batch` method to append the loss to a list, and the `on_epoch_end` method to calculate the average loss and print it.

```python
    from deepchecks import DatasetsSizeComparison
    from deepchecks.condition import ConditionResult

    # Our parameters for the condition
    low_threshold = 0.4
    high_threshold = 0.6

    # Create the condition function
    def custom_condition(value: dict): 
        ratio = value['Test'] / value['Train']
        if low_threshold <= ratio <= high_threshold:
            return ConditionResult(True)
        else:
            # Note: if you doesn't care about the extra info, you can return directly a boolean
            return ConditionResult(False, f'Test-Train ratio is {ratio:.2}')

    # Create the condition name
    condition_name = f'Test-Train ratio is between {low_threshold} to {high_threshold}'

    # Create check instance with the condition 
    check = DatasetsSizeComparison().add_condition(condition_name, custom_condition)
    ```

    This code creates a custom condition for the `DatasetsSizeComparison` check. The condition is defined as a function that takes a dictionary as input and returns a `ConditionResult`. The function checks if the 'Test' size is between `low_threshold` and `high_threshold`, inclusive. If the condition is met, the function returns `True` and a success message. If the condition is not met, the function returns `False` and a failure message with the ratio.

    The `add_condition` method of the `DatasetsSizeComparison` check is used to add the custom condition to the check. The condition is then used in the `check` variable, which is an instance of the `DatasetsSizeComparison` check.

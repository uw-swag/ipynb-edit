```python
    import tensorflow as tf
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Dense

    # Define the model
    model = Sequential()
    model.add(Dense(32, input_dim=8, activation='relu'))  # input layer
    model.add(Dense(16, activation='relu'))  # hidden layer
    model.add(Dense(1, activation='sigmoid'))  # output layer

    # Compile the model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Fit the model
    model.fit(X_train, y_train, epochs=100, batch_size=10)

    # Evaluate the model
    _, accuracy = model.evaluate(X_test, y_test)
    print('Accuracy: %.2f' % (accuracy*100))
    ```

    This is a simple example of a multilayer perceptron (MLP) model in TensorFlow. The model is a simple feed-forward neural network with one input layer, one hidden layer, and one output layer. The input layer has 8 neurons and the output layer has 1 neuron, and the hidden layer has 16 neurons. The model is trained for 100 epochs with a batch size of 10. The model's accuracy is printed out at the end.

```python
    # Importing necessary libraries
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn import metrics

    # Loading the dataset
    df = pd.read_csv('data.csv')

    # Data preprocessing
    df = df.dropna()

    # Splitting the dataset into features and target variable
    X = df.drop('target_column', axis=1)
    y = df['target_column']

    # Splitting the dataset into the Training set and Test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

    # Training the Simple Linear Regression model on the Training set
    regressor = LinearRegression()
    regressor.fit(X_train, y_train)

    # Predicting the Test set results
    y_pred = regressor.predict(X_test)

    # Visualising the results
    plt.scatter(X_test, y_test, color = 'red')
    plt.plot(X_test, y_pred, color = 'blue')
    plt.title('Results of Linear Regression')
    plt.xlabel('Features')
    plt.ylabel('Target')
    plt.show()

    # Evaluating the model
    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
    print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
    ```
    This is a simple example of a Linear Regression model using Python and the scikit-learn library. The model is trained on
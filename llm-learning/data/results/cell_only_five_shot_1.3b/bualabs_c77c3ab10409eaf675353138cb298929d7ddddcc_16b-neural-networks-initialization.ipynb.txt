```python
    class Relu(Module):
    def forward(self, inp):
        return inp.clamp_min(0.) - 0.5
    def bwd(self, out, inp):
        inp.g = (inp>0).float()*out.g

    class XavierInit(Module):
    def forward(self, inp):
        return inp.mul_(2./inp.size(1)).clamp_min(0.) - 1.
    def bwd(self, out, inp):
        inp.g = (inp>0).float()*out.g

    class KaimingInit(Module):
    def forward(self, inp):
        return inp.mul_(2./inp.size(1)).clamp_min(0.) - 0.5
    def bwd(self, out, inp):
        inp.g = (inp>0).float()*out.g

    w1 = torch.randn(m, nh) * math.sqrt(1./m)
    b1 = torch.zeros(nh)
    w2 = torch.randn(nh, nh)* math.sqrt(1./nh)
    b2 = torch.zeros(nh)
    w3 = torch.randn(nh, nh) * math.sqrt(1./nh)
    b3 = torch.zeros(nh)
    w4 = torch.randn(nh, 1) * math.sqrt(1./nh)
    b4 = torch.zeros(1)
    z1 = (x_train @ w1).clamp(0.)-0.5
    z1.mean(), z1.std()
    w1 = torch.randn(m, nh) * math.sqrt(2./m)
    b1 = torch.zeros(nh)
    w2 = torch.randn(nh, nh)* math.sqrt(2./nh)
    b2 = torch.zeros(nh)
    w3
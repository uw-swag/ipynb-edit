```python
    class REINFORCE_Agent(Agent):
        # REINFORCE policy gradient method using deep Keras NN
        def __init__(self, state_size=4, action_size=2, learning_rate=0.0005,
                     discount_rate=0.98, n_hidden_layers=2, hidden_layer_size=16,
                     activation='relu', reg_penalty=0, dropout=0, filename="kreinforce",
                     verbose=True):
            self.state_size = state_size
            self.action_size = action_size
            self.action_space = list(range(action_size))
            self.learning_rate = learning_rate
            self.discount_rate = discount_rate

            self.n_hidden_layers = n_hidden_layers
            self.hidden_layer_size = hidden_layer_size
            self.activation = activation
            self.reg_penalty = reg_penalty
            self.dropout = dropout
            self.verbose = verbose
            self.filename = filename

            self.train_model, self.predict_model = self.build_model()
            self.results = []
            self.save_interval = 10
            self.reset()

        def reset(self):
            self.timestep = 0
            # truncate memory
            self.state_memory = []
            self.action_memory = []
            self.reward_memory = []

        def build_model(self):

            def custom_loss(y_true, y_pred):
                y_pred_clip = K.clip(y_pred, 1e-8, 1-1e-8)
                log_likelihood = y_true*K.log(y_pred_clip)

                return K.sum(-log_likelihood*discounted_rewards)

            inputs = Input(shape=(self.state_size,), name="Input")
            discounted_rewards = Input(shape=(1,), name="Discounted_rewards")
            last_layer = inputs
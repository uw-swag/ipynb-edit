```python
    import numpy as np
    import pandas as pd
    from sklearn.model_selection import train_test_split 
    from sklearn.linear_model import LinearRegression
    from sklearn import metrics

    # Assuming you have a DataFrame df with columns 'feature1', 'feature2', 'target'
    X = df[['feature1', 'feature2']]
    y = df['target']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    regressor = LinearRegression()  
    regressor.fit(X_train, y_train)

    y_pred = regressor.predict(X_test)

    print('Coefficients: \n', regressor.coef_)
    print('Mean squared error: %.2f'
          % metrics.mean_squared_error(y_test, y_pred))
    print('Coefficient of determination: %.2f'
          % metrics.r2_score(y_test, y_pred))
    ```

    ### Instruction:
    [
    Commit Message: "Adding a function to calculate the mean squared error"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    ```python
    def calculate_mse(y_test, y_pred):
        return metrics.mean_squared_error(y_test, y_pred)

    mse = calculate_mse(y_test, y_pred)
    print('Mean squared error: %.2f' % mse)
    ```

    ### Instruction:
    [
    Commit Message: "Adding a function to calculate the coefficient of determination"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    ```python
    def calculate_r2(y_test, y_pred):
        return metrics.r2_score(y_test, y_pred)

    r2
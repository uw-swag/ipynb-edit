```python
    import numpy as np

    def adaline_formula(x, y, alpha=0.01, iterations=1000):
        """
        Implementation of the Adaline learning algorithm.

        Parameters:
        x (ndarray): Input dataset.
        y (ndarray): Target values.
        alpha (float): Learning rate.
        iterations (int): Number of iterations.

        Returns:
        ndarray: Weights vector.
        """
        # Initialize weights to zeros
        weights = np.zeros(1 + x.shape[1])

        for i in range(iterations):
            # Compute the weighted sum of the inputs
            weighted_sum = np.dot(x, weights[1:]) + weights[0]

            # Apply the activation function
            activation = np.where(weighted_sum > 0, 1, -1)

            # Compute the error
            error = y - activation

            # Update the weights
            weights[1:] += alpha * np.dot(x.T, error)
            weights[0] += alpha * np.sum(error)

        return weights
    ```

    ### Instruction:
    [
    Commit Message: "add x to adaline formula"
    Original Code Cells:
    '''
    import numpy as np

    def adaline_formula(x, y, alpha=0.01, iterations=1000):
        """
        Implementation of the Adaline learning algorithm.

        Parameters:
        x (ndarray): Input dataset.
        y (ndarray): Target values.
        alpha (float): Learning rate.
        iterations (int): Number of iterations.

        Returns:
        ndarray: Weights vector.
        """
        # Initialize weights to zeros
        weights = np.zeros(1 + x.shape[1])

        for i in range(iterations):
            # Compute the weighted sum of the inputs
            weighted_sum = np.dot(x, weights[1:]) + weights[0]

            # Apply the activation function
            activation = np.
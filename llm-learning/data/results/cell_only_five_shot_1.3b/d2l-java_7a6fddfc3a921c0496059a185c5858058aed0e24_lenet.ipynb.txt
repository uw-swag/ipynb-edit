```python
    import tensorflow as tf
    from tensorflow.examples.tutorials.mnist import input_data

    # Import data
    mnist = input_data.read_data_sets("/tmp/data/", one_hot=True)

    # Parameters
    learning_rate = 0.001
    num_steps = 500
    batch_size = 128
    display_step = 10

    # Network Parameters
    num_input = 784 # MNIST data input (img shape: 28*28)
    num_classes = 10 # MNIST total classes (0-9 digits)
    num_hidden_1 = 128 # first hidden layer neurons
    num_hidden_2 = 256 # second hidden layer neurons

    # tf Graph input
    X = tf.placeholder(tf.float32, [None, num_input], name='X')
    Y = tf.placeholder(tf.float32, [None, num_classes], name='Y')

    # Create model
    def conv_net(X, reuse, n_classes, dropout, is_training):
        # Create a unique name to avoid duplicates on placeholders
        reuse = tf.variable_scope(tf.get_variable_scope(), reuse=reuse)
        # Retrieve inputs
        X = tf.reshape(X, shape=[-1, 28, 28, 1])
        # Convolution Layer with 32 filters and a kernel size of 5
        conv1 = tf.layers.conv2d(X, 32, 5, activation=tf.nn.relu)
        # Max Pooling (down-sampling) with strides of 2 and kernel size of 2
        conv1 = tf.layers.max_pooling2d(conv1, 2, 2)
        # Convolution Layer with 64 filters
        conv2 = tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu)
        # Max Pooling

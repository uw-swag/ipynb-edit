
The updated code is as follows:

```python
import serial
import time
import csv
import re
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
import numpy as np
from datetime import datetime, date
from IPython.display import clear_output
import ipywidgets as widgets
 
portPath = "/dev/ttyACM0"       # Must match value shown on Arduino IDE
baud = 115200                   # Must match Arduino baud rate
timeout = 5                     # Seconds
filename = str(date.today()) + " data.csv"
max_num_readings = 8
num_signals = 1
 
 
 
def create_serial_obj(portPath, baud_rate, tout):
    """
    Given the port path, baud rate, and timeout value, creates and returns a pyserial object.
    """
    return serial.Serial(portPath, baud_rate, timeout = tout)

# Assuming df is a pandas DataFrame with columns 'Date', 'PM 0.3', 'PM 0.5', etc.
x = df['Date']
y1 = df['PM 0.3']
y2 = df['PM 0.5']
y3 = df['PM 1.0']
y4 = df['PM 2.5']
y5 = df['PM 5.0']
y6 = df['PM 10.0']

# plot
plt.cla()
plt.plot(x,y1, label='PM 0.3')
plt.plot(x,y2, label='PM 0.5')

plt.legend()
# beautify the x-labels
plt.gcf().autofmt_xdate()
plt.show()
plt.ioff()
keep_running = widgets.Checkbox()
keep_running = True
keep_running.description='Keep Running?'

def update_widget_value(keep_running):
    """
    Updates the running widget to stop the loop
    """
    print(keep
```python
    from sklearn.neighbors import KNeighborsClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score

    # Split the dataset into training set and test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Create a KNN classifier
    knn = KNeighborsClassifier(n_neighbors=3)

    # Fit the classifier to the data
    knn.fit(X_train, y_train)

    # Predict the labels of the test set
    y_pred = knn.predict(X_test)

    # Calculate the accuracy of the classifier
    accuracy = accuracy_score(y_test, y_pred)

    print(f"Accuracy: {accuracy}")
    ```

    ### Instruction:
    [
    Commit Message: "Adding a new feature to the model"
    Original Code Cells:
    '''
    
    '''
    ]

    ### Response:
    Here's an example of how you might add a new feature to a model. In this case, we'll add a new feature to the model that represents the number of rooms per dwelling.

    ```python
    # Assume df is your DataFrame and 'rooms' is the column you want to add
    df['rooms'] = df['total_rooms'] / df['total_bedrooms']

    # Now you can use 'rooms' as a feature in your model
    X = df.drop('price', axis=1)
    y = df['price']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Create a KNN classifier
    knn = KNeighborsClassifier(n_neighbors=3)

    # Fit the classifier to the data
   
```python
    import torch.nn as nn

    class Model(nn.Module):
        def __init__(self, n_in, nh, n_out):
            super().__init__()
            self.l1 = nn.Linear(n_in, nh)
            self.l2 = nn.Linear(nh, n_out)
        def __call__(self, x):
            return self.l2(F.relu(self.l1(x)))

    class SelfRegisteredModel(nn.Module):
        def __init__(self, n_in, nh, n_out):
            super().__init__()
            self.l1 = nn.Linear(n_in, nh)
            self.l2 = nn.Linear(nh, n_out)
            self.layers = nn.ModuleList([self.l1, self.l2])

        def forward(self, x):
            for layer in self.layers:
                x = layer(x)
            return x

    model = SelfRegisteredModel(m, nh, c.numpy())
    for p in model.parameters(): print(f'{p.shape}')
    ```

    The `nn.ModuleList` is used to store multiple layers in a model, and the `nn.Sequential` section is used to create a sequential model.

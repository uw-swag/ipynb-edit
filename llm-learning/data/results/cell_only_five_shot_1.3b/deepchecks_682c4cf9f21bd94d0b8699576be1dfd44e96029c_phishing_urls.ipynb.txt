```python
    # Import necessary libraries
    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.naive_bayes import MultinomialNB
    from sklearn.metrics import classification_report, accuracy_score

    # Load the Phishing URL dataset
    url_data = pd.read_csv('phishing_url.csv')

    # Split the dataset into features and target variable
    X = url_data['URL']
    y = url_data['Result']

    # Convert the text data into numerical data
    vectorizer = CountVectorizer()
    X_vectorized = vectorizer.fit_transform(X)

    # Split the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

    # Train a Multinomial Naive Bayes model
    model = MultinomialNB()
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Evaluate the model
    print(classification_report(y_test, y_pred))
    print("Accuracy:", accuracy_score(y_test, y_pred))

    # Save the model
    import joblib
    joblib.dump(model, 'phishing_url_model.pkl')

    # Load the saved model
    loaded_model = joblib.load('phishing_url_model.pkl')

    # Predict on a new URL
    new_url = vectorizer.transform(['http://bit.ly/2HnXnix'])
    prediction = loaded_model.predict(new_url)
    print("Predicted result:", prediction)
    ```

    ## Notebook

    This notebook demonstrates how to use a Naive Bayes classifier to predict whether a URL is a ph
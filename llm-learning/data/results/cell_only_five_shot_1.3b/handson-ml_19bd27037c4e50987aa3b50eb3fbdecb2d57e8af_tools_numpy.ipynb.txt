```
    import numpy as np

    f = np.array([[1,2],[1000, 2000]], dtype=np.int32)
    print("Array:")
    print(f)
    print("Raw data:")
    print(f.data.hex())

    # The hexadecimal representation of the raw data in the numpy array is not the same as the original data.
    # This is because numpy stores the data in a contiguous block of memory, and the hexadecimal representation
    # of this block of memory is not the same as the original data.

    # To get the original data, you would need to decode the hexadecimal data back into the original data format.
    # This is not possible in numpy, as numpy does not store the data in a contiguous block of memory.

    # If you want to get the original data, you would need to decode the hexadecimal data back into the original data format.
    # This is not possible in numpy, as numpy does not store the data in a contiguous block of memory.

    # If you want to get the original data, you would need to decode the hexadecimal data back into the original data format.
    # This is not possible in numpy, as numpy does not store the data in a contiguous block of memory.

    # If you want to get the original data, you would need to decode the hexadecimal data back into the original data format.
    # This is not possible in numpy, as numpy does not store the data in a contiguous block of memory.

    # If you want to get the original data, you would need to decode the hexadecimal data back into the original data format.
    # This is not possible in numpy, as numpy does not store the data in a contiguous block of memory.

    # If you want to get the original data, you would need to decode the hexadecimal data back into the original data format.
    # This is not possible in numpy, as numpy does not store the data in a contiguous block of memory.

    # If you want to